// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shell/shell.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_shell_2fshell_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_shell_2fshell_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_shell_2fshell_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_shell_2fshell_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[4]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shell_2fshell_2eproto;
namespace mavsdk {
namespace rpc {
namespace shell {
class SetShellMessageRequest;
class SetShellMessageRequestDefaultTypeInternal;
extern SetShellMessageRequestDefaultTypeInternal _SetShellMessageRequest_default_instance_;
class SetShellMessageResponse;
class SetShellMessageResponseDefaultTypeInternal;
extern SetShellMessageResponseDefaultTypeInternal _SetShellMessageResponse_default_instance_;
class ShellMessage;
class ShellMessageDefaultTypeInternal;
extern ShellMessageDefaultTypeInternal _ShellMessage_default_instance_;
class ShellResult;
class ShellResultDefaultTypeInternal;
extern ShellResultDefaultTypeInternal _ShellResult_default_instance_;
}  // namespace shell
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::shell::SetShellMessageRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::SetShellMessageRequest>(Arena*);
template<> ::mavsdk::rpc::shell::SetShellMessageResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::SetShellMessageResponse>(Arena*);
template<> ::mavsdk::rpc::shell::ShellMessage* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::ShellMessage>(Arena*);
template<> ::mavsdk::rpc::shell::ShellResult* Arena::CreateMaybeMessage<::mavsdk::rpc::shell::ShellResult>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace shell {

enum ShellResult_Result : int {
  ShellResult_Result_UNKNOWN = 0,
  ShellResult_Result_SUCCESS = 1,
  ShellResult_Result_NO_SYSTEM = 2,
  ShellResult_Result_CONNECTION_ERROR = 3,
  ShellResult_Result_DATA_TOO_LONG = 4,
  ShellResult_Result_NO_RESPONSE = 5,
  ShellResult_Result_ShellResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  ShellResult_Result_ShellResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool ShellResult_Result_IsValid(int value);
constexpr ShellResult_Result ShellResult_Result_Result_MIN = ShellResult_Result_UNKNOWN;
constexpr ShellResult_Result ShellResult_Result_Result_MAX = ShellResult_Result_NO_RESPONSE;
constexpr int ShellResult_Result_Result_ARRAYSIZE = ShellResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShellResult_Result_descriptor();
template<typename T>
inline const std::string& ShellResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, ShellResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function ShellResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    ShellResult_Result_descriptor(), enum_t_value);
}
inline bool ShellResult_Result_Parse(
    const std::string& name, ShellResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<ShellResult_Result>(
    ShellResult_Result_descriptor(), name, value);
}
// ===================================================================

class SetShellMessageRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.SetShellMessageRequest) */ {
 public:
  SetShellMessageRequest();
  virtual ~SetShellMessageRequest();

  SetShellMessageRequest(const SetShellMessageRequest& from);
  SetShellMessageRequest(SetShellMessageRequest&& from) noexcept
    : SetShellMessageRequest() {
    *this = ::std::move(from);
  }

  inline SetShellMessageRequest& operator=(const SetShellMessageRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShellMessageRequest& operator=(SetShellMessageRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetShellMessageRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetShellMessageRequest* internal_default_instance() {
    return reinterpret_cast<const SetShellMessageRequest*>(
               &_SetShellMessageRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SetShellMessageRequest& a, SetShellMessageRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShellMessageRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetShellMessageRequest* New() const final {
    return CreateMaybeMessage<SetShellMessageRequest>(nullptr);
  }

  SetShellMessageRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetShellMessageRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetShellMessageRequest& from);
  void MergeFrom(const SetShellMessageRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetShellMessageRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.shell.SetShellMessageRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shell_2fshell_2eproto);
    return ::descriptor_table_shell_2fshell_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShellMessageFieldNumber = 1,
  };
  // .mavsdk.rpc.shell.ShellMessage shell_message = 1;
  bool has_shell_message() const;
  private:
  bool _internal_has_shell_message() const;
  public:
  void clear_shell_message();
  const ::mavsdk::rpc::shell::ShellMessage& shell_message() const;
  ::mavsdk::rpc::shell::ShellMessage* release_shell_message();
  ::mavsdk::rpc::shell::ShellMessage* mutable_shell_message();
  void set_allocated_shell_message(::mavsdk::rpc::shell::ShellMessage* shell_message);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.SetShellMessageRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::shell::ShellMessage* shell_message_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shell_2fshell_2eproto;
};
// -------------------------------------------------------------------

class SetShellMessageResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.SetShellMessageResponse) */ {
 public:
  SetShellMessageResponse();
  virtual ~SetShellMessageResponse();

  SetShellMessageResponse(const SetShellMessageResponse& from);
  SetShellMessageResponse(SetShellMessageResponse&& from) noexcept
    : SetShellMessageResponse() {
    *this = ::std::move(from);
  }

  inline SetShellMessageResponse& operator=(const SetShellMessageResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SetShellMessageResponse& operator=(SetShellMessageResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SetShellMessageResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SetShellMessageResponse* internal_default_instance() {
    return reinterpret_cast<const SetShellMessageResponse*>(
               &_SetShellMessageResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SetShellMessageResponse& a, SetShellMessageResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(SetShellMessageResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SetShellMessageResponse* New() const final {
    return CreateMaybeMessage<SetShellMessageResponse>(nullptr);
  }

  SetShellMessageResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SetShellMessageResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SetShellMessageResponse& from);
  void MergeFrom(const SetShellMessageResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SetShellMessageResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.shell.SetShellMessageResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shell_2fshell_2eproto);
    return ::descriptor_table_shell_2fshell_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShellResultFieldNumber = 1,
  };
  // .mavsdk.rpc.shell.ShellResult shell_result = 1;
  bool has_shell_result() const;
  private:
  bool _internal_has_shell_result() const;
  public:
  void clear_shell_result();
  const ::mavsdk::rpc::shell::ShellResult& shell_result() const;
  ::mavsdk::rpc::shell::ShellResult* release_shell_result();
  ::mavsdk::rpc::shell::ShellResult* mutable_shell_result();
  void set_allocated_shell_result(::mavsdk::rpc::shell::ShellResult* shell_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.SetShellMessageResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::shell::ShellResult* shell_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shell_2fshell_2eproto;
};
// -------------------------------------------------------------------

class ShellMessage :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.ShellMessage) */ {
 public:
  ShellMessage();
  virtual ~ShellMessage();

  ShellMessage(const ShellMessage& from);
  ShellMessage(ShellMessage&& from) noexcept
    : ShellMessage() {
    *this = ::std::move(from);
  }

  inline ShellMessage& operator=(const ShellMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellMessage& operator=(ShellMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShellMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShellMessage* internal_default_instance() {
    return reinterpret_cast<const ShellMessage*>(
               &_ShellMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ShellMessage& a, ShellMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellMessage* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShellMessage* New() const final {
    return CreateMaybeMessage<ShellMessage>(nullptr);
  }

  ShellMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShellMessage>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShellMessage& from);
  void MergeFrom(const ShellMessage& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShellMessage* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.shell.ShellMessage";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shell_2fshell_2eproto);
    return ::descriptor_table_shell_2fshell_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kNeedResponseFieldNumber = 1,
    kTimeoutFieldNumber = 2,
  };
  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // bool need_response = 1;
  void clear_need_response();
  bool need_response() const;
  void set_need_response(bool value);

  // uint32 timeout = 2;
  void clear_timeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout() const;
  void set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.ShellMessage)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  bool need_response_;
  ::PROTOBUF_NAMESPACE_ID::uint32 timeout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shell_2fshell_2eproto;
};
// -------------------------------------------------------------------

class ShellResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.shell.ShellResult) */ {
 public:
  ShellResult();
  virtual ~ShellResult();

  ShellResult(const ShellResult& from);
  ShellResult(ShellResult&& from) noexcept
    : ShellResult() {
    *this = ::std::move(from);
  }

  inline ShellResult& operator=(const ShellResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShellResult& operator=(ShellResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShellResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShellResult* internal_default_instance() {
    return reinterpret_cast<const ShellResult*>(
               &_ShellResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ShellResult& a, ShellResult& b) {
    a.Swap(&b);
  }
  inline void Swap(ShellResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShellResult* New() const final {
    return CreateMaybeMessage<ShellResult>(nullptr);
  }

  ShellResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShellResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShellResult& from);
  void MergeFrom(const ShellResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShellResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.shell.ShellResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_shell_2fshell_2eproto);
    return ::descriptor_table_shell_2fshell_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef ShellResult_Result Result;
  static constexpr Result UNKNOWN =
    ShellResult_Result_UNKNOWN;
  static constexpr Result SUCCESS =
    ShellResult_Result_SUCCESS;
  static constexpr Result NO_SYSTEM =
    ShellResult_Result_NO_SYSTEM;
  static constexpr Result CONNECTION_ERROR =
    ShellResult_Result_CONNECTION_ERROR;
  static constexpr Result DATA_TOO_LONG =
    ShellResult_Result_DATA_TOO_LONG;
  static constexpr Result NO_RESPONSE =
    ShellResult_Result_NO_RESPONSE;
  static inline bool Result_IsValid(int value) {
    return ShellResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    ShellResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    ShellResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    ShellResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return ShellResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return ShellResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return ShellResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResponseShellMessageFieldNumber = 3,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.shell.ShellMessage response_shell_message = 3;
  bool has_response_shell_message() const;
  private:
  bool _internal_has_response_shell_message() const;
  public:
  void clear_response_shell_message();
  const ::mavsdk::rpc::shell::ShellMessage& response_shell_message() const;
  ::mavsdk::rpc::shell::ShellMessage* release_response_shell_message();
  ::mavsdk::rpc::shell::ShellMessage* mutable_response_shell_message();
  void set_allocated_response_shell_message(::mavsdk::rpc::shell::ShellMessage* response_shell_message);

  // .mavsdk.rpc.shell.ShellResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::shell::ShellResult_Result result() const;
  void set_result(::mavsdk::rpc::shell::ShellResult_Result value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.shell.ShellResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  ::mavsdk::rpc::shell::ShellMessage* response_shell_message_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_shell_2fshell_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SetShellMessageRequest

// .mavsdk.rpc.shell.ShellMessage shell_message = 1;
inline bool SetShellMessageRequest::has_shell_message() const {
  return this != internal_default_instance() && shell_message_ != nullptr;
}
inline void SetShellMessageRequest::clear_shell_message() {
  if (GetArenaNoVirtual() == nullptr && shell_message_ != nullptr) {
    delete shell_message_;
  }
  shell_message_ = nullptr;
}
inline const ::mavsdk::rpc::shell::ShellMessage& SetShellMessageRequest::shell_message() const {
  const ::mavsdk::rpc::shell::ShellMessage* p = shell_message_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.SetShellMessageRequest.shell_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::shell::ShellMessage*>(
      &::mavsdk::rpc::shell::_ShellMessage_default_instance_);
}
inline ::mavsdk::rpc::shell::ShellMessage* SetShellMessageRequest::release_shell_message() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.SetShellMessageRequest.shell_message)
  
  ::mavsdk::rpc::shell::ShellMessage* temp = shell_message_;
  shell_message_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::shell::ShellMessage* SetShellMessageRequest::mutable_shell_message() {
  
  if (shell_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::shell::ShellMessage>(GetArenaNoVirtual());
    shell_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.SetShellMessageRequest.shell_message)
  return shell_message_;
}
inline void SetShellMessageRequest::set_allocated_shell_message(::mavsdk::rpc::shell::ShellMessage* shell_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shell_message_;
  }
  if (shell_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shell_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shell_message, submessage_arena);
    }
    
  } else {
    
  }
  shell_message_ = shell_message;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.SetShellMessageRequest.shell_message)
}

// -------------------------------------------------------------------

// SetShellMessageResponse

// .mavsdk.rpc.shell.ShellResult shell_result = 1;
inline bool SetShellMessageResponse::has_shell_result() const {
  return this != internal_default_instance() && shell_result_ != nullptr;
}
inline void SetShellMessageResponse::clear_shell_result() {
  if (GetArenaNoVirtual() == nullptr && shell_result_ != nullptr) {
    delete shell_result_;
  }
  shell_result_ = nullptr;
}
inline const ::mavsdk::rpc::shell::ShellResult& SetShellMessageResponse::shell_result() const {
  const ::mavsdk::rpc::shell::ShellResult* p = shell_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.SetShellMessageResponse.shell_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::shell::ShellResult*>(
      &::mavsdk::rpc::shell::_ShellResult_default_instance_);
}
inline ::mavsdk::rpc::shell::ShellResult* SetShellMessageResponse::release_shell_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.SetShellMessageResponse.shell_result)
  
  ::mavsdk::rpc::shell::ShellResult* temp = shell_result_;
  shell_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::shell::ShellResult* SetShellMessageResponse::mutable_shell_result() {
  
  if (shell_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::shell::ShellResult>(GetArenaNoVirtual());
    shell_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.SetShellMessageResponse.shell_result)
  return shell_result_;
}
inline void SetShellMessageResponse::set_allocated_shell_result(::mavsdk::rpc::shell::ShellResult* shell_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete shell_result_;
  }
  if (shell_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      shell_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, shell_result, submessage_arena);
    }
    
  } else {
    
  }
  shell_result_ = shell_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.SetShellMessageResponse.shell_result)
}

// -------------------------------------------------------------------

// ShellMessage

// bool need_response = 1;
inline void ShellMessage::clear_need_response() {
  need_response_ = false;
}
inline bool ShellMessage::need_response() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellMessage.need_response)
  return need_response_;
}
inline void ShellMessage::set_need_response(bool value) {
  
  need_response_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellMessage.need_response)
}

// uint32 timeout = 2;
inline void ShellMessage::clear_timeout() {
  timeout_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShellMessage::timeout() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellMessage.timeout)
  return timeout_;
}
inline void ShellMessage::set_timeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  timeout_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellMessage.timeout)
}

// string data = 3;
inline void ShellMessage::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShellMessage::data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellMessage.data)
  return _internal_data();
}
inline void ShellMessage::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellMessage.data)
}
inline std::string* ShellMessage::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.ShellMessage.data)
  return _internal_mutable_data();
}
inline const std::string& ShellMessage::_internal_data() const {
  return data_.GetNoArena();
}
inline void ShellMessage::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShellMessage::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.shell.ShellMessage.data)
}
inline void ShellMessage::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.shell.ShellMessage.data)
}
inline void ShellMessage::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.shell.ShellMessage.data)
}
inline std::string* ShellMessage::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShellMessage::release_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.ShellMessage.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShellMessage::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.ShellMessage.data)
}

// -------------------------------------------------------------------

// ShellResult

// .mavsdk.rpc.shell.ShellResult.Result result = 1;
inline void ShellResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::shell::ShellResult_Result ShellResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellResult.result)
  return static_cast< ::mavsdk::rpc::shell::ShellResult_Result >(result_);
}
inline void ShellResult::set_result(::mavsdk::rpc::shell::ShellResult_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellResult.result)
}

// string result_str = 2;
inline void ShellResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& ShellResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellResult.result_str)
  return _internal_result_str();
}
inline void ShellResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.shell.ShellResult.result_str)
}
inline std::string* ShellResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.ShellResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& ShellResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void ShellResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void ShellResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.shell.ShellResult.result_str)
}
inline void ShellResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.shell.ShellResult.result_str)
}
inline void ShellResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.shell.ShellResult.result_str)
}
inline std::string* ShellResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* ShellResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.ShellResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void ShellResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.ShellResult.result_str)
}

// .mavsdk.rpc.shell.ShellMessage response_shell_message = 3;
inline bool ShellResult::has_response_shell_message() const {
  return this != internal_default_instance() && response_shell_message_ != nullptr;
}
inline void ShellResult::clear_response_shell_message() {
  if (GetArenaNoVirtual() == nullptr && response_shell_message_ != nullptr) {
    delete response_shell_message_;
  }
  response_shell_message_ = nullptr;
}
inline const ::mavsdk::rpc::shell::ShellMessage& ShellResult::response_shell_message() const {
  const ::mavsdk::rpc::shell::ShellMessage* p = response_shell_message_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.shell.ShellResult.response_shell_message)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::shell::ShellMessage*>(
      &::mavsdk::rpc::shell::_ShellMessage_default_instance_);
}
inline ::mavsdk::rpc::shell::ShellMessage* ShellResult::release_response_shell_message() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.shell.ShellResult.response_shell_message)
  
  ::mavsdk::rpc::shell::ShellMessage* temp = response_shell_message_;
  response_shell_message_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::shell::ShellMessage* ShellResult::mutable_response_shell_message() {
  
  if (response_shell_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::shell::ShellMessage>(GetArenaNoVirtual());
    response_shell_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.shell.ShellResult.response_shell_message)
  return response_shell_message_;
}
inline void ShellResult::set_allocated_response_shell_message(::mavsdk::rpc::shell::ShellMessage* response_shell_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete response_shell_message_;
  }
  if (response_shell_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      response_shell_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, response_shell_message, submessage_arena);
    }
    
  } else {
    
  }
  response_shell_message_ = response_shell_message;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.shell.ShellResult.response_shell_message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace shell
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::shell::ShellResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::shell::ShellResult_Result>() {
  return ::mavsdk::rpc::shell::ShellResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_shell_2fshell_2eproto
