// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: shell/shell.proto

#include "shell/shell.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_shell_2fshell_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellMessage_shell_2fshell_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_shell_2fshell_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellResult_shell_2fshell_2eproto;
namespace mavsdk {
namespace rpc {
namespace shell {
class SendRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendRequest> _instance;
} _SendRequest_default_instance_;
class SendResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SendResponse> _instance;
} _SendResponse_default_instance_;
class ShellMessageDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellMessage> _instance;
} _ShellMessage_default_instance_;
class ShellResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShellResult> _instance;
} _ShellResult_default_instance_;
}  // namespace shell
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_SendRequest_shell_2fshell_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::shell::_SendRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::shell::SendRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::shell::SendRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendRequest_shell_2fshell_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendRequest_shell_2fshell_2eproto}, {
      &scc_info_ShellMessage_shell_2fshell_2eproto.base,}};

static void InitDefaultsscc_info_SendResponse_shell_2fshell_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::shell::_SendResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::shell::SendResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::shell::SendResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SendResponse_shell_2fshell_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SendResponse_shell_2fshell_2eproto}, {
      &scc_info_ShellResult_shell_2fshell_2eproto.base,}};

static void InitDefaultsscc_info_ShellMessage_shell_2fshell_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::shell::_ShellMessage_default_instance_;
    new (ptr) ::mavsdk::rpc::shell::ShellMessage();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::shell::ShellMessage::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellMessage_shell_2fshell_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellMessage_shell_2fshell_2eproto}, {}};

static void InitDefaultsscc_info_ShellResult_shell_2fshell_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::shell::_ShellResult_default_instance_;
    new (ptr) ::mavsdk::rpc::shell::ShellResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::shell::ShellResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShellResult_shell_2fshell_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShellResult_shell_2fshell_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_shell_2fshell_2eproto[4];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_shell_2fshell_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_shell_2fshell_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_shell_2fshell_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::SendRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::SendRequest, shell_message_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::SendResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::SendResponse, shell_result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::SendResponse, response_message_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellMessage, need_response_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellMessage, timeout_ms_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellMessage, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::shell::ShellResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::shell::SendRequest)},
  { 6, -1, sizeof(::mavsdk::rpc::shell::SendResponse)},
  { 13, -1, sizeof(::mavsdk::rpc::shell::ShellMessage)},
  { 21, -1, sizeof(::mavsdk::rpc::shell::ShellResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::shell::_SendRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::shell::_SendResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::shell::_ShellMessage_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::shell::_ShellResult_default_instance_),
};

const char descriptor_table_protodef_shell_2fshell_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\021shell/shell.proto\022\020mavsdk.rpc.shell\"D\n"
  "\013SendRequest\0225\n\rshell_message\030\001 \001(\0132\036.ma"
  "vsdk.rpc.shell.ShellMessage\"b\n\014SendRespo"
  "nse\0223\n\014shell_result\030\001 \001(\0132\035.mavsdk.rpc.s"
  "hell.ShellResult\022\035\n\025response_message_dat"
  "a\030\002 \001(\t\"G\n\014ShellMessage\022\025\n\rneed_response"
  "\030\001 \001(\010\022\022\n\ntimeout_ms\030\002 \001(\r\022\014\n\004data\030\003 \001(\t"
  "\"\273\001\n\013ShellResult\0224\n\006result\030\001 \001(\0162$.mavsd"
  "k.rpc.shell.ShellResult.Result\022\022\n\nresult"
  "_str\030\002 \001(\t\"b\n\006Result\022\013\n\007UNKNOWN\020\000\022\013\n\007SUC"
  "CESS\020\001\022\r\n\tNO_SYSTEM\020\002\022\024\n\020CONNECTION_ERRO"
  "R\020\003\022\017\n\013NO_RESPONSE\020\004\022\010\n\004BUSY\020\0052W\n\014ShellS"
  "ervice\022G\n\004Send\022\035.mavsdk.rpc.shell.SendRe"
  "quest\032\036.mavsdk.rpc.shell.SendResponse\"\000B"
  "\035\n\017io.mavsdk.shellB\nShellProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_shell_2fshell_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_shell_2fshell_2eproto_sccs[4] = {
  &scc_info_SendRequest_shell_2fshell_2eproto.base,
  &scc_info_SendResponse_shell_2fshell_2eproto.base,
  &scc_info_ShellMessage_shell_2fshell_2eproto.base,
  &scc_info_ShellResult_shell_2fshell_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_shell_2fshell_2eproto_once;
static bool descriptor_table_shell_2fshell_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_shell_2fshell_2eproto = {
  &descriptor_table_shell_2fshell_2eproto_initialized, descriptor_table_protodef_shell_2fshell_2eproto, "shell/shell.proto", 598,
  &descriptor_table_shell_2fshell_2eproto_once, descriptor_table_shell_2fshell_2eproto_sccs, descriptor_table_shell_2fshell_2eproto_deps, 4, 0,
  schemas, file_default_instances, TableStruct_shell_2fshell_2eproto::offsets,
  file_level_metadata_shell_2fshell_2eproto, 4, file_level_enum_descriptors_shell_2fshell_2eproto, file_level_service_descriptors_shell_2fshell_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_shell_2fshell_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_shell_2fshell_2eproto), true);
namespace mavsdk {
namespace rpc {
namespace shell {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* ShellResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_shell_2fshell_2eproto);
  return file_level_enum_descriptors_shell_2fshell_2eproto[0];
}
bool ShellResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr ShellResult_Result ShellResult::UNKNOWN;
constexpr ShellResult_Result ShellResult::SUCCESS;
constexpr ShellResult_Result ShellResult::NO_SYSTEM;
constexpr ShellResult_Result ShellResult::CONNECTION_ERROR;
constexpr ShellResult_Result ShellResult::NO_RESPONSE;
constexpr ShellResult_Result ShellResult::BUSY;
constexpr ShellResult_Result ShellResult::Result_MIN;
constexpr ShellResult_Result ShellResult::Result_MAX;
constexpr int ShellResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void SendRequest::InitAsDefaultInstance() {
  ::mavsdk::rpc::shell::_SendRequest_default_instance_._instance.get_mutable()->shell_message_ = const_cast< ::mavsdk::rpc::shell::ShellMessage*>(
      ::mavsdk::rpc::shell::ShellMessage::internal_default_instance());
}
class SendRequest::_Internal {
 public:
  static const ::mavsdk::rpc::shell::ShellMessage& shell_message(const SendRequest* msg);
};

const ::mavsdk::rpc::shell::ShellMessage&
SendRequest::_Internal::shell_message(const SendRequest* msg) {
  return *msg->shell_message_;
}
SendRequest::SendRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.shell.SendRequest)
}
SendRequest::SendRequest(const SendRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_shell_message()) {
    shell_message_ = new ::mavsdk::rpc::shell::ShellMessage(*from.shell_message_);
  } else {
    shell_message_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.shell.SendRequest)
}

void SendRequest::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendRequest_shell_2fshell_2eproto.base);
  shell_message_ = nullptr;
}

SendRequest::~SendRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.shell.SendRequest)
  SharedDtor();
}

void SendRequest::SharedDtor() {
  if (this != internal_default_instance()) delete shell_message_;
}

void SendRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendRequest& SendRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendRequest_shell_2fshell_2eproto.base);
  return *internal_default_instance();
}


void SendRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.shell.SendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && shell_message_ != nullptr) {
    delete shell_message_;
  }
  shell_message_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.shell.ShellMessage shell_message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_shell_message(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.shell.SendRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.shell.ShellMessage shell_message = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shell_message()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.shell.SendRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.shell.SendRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.shell.SendRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.shell.ShellMessage shell_message = 1;
  if (this->has_shell_message()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::shell_message(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.shell.SendRequest)
  return target;
}

size_t SendRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.shell.SendRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.shell.ShellMessage shell_message = 1;
  if (this->has_shell_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shell_message_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.shell.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SendRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.shell.SendRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.shell.SendRequest)
    MergeFrom(*source);
  }
}

void SendRequest::MergeFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.shell.SendRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_shell_message()) {
    mutable_shell_message()->::mavsdk::rpc::shell::ShellMessage::MergeFrom(from.shell_message());
  }
}

void SendRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.shell.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendRequest::CopyFrom(const SendRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.shell.SendRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendRequest::IsInitialized() const {
  return true;
}

void SendRequest::InternalSwap(SendRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(shell_message_, other->shell_message_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SendResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::shell::_SendResponse_default_instance_._instance.get_mutable()->shell_result_ = const_cast< ::mavsdk::rpc::shell::ShellResult*>(
      ::mavsdk::rpc::shell::ShellResult::internal_default_instance());
}
class SendResponse::_Internal {
 public:
  static const ::mavsdk::rpc::shell::ShellResult& shell_result(const SendResponse* msg);
};

const ::mavsdk::rpc::shell::ShellResult&
SendResponse::_Internal::shell_result(const SendResponse* msg) {
  return *msg->shell_result_;
}
SendResponse::SendResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.shell.SendResponse)
}
SendResponse::SendResponse(const SendResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  response_message_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_response_message_data().empty()) {
    response_message_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_message_data_);
  }
  if (from.has_shell_result()) {
    shell_result_ = new ::mavsdk::rpc::shell::ShellResult(*from.shell_result_);
  } else {
    shell_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.shell.SendResponse)
}

void SendResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SendResponse_shell_2fshell_2eproto.base);
  response_message_data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  shell_result_ = nullptr;
}

SendResponse::~SendResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.shell.SendResponse)
  SharedDtor();
}

void SendResponse::SharedDtor() {
  response_message_data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete shell_result_;
}

void SendResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SendResponse& SendResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SendResponse_shell_2fshell_2eproto.base);
  return *internal_default_instance();
}


void SendResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.shell.SendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  response_message_data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == nullptr && shell_result_ != nullptr) {
    delete shell_result_;
  }
  shell_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SendResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.shell.ShellResult shell_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_shell_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string response_message_data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_response_message_data(), ptr, ctx, "mavsdk.rpc.shell.SendResponse.response_message_data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SendResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.shell.SendResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.shell.ShellResult shell_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_shell_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string response_message_data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_response_message_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_response_message_data().data(), static_cast<int>(this->_internal_response_message_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.shell.SendResponse.response_message_data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.shell.SendResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.shell.SendResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SendResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.shell.SendResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.shell.ShellResult shell_result = 1;
  if (this->has_shell_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::shell_result(this), target, stream);
  }

  // string response_message_data = 2;
  if (this->response_message_data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_response_message_data().data(), static_cast<int>(this->_internal_response_message_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.shell.SendResponse.response_message_data");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_response_message_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.shell.SendResponse)
  return target;
}

size_t SendResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.shell.SendResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string response_message_data = 2;
  if (this->response_message_data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_response_message_data());
  }

  // .mavsdk.rpc.shell.ShellResult shell_result = 1;
  if (this->has_shell_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *shell_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SendResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.shell.SendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const SendResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SendResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.shell.SendResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.shell.SendResponse)
    MergeFrom(*source);
  }
}

void SendResponse::MergeFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.shell.SendResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.response_message_data().size() > 0) {

    response_message_data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.response_message_data_);
  }
  if (from.has_shell_result()) {
    mutable_shell_result()->::mavsdk::rpc::shell::ShellResult::MergeFrom(from.shell_result());
  }
}

void SendResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.shell.SendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendResponse::CopyFrom(const SendResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.shell.SendResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendResponse::IsInitialized() const {
  return true;
}

void SendResponse::InternalSwap(SendResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  response_message_data_.Swap(&other->response_message_data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(shell_result_, other->shell_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SendResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellMessage::InitAsDefaultInstance() {
}
class ShellMessage::_Internal {
 public:
};

ShellMessage::ShellMessage()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.shell.ShellMessage)
}
ShellMessage::ShellMessage(const ShellMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&need_response_, &from.need_response_,
    static_cast<size_t>(reinterpret_cast<char*>(&timeout_ms_) -
    reinterpret_cast<char*>(&need_response_)) + sizeof(timeout_ms_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.shell.ShellMessage)
}

void ShellMessage::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellMessage_shell_2fshell_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&need_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&need_response_)) + sizeof(timeout_ms_));
}

ShellMessage::~ShellMessage() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.shell.ShellMessage)
  SharedDtor();
}

void ShellMessage::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellMessage& ShellMessage::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellMessage_shell_2fshell_2eproto.base);
  return *internal_default_instance();
}


void ShellMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.shell.ShellMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&need_response_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&timeout_ms_) -
      reinterpret_cast<char*>(&need_response_)) + sizeof(timeout_ms_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShellMessage::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool need_response = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          need_response_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 timeout_ms = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timeout_ms_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_data(), ptr, ctx, "mavsdk.rpc.shell.ShellMessage.data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShellMessage::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.shell.ShellMessage)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool need_response = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &need_response_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 timeout_ms = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &timeout_ms_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.shell.ShellMessage.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.shell.ShellMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.shell.ShellMessage)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ShellMessage::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.shell.ShellMessage)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool need_response = 1;
  if (this->need_response() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->need_response(), target);
  }

  // uint32 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->timeout_ms(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.shell.ShellMessage.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.shell.ShellMessage)
  return target;
}

size_t ShellMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.shell.ShellMessage)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // bool need_response = 1;
  if (this->need_response() != 0) {
    total_size += 1 + 1;
  }

  // uint32 timeout_ms = 2;
  if (this->timeout_ms() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->timeout_ms());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellMessage::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.shell.ShellMessage)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellMessage* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellMessage>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.shell.ShellMessage)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.shell.ShellMessage)
    MergeFrom(*source);
  }
}

void ShellMessage::MergeFrom(const ShellMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.shell.ShellMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.need_response() != 0) {
    set_need_response(from.need_response());
  }
  if (from.timeout_ms() != 0) {
    set_timeout_ms(from.timeout_ms());
  }
}

void ShellMessage::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.shell.ShellMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellMessage::CopyFrom(const ShellMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.shell.ShellMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellMessage::IsInitialized() const {
  return true;
}

void ShellMessage::InternalSwap(ShellMessage* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(need_response_, other->need_response_);
  swap(timeout_ms_, other->timeout_ms_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellMessage::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShellResult::InitAsDefaultInstance() {
}
class ShellResult::_Internal {
 public:
};

ShellResult::ShellResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.shell.ShellResult)
}
ShellResult::ShellResult(const ShellResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.shell.ShellResult)
}

void ShellResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShellResult_shell_2fshell_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

ShellResult::~ShellResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.shell.ShellResult)
  SharedDtor();
}

void ShellResult::SharedDtor() {
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShellResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShellResult& ShellResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShellResult_shell_2fshell_2eproto.base);
  return *internal_default_instance();
}


void ShellResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.shell.ShellResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* ShellResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.shell.ShellResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result(static_cast<::mavsdk::rpc::shell::ShellResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_result_str(), ptr, ctx, "mavsdk.rpc.shell.ShellResult.result_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool ShellResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.shell.ShellResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.shell.ShellResult.Result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::shell::ShellResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_result_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.shell.ShellResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.shell.ShellResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.shell.ShellResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* ShellResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.shell.ShellResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.shell.ShellResult.Result result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.shell.ShellResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.shell.ShellResult)
  return target;
}

size_t ShellResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.shell.ShellResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.shell.ShellResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShellResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.shell.ShellResult)
  GOOGLE_DCHECK_NE(&from, this);
  const ShellResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShellResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.shell.ShellResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.shell.ShellResult)
    MergeFrom(*source);
  }
}

void ShellResult::MergeFrom(const ShellResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.shell.ShellResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void ShellResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.shell.ShellResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShellResult::CopyFrom(const ShellResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.shell.ShellResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShellResult::IsInitialized() const {
  return true;
}

void ShellResult::InternalSwap(ShellResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ShellResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace shell
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::shell::SendRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::shell::SendRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::shell::SendRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::shell::SendResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::shell::SendResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::shell::SendResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::shell::ShellMessage* Arena::CreateMaybeMessage< ::mavsdk::rpc::shell::ShellMessage >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::shell::ShellMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::shell::ShellResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::shell::ShellResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::shell::ShellResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
