// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging/logging.proto

#include "logging/logging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingRaw_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingResult_logging_2flogging_2eproto;
namespace mavsdk {
namespace rpc {
namespace logging {
class StartLoggingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartLoggingRequest> _instance;
} _StartLoggingRequest_default_instance_;
class StartLoggingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartLoggingResponse> _instance;
} _StartLoggingResponse_default_instance_;
class StopLoggingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopLoggingRequest> _instance;
} _StopLoggingRequest_default_instance_;
class StopLoggingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopLoggingResponse> _instance;
} _StopLoggingResponse_default_instance_;
class SubscribeLoggingRawRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeLoggingRawRequest> _instance;
} _SubscribeLoggingRawRequest_default_instance_;
class LoggingRawResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingRawResponse> _instance;
} _LoggingRawResponse_default_instance_;
class LoggingRawDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingRaw> _instance;
} _LoggingRaw_default_instance_;
class LoggingResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingResult> _instance;
} _LoggingResult_default_instance_;
}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_LoggingRaw_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_LoggingRaw_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::LoggingRaw();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::LoggingRaw::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingRaw_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoggingRaw_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_LoggingRawResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_LoggingRawResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::LoggingRawResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::LoggingRawResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_LoggingRawResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_LoggingRawResponse_logging_2flogging_2eproto}, {
      &scc_info_LoggingRaw_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_LoggingResult_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_LoggingResult_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::LoggingResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::LoggingResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingResult_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoggingResult_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_StartLoggingRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StartLoggingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StartLoggingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StartLoggingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartLoggingRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartLoggingRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_StartLoggingResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StartLoggingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StartLoggingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StartLoggingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartLoggingResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartLoggingResponse_logging_2flogging_2eproto}, {
      &scc_info_LoggingResult_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_StopLoggingRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StopLoggingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StopLoggingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StopLoggingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopLoggingRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopLoggingRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_StopLoggingResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StopLoggingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StopLoggingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StopLoggingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopLoggingResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StopLoggingResponse_logging_2flogging_2eproto}, {
      &scc_info_LoggingResult_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeLoggingRawRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeLoggingRawRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeLoggingRawRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeLoggingRawRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeLoggingRawRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeLoggingRawRequest_logging_2flogging_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logging_2flogging_2eproto[8];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_logging_2flogging_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logging_2flogging_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logging_2flogging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StartLoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StartLoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StartLoggingResponse, logging_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StopLoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StopLoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StopLoggingResponse, logging_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeLoggingRawRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingRawResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingRawResponse, logging_raw_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingRaw, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingRaw, first_message_offset_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingRaw, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::logging::StartLoggingRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::logging::StartLoggingResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::logging::StopLoggingRequest)},
  { 16, -1, sizeof(::mavsdk::rpc::logging::StopLoggingResponse)},
  { 22, -1, sizeof(::mavsdk::rpc::logging::SubscribeLoggingRawRequest)},
  { 27, -1, sizeof(::mavsdk::rpc::logging::LoggingRawResponse)},
  { 33, -1, sizeof(::mavsdk::rpc::logging::LoggingRaw)},
  { 40, -1, sizeof(::mavsdk::rpc::logging::LoggingResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StartLoggingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StartLoggingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StopLoggingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StopLoggingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeLoggingRawRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_LoggingRawResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_LoggingRaw_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_LoggingResult_default_instance_),
};

const char descriptor_table_protodef_logging_2flogging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025logging/logging.proto\022\022mavsdk.rpc.logg"
  "ing\"\025\n\023StartLoggingRequest\"Q\n\024StartLoggi"
  "ngResponse\0229\n\016logging_result\030\001 \001(\0132!.mav"
  "sdk.rpc.logging.LoggingResult\"\024\n\022StopLog"
  "gingRequest\"P\n\023StopLoggingResponse\0229\n\016lo"
  "gging_result\030\001 \001(\0132!.mavsdk.rpc.logging."
  "LoggingResult\"\034\n\032SubscribeLoggingRawRequ"
  "est\"I\n\022LoggingRawResponse\0223\n\013logging_raw"
  "\030\001 \001(\0132\036.mavsdk.rpc.logging.LoggingRaw\"8"
  "\n\nLoggingRaw\022\034\n\024first_message_offset\030\001 \001"
  "(\r\022\014\n\004data\030\002 \001(\014\"\321\001\n\rLoggingResult\0228\n\006re"
  "sult\030\001 \001(\0162(.mavsdk.rpc.logging.LoggingR"
  "esult.Result\022\022\n\nresult_str\030\002 \001(\t\"r\n\006Resu"
  "lt\022\013\n\007SUCCESS\020\000\022\r\n\tNO_SYSTEM\020\001\022\024\n\020CONNEC"
  "TION_ERROR\020\002\022\010\n\004BUSY\020\003\022\022\n\016COMMAND_DENIED"
  "\020\004\022\013\n\007TIMEOUT\020\005\022\013\n\007UNKNOWN\020\0062\312\002\n\016Logging"
  "Service\022c\n\014StartLogging\022\'.mavsdk.rpc.log"
  "ging.StartLoggingRequest\032(.mavsdk.rpc.lo"
  "gging.StartLoggingResponse\"\000\022`\n\013StopLogg"
  "ing\022&.mavsdk.rpc.logging.StopLoggingRequ"
  "est\032\'.mavsdk.rpc.logging.StopLoggingResp"
  "onse\"\000\022q\n\023SubscribeLoggingRaw\022..mavsdk.r"
  "pc.logging.SubscribeLoggingRawRequest\032&."
  "mavsdk.rpc.logging.LoggingRawResponse\"\0000"
  "\001B!\n\021io.mavsdk.loggingB\014LoggingProtob\006pr"
  "oto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logging_2flogging_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_logging_2flogging_2eproto_sccs[8] = {
  &scc_info_LoggingRaw_logging_2flogging_2eproto.base,
  &scc_info_LoggingRawResponse_logging_2flogging_2eproto.base,
  &scc_info_LoggingResult_logging_2flogging_2eproto.base,
  &scc_info_StartLoggingRequest_logging_2flogging_2eproto.base,
  &scc_info_StartLoggingResponse_logging_2flogging_2eproto.base,
  &scc_info_StopLoggingRequest_logging_2flogging_2eproto.base,
  &scc_info_StopLoggingResponse_logging_2flogging_2eproto.base,
  &scc_info_SubscribeLoggingRawRequest_logging_2flogging_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logging_2flogging_2eproto_once;
static bool descriptor_table_logging_2flogging_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logging_2flogging_2eproto = {
  &descriptor_table_logging_2flogging_2eproto_initialized, descriptor_table_protodef_logging_2flogging_2eproto, "logging/logging.proto", 1004,
  &descriptor_table_logging_2flogging_2eproto_once, descriptor_table_logging_2flogging_2eproto_sccs, descriptor_table_logging_2flogging_2eproto_deps, 8, 0,
  schemas, file_default_instances, TableStruct_logging_2flogging_2eproto::offsets,
  file_level_metadata_logging_2flogging_2eproto, 8, file_level_enum_descriptors_logging_2flogging_2eproto, file_level_service_descriptors_logging_2flogging_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_logging_2flogging_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_logging_2flogging_2eproto), true);
namespace mavsdk {
namespace rpc {
namespace logging {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoggingResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_logging_2flogging_2eproto);
  return file_level_enum_descriptors_logging_2flogging_2eproto[0];
}
bool LoggingResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoggingResult_Result LoggingResult::SUCCESS;
constexpr LoggingResult_Result LoggingResult::NO_SYSTEM;
constexpr LoggingResult_Result LoggingResult::CONNECTION_ERROR;
constexpr LoggingResult_Result LoggingResult::BUSY;
constexpr LoggingResult_Result LoggingResult::COMMAND_DENIED;
constexpr LoggingResult_Result LoggingResult::TIMEOUT;
constexpr LoggingResult_Result LoggingResult::UNKNOWN;
constexpr LoggingResult_Result LoggingResult::Result_MIN;
constexpr LoggingResult_Result LoggingResult::Result_MAX;
constexpr int LoggingResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StartLoggingRequest::InitAsDefaultInstance() {
}
class StartLoggingRequest::_Internal {
 public:
};

StartLoggingRequest::StartLoggingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StartLoggingRequest)
}
StartLoggingRequest::StartLoggingRequest(const StartLoggingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StartLoggingRequest)
}

void StartLoggingRequest::SharedCtor() {
}

StartLoggingRequest::~StartLoggingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StartLoggingRequest)
  SharedDtor();
}

void StartLoggingRequest::SharedDtor() {
}

void StartLoggingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartLoggingRequest& StartLoggingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartLoggingRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StartLoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StartLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartLoggingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartLoggingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StartLoggingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StartLoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StartLoggingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StartLoggingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StartLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StartLoggingRequest)
  return target;
}

size_t StartLoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StartLoggingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLoggingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartLoggingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartLoggingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StartLoggingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StartLoggingRequest)
    MergeFrom(*source);
  }
}

void StartLoggingRequest::MergeFrom(const StartLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartLoggingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartLoggingRequest::CopyFrom(const StartLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLoggingRequest::IsInitialized() const {
  return true;
}

void StartLoggingRequest::InternalSwap(StartLoggingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartLoggingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartLoggingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_StartLoggingResponse_default_instance_._instance.get_mutable()->logging_result_ = const_cast< ::mavsdk::rpc::logging::LoggingResult*>(
      ::mavsdk::rpc::logging::LoggingResult::internal_default_instance());
}
class StartLoggingResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::LoggingResult& logging_result(const StartLoggingResponse* msg);
};

const ::mavsdk::rpc::logging::LoggingResult&
StartLoggingResponse::_Internal::logging_result(const StartLoggingResponse* msg) {
  return *msg->logging_result_;
}
StartLoggingResponse::StartLoggingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StartLoggingResponse)
}
StartLoggingResponse::StartLoggingResponse(const StartLoggingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logging_result()) {
    logging_result_ = new ::mavsdk::rpc::logging::LoggingResult(*from.logging_result_);
  } else {
    logging_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StartLoggingResponse)
}

void StartLoggingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartLoggingResponse_logging_2flogging_2eproto.base);
  logging_result_ = nullptr;
}

StartLoggingResponse::~StartLoggingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StartLoggingResponse)
  SharedDtor();
}

void StartLoggingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete logging_result_;
}

void StartLoggingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartLoggingResponse& StartLoggingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartLoggingResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StartLoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StartLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logging_result_ != nullptr) {
    delete logging_result_;
  }
  logging_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartLoggingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_logging_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartLoggingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StartLoggingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logging_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StartLoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StartLoggingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StartLoggingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StartLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::logging_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StartLoggingResponse)
  return target;
}

size_t StartLoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StartLoggingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLoggingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartLoggingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartLoggingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StartLoggingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StartLoggingResponse)
    MergeFrom(*source);
  }
}

void StartLoggingResponse::MergeFrom(const StartLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logging_result()) {
    mutable_logging_result()->::mavsdk::rpc::logging::LoggingResult::MergeFrom(from.logging_result());
  }
}

void StartLoggingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartLoggingResponse::CopyFrom(const StartLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLoggingResponse::IsInitialized() const {
  return true;
}

void StartLoggingResponse::InternalSwap(StartLoggingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logging_result_, other->logging_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartLoggingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopLoggingRequest::InitAsDefaultInstance() {
}
class StopLoggingRequest::_Internal {
 public:
};

StopLoggingRequest::StopLoggingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StopLoggingRequest)
}
StopLoggingRequest::StopLoggingRequest(const StopLoggingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StopLoggingRequest)
}

void StopLoggingRequest::SharedCtor() {
}

StopLoggingRequest::~StopLoggingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StopLoggingRequest)
  SharedDtor();
}

void StopLoggingRequest::SharedDtor() {
}

void StopLoggingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLoggingRequest& StopLoggingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopLoggingRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StopLoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StopLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopLoggingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopLoggingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StopLoggingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StopLoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StopLoggingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StopLoggingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StopLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StopLoggingRequest)
  return target;
}

size_t StopLoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StopLoggingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLoggingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLoggingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopLoggingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StopLoggingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StopLoggingRequest)
    MergeFrom(*source);
  }
}

void StopLoggingRequest::MergeFrom(const StopLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopLoggingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLoggingRequest::CopyFrom(const StopLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLoggingRequest::IsInitialized() const {
  return true;
}

void StopLoggingRequest::InternalSwap(StopLoggingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopLoggingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopLoggingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_StopLoggingResponse_default_instance_._instance.get_mutable()->logging_result_ = const_cast< ::mavsdk::rpc::logging::LoggingResult*>(
      ::mavsdk::rpc::logging::LoggingResult::internal_default_instance());
}
class StopLoggingResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::LoggingResult& logging_result(const StopLoggingResponse* msg);
};

const ::mavsdk::rpc::logging::LoggingResult&
StopLoggingResponse::_Internal::logging_result(const StopLoggingResponse* msg) {
  return *msg->logging_result_;
}
StopLoggingResponse::StopLoggingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StopLoggingResponse)
}
StopLoggingResponse::StopLoggingResponse(const StopLoggingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logging_result()) {
    logging_result_ = new ::mavsdk::rpc::logging::LoggingResult(*from.logging_result_);
  } else {
    logging_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StopLoggingResponse)
}

void StopLoggingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopLoggingResponse_logging_2flogging_2eproto.base);
  logging_result_ = nullptr;
}

StopLoggingResponse::~StopLoggingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StopLoggingResponse)
  SharedDtor();
}

void StopLoggingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete logging_result_;
}

void StopLoggingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLoggingResponse& StopLoggingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopLoggingResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StopLoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StopLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logging_result_ != nullptr) {
    delete logging_result_;
  }
  logging_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopLoggingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_logging_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopLoggingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StopLoggingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logging_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StopLoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StopLoggingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StopLoggingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StopLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::logging_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StopLoggingResponse)
  return target;
}

size_t StopLoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StopLoggingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLoggingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLoggingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopLoggingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StopLoggingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StopLoggingResponse)
    MergeFrom(*source);
  }
}

void StopLoggingResponse::MergeFrom(const StopLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logging_result()) {
    mutable_logging_result()->::mavsdk::rpc::logging::LoggingResult::MergeFrom(from.logging_result());
  }
}

void StopLoggingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLoggingResponse::CopyFrom(const StopLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLoggingResponse::IsInitialized() const {
  return true;
}

void StopLoggingResponse::InternalSwap(StopLoggingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logging_result_, other->logging_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopLoggingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeLoggingRawRequest::InitAsDefaultInstance() {
}
class SubscribeLoggingRawRequest::_Internal {
 public:
};

SubscribeLoggingRawRequest::SubscribeLoggingRawRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
}
SubscribeLoggingRawRequest::SubscribeLoggingRawRequest(const SubscribeLoggingRawRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
}

void SubscribeLoggingRawRequest::SharedCtor() {
}

SubscribeLoggingRawRequest::~SubscribeLoggingRawRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  SharedDtor();
}

void SubscribeLoggingRawRequest::SharedDtor() {
}

void SubscribeLoggingRawRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeLoggingRawRequest& SubscribeLoggingRawRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeLoggingRawRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeLoggingRawRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeLoggingRawRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeLoggingRawRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeLoggingRawRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  return target;
}

size_t SubscribeLoggingRawRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeLoggingRawRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeLoggingRawRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeLoggingRawRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
    MergeFrom(*source);
  }
}

void SubscribeLoggingRawRequest::MergeFrom(const SubscribeLoggingRawRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeLoggingRawRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeLoggingRawRequest::CopyFrom(const SubscribeLoggingRawRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeLoggingRawRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeLoggingRawRequest::IsInitialized() const {
  return true;
}

void SubscribeLoggingRawRequest::InternalSwap(SubscribeLoggingRawRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeLoggingRawRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggingRawResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_LoggingRawResponse_default_instance_._instance.get_mutable()->logging_raw_ = const_cast< ::mavsdk::rpc::logging::LoggingRaw*>(
      ::mavsdk::rpc::logging::LoggingRaw::internal_default_instance());
}
class LoggingRawResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::LoggingRaw& logging_raw(const LoggingRawResponse* msg);
};

const ::mavsdk::rpc::logging::LoggingRaw&
LoggingRawResponse::_Internal::logging_raw(const LoggingRawResponse* msg) {
  return *msg->logging_raw_;
}
LoggingRawResponse::LoggingRawResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.LoggingRawResponse)
}
LoggingRawResponse::LoggingRawResponse(const LoggingRawResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logging_raw()) {
    logging_raw_ = new ::mavsdk::rpc::logging::LoggingRaw(*from.logging_raw_);
  } else {
    logging_raw_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.LoggingRawResponse)
}

void LoggingRawResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoggingRawResponse_logging_2flogging_2eproto.base);
  logging_raw_ = nullptr;
}

LoggingRawResponse::~LoggingRawResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.LoggingRawResponse)
  SharedDtor();
}

void LoggingRawResponse::SharedDtor() {
  if (this != internal_default_instance()) delete logging_raw_;
}

void LoggingRawResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingRawResponse& LoggingRawResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggingRawResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void LoggingRawResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.LoggingRawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logging_raw_ != nullptr) {
    delete logging_raw_;
  }
  logging_raw_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoggingRawResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingRaw logging_raw = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_logging_raw(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoggingRawResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.LoggingRawResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingRaw logging_raw = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logging_raw()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.LoggingRawResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.LoggingRawResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* LoggingRawResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.LoggingRawResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingRaw logging_raw = 1;
  if (this->has_logging_raw()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::logging_raw(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.LoggingRawResponse)
  return target;
}

size_t LoggingRawResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.LoggingRawResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingRaw logging_raw = 1;
  if (this->has_logging_raw()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_raw_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingRawResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.LoggingRawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingRawResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingRawResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.LoggingRawResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.LoggingRawResponse)
    MergeFrom(*source);
  }
}

void LoggingRawResponse::MergeFrom(const LoggingRawResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.LoggingRawResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logging_raw()) {
    mutable_logging_raw()->::mavsdk::rpc::logging::LoggingRaw::MergeFrom(from.logging_raw());
  }
}

void LoggingRawResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.LoggingRawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingRawResponse::CopyFrom(const LoggingRawResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.LoggingRawResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingRawResponse::IsInitialized() const {
  return true;
}

void LoggingRawResponse::InternalSwap(LoggingRawResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logging_raw_, other->logging_raw_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingRawResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggingRaw::InitAsDefaultInstance() {
}
class LoggingRaw::_Internal {
 public:
};

LoggingRaw::LoggingRaw()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.LoggingRaw)
}
LoggingRaw::LoggingRaw(const LoggingRaw& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  first_message_offset_ = from.first_message_offset_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.LoggingRaw)
}

void LoggingRaw::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoggingRaw_logging_2flogging_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_message_offset_ = 0u;
}

LoggingRaw::~LoggingRaw() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.LoggingRaw)
  SharedDtor();
}

void LoggingRaw::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoggingRaw::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingRaw& LoggingRaw::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggingRaw_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void LoggingRaw::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.LoggingRaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  first_message_offset_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoggingRaw::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 first_message_offset = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          first_message_offset_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoggingRaw::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.LoggingRaw)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 first_message_offset = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &first_message_offset_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->_internal_mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.LoggingRaw)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.LoggingRaw)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* LoggingRaw::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.LoggingRaw)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 first_message_offset = 1;
  if (this->first_message_offset() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->first_message_offset(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.LoggingRaw)
  return target;
}

size_t LoggingRaw::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.LoggingRaw)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 first_message_offset = 1;
  if (this->first_message_offset() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->first_message_offset());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingRaw::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.LoggingRaw)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingRaw* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingRaw>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.LoggingRaw)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.LoggingRaw)
    MergeFrom(*source);
  }
}

void LoggingRaw::MergeFrom(const LoggingRaw& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.LoggingRaw)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.first_message_offset() != 0) {
    set_first_message_offset(from.first_message_offset());
  }
}

void LoggingRaw::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.LoggingRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingRaw::CopyFrom(const LoggingRaw& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.LoggingRaw)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingRaw::IsInitialized() const {
  return true;
}

void LoggingRaw::InternalSwap(LoggingRaw* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(first_message_offset_, other->first_message_offset_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingRaw::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggingResult::InitAsDefaultInstance() {
}
class LoggingResult::_Internal {
 public:
};

LoggingResult::LoggingResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.LoggingResult)
}
LoggingResult::LoggingResult(const LoggingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.LoggingResult)
}

void LoggingResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoggingResult_logging_2flogging_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

LoggingResult::~LoggingResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.LoggingResult)
  SharedDtor();
}

void LoggingResult::SharedDtor() {
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoggingResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingResult& LoggingResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggingResult_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void LoggingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.LoggingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoggingResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result(static_cast<::mavsdk::rpc::logging::LoggingResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_result_str(), ptr, ctx, "mavsdk.rpc.logging.LoggingResult.result_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoggingResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.LoggingResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::logging::LoggingResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_result_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.LoggingResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.LoggingResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.LoggingResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* LoggingResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.LoggingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.LoggingResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.LoggingResult)
  return target;
}

size_t LoggingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.LoggingResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.LoggingResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.LoggingResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.LoggingResult)
    MergeFrom(*source);
  }
}

void LoggingResult::MergeFrom(const LoggingResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.LoggingResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void LoggingResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.LoggingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingResult::CopyFrom(const LoggingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.LoggingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingResult::IsInitialized() const {
  return true;
}

void LoggingResult::InternalSwap(LoggingResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StartLoggingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StartLoggingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StartLoggingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StartLoggingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StartLoggingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StartLoggingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StopLoggingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StopLoggingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StopLoggingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StopLoggingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StopLoggingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StopLoggingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeLoggingRawRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeLoggingRawRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::LoggingRawResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::LoggingRawResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::LoggingRawResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::LoggingRaw* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::LoggingRaw >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::LoggingRaw >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::LoggingResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::LoggingResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::LoggingResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
