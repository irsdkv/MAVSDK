// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging/logging.proto

#include "logging/logging.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingResult_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageAddLogged_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageData_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageDropout_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageFlagBits_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageFormat_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageInfo_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageInfoMultiple_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageLogging_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageParameter_logging_2flogging_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageRemoveLogged_logging_2flogging_2eproto;
namespace mavsdk {
namespace rpc {
namespace logging {
class StartLoggingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartLoggingRequest> _instance;
} _StartLoggingRequest_default_instance_;
class StartLoggingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StartLoggingResponse> _instance;
} _StartLoggingResponse_default_instance_;
class StopLoggingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopLoggingRequest> _instance;
} _StopLoggingRequest_default_instance_;
class StopLoggingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<StopLoggingResponse> _instance;
} _StopLoggingResponse_default_instance_;
class SubscribeMessageFlagBitsRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageFlagBitsRequest> _instance;
} _SubscribeMessageFlagBitsRequest_default_instance_;
class MessageFlagBitsResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageFlagBitsResponse> _instance;
} _MessageFlagBitsResponse_default_instance_;
class MessageFlagBitsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageFlagBits> _instance;
} _MessageFlagBits_default_instance_;
class SubscribeMessageFormatRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageFormatRequest> _instance;
} _SubscribeMessageFormatRequest_default_instance_;
class MessageFormatResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageFormatResponse> _instance;
} _MessageFormatResponse_default_instance_;
class MessageFormatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageFormat> _instance;
} _MessageFormat_default_instance_;
class SubscribeMessageInfoRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageInfoRequest> _instance;
} _SubscribeMessageInfoRequest_default_instance_;
class MessageInfoResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageInfoResponse> _instance;
} _MessageInfoResponse_default_instance_;
class MessageInfoDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageInfo> _instance;
} _MessageInfo_default_instance_;
class SubscribeMessageInfoMultipleRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageInfoMultipleRequest> _instance;
} _SubscribeMessageInfoMultipleRequest_default_instance_;
class MessageInfoMultipleResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageInfoMultipleResponse> _instance;
} _MessageInfoMultipleResponse_default_instance_;
class MessageInfoMultipleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageInfoMultiple> _instance;
} _MessageInfoMultiple_default_instance_;
class SubscribeMessageParameterRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageParameterRequest> _instance;
} _SubscribeMessageParameterRequest_default_instance_;
class MessageParameterResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageParameterResponse> _instance;
} _MessageParameterResponse_default_instance_;
class MessageParameterDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageParameter> _instance;
} _MessageParameter_default_instance_;
class SubscribeMessageAddLoggedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageAddLoggedRequest> _instance;
} _SubscribeMessageAddLoggedRequest_default_instance_;
class MessageAddLoggedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAddLoggedResponse> _instance;
} _MessageAddLoggedResponse_default_instance_;
class MessageAddLoggedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageAddLogged> _instance;
} _MessageAddLogged_default_instance_;
class SubscribeMessageRemoveLoggedRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageRemoveLoggedRequest> _instance;
} _SubscribeMessageRemoveLoggedRequest_default_instance_;
class MessageRemoveLoggedResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageRemoveLoggedResponse> _instance;
} _MessageRemoveLoggedResponse_default_instance_;
class MessageRemoveLoggedDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageRemoveLogged> _instance;
} _MessageRemoveLogged_default_instance_;
class SubscribeMessageDataRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageDataRequest> _instance;
} _SubscribeMessageDataRequest_default_instance_;
class MessageDataResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageDataResponse> _instance;
} _MessageDataResponse_default_instance_;
class MessageDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageData> _instance;
} _MessageData_default_instance_;
class SubscribeMessageLoggingRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageLoggingRequest> _instance;
} _SubscribeMessageLoggingRequest_default_instance_;
class MessageLoggingResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageLoggingResponse> _instance;
} _MessageLoggingResponse_default_instance_;
class MessageLoggingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageLogging> _instance;
} _MessageLogging_default_instance_;
class SubscribeMessageDropoutRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SubscribeMessageDropoutRequest> _instance;
} _SubscribeMessageDropoutRequest_default_instance_;
class MessageDropoutResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageDropoutResponse> _instance;
} _MessageDropoutResponse_default_instance_;
class MessageDropoutDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MessageDropout> _instance;
} _MessageDropout_default_instance_;
class LoggingResultDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<LoggingResult> _instance;
} _LoggingResult_default_instance_;
}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk
static void InitDefaultsscc_info_LoggingResult_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_LoggingResult_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::LoggingResult();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::LoggingResult::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_LoggingResult_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_LoggingResult_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageAddLogged_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageAddLogged_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageAddLogged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageAddLogged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageAddLogged_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageAddLogged_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageAddLoggedResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageAddLoggedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageAddLoggedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageAddLoggedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageAddLoggedResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageAddLoggedResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageAddLogged_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageData_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageData_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageData_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageData_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageDataResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageDataResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageDataResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageDataResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageDataResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageDataResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageData_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageDropout_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageDropout_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageDropout();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageDropout::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageDropout_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageDropout_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageDropoutResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageDropoutResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageDropoutResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageDropoutResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageDropoutResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageDropoutResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageDropout_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageFlagBits_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageFlagBits_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageFlagBits();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageFlagBits::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageFlagBits_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageFlagBits_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageFlagBitsResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageFlagBitsResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageFlagBitsResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageFlagBitsResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageFlagBitsResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageFlagBitsResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageFlagBits_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageFormat_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageFormat_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageFormat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageFormat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageFormat_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageFormat_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageFormatResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageFormatResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageFormatResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageFormatResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageFormatResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageFormatResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageFormat_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageInfo_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageInfo_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageInfo();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageInfo::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageInfo_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageInfo_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageInfoMultiple_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageInfoMultiple_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageInfoMultiple();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageInfoMultiple::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageInfoMultiple_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageInfoMultiple_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageInfoMultipleResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageInfoMultipleResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageInfoMultipleResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageInfoMultipleResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageInfoMultipleResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageInfoMultipleResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageInfoMultiple_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageInfoResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageInfoResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageInfoResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageInfoResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageInfoResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageInfoResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageInfo_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageLogging_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageLogging_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageLogging();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageLogging::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageLogging_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageLogging_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageLoggingResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageLoggingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageLoggingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageLoggingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageLoggingResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageLoggingResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageLogging_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageParameter_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageParameter_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageParameter();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageParameter::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageParameter_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageParameter_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageParameterResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageParameterResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageParameterResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageParameterResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageParameterResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageParameterResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageParameter_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_MessageRemoveLogged_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageRemoveLogged_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageRemoveLogged();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageRemoveLogged::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_MessageRemoveLogged_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_MessageRemoveLogged_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_MessageRemoveLoggedResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_MessageRemoveLoggedResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::MessageRemoveLoggedResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::MessageRemoveLoggedResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MessageRemoveLoggedResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MessageRemoveLoggedResponse_logging_2flogging_2eproto}, {
      &scc_info_MessageRemoveLogged_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_StartLoggingRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StartLoggingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StartLoggingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StartLoggingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StartLoggingRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StartLoggingRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_StartLoggingResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StartLoggingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StartLoggingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StartLoggingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StartLoggingResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StartLoggingResponse_logging_2flogging_2eproto}, {
      &scc_info_LoggingResult_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_StopLoggingRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StopLoggingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StopLoggingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StopLoggingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_StopLoggingRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_StopLoggingRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_StopLoggingResponse_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_StopLoggingResponse_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::StopLoggingResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::StopLoggingResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_StopLoggingResponse_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_StopLoggingResponse_logging_2flogging_2eproto}, {
      &scc_info_LoggingResult_logging_2flogging_2eproto.base,}};

static void InitDefaultsscc_info_SubscribeMessageAddLoggedRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageAddLoggedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageAddLoggedRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageAddLoggedRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageDataRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageDataRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageDataRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageDataRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageDataRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageDataRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageDropoutRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageDropoutRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageDropoutRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageDropoutRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageFlagBitsRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageFlagBitsRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageFlagBitsRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageFlagBitsRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageFormatRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageFormatRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageFormatRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageFormatRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageFormatRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageFormatRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageInfoMultipleRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageInfoMultipleRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageInfoMultipleRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageInfoMultipleRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageInfoRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageInfoRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageInfoRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageInfoRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageInfoRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageInfoRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageLoggingRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageLoggingRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageLoggingRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageLoggingRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageParameterRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageParameterRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageParameterRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageParameterRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageParameterRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageParameterRequest_logging_2flogging_2eproto}, {}};

static void InitDefaultsscc_info_SubscribeMessageRemoveLoggedRequest_logging_2flogging_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::mavsdk::rpc::logging::_SubscribeMessageRemoveLoggedRequest_default_instance_;
    new (ptr) ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SubscribeMessageRemoveLoggedRequest_logging_2flogging_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SubscribeMessageRemoveLoggedRequest_logging_2flogging_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_logging_2flogging_2eproto[35];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_logging_2flogging_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_logging_2flogging_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_logging_2flogging_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StartLoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StartLoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StartLoggingResponse, logging_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StopLoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StopLoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::StopLoggingResponse, logging_result_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFlagBitsResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFlagBitsResponse, message_flag_bits_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFlagBits, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFlagBits, compat_flags_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFlagBits, incompat_flags_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFlagBits, appended_offsets_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageFormatRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFormatResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFormatResponse, message_format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFormat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageFormat, format_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageInfoRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoResponse, message_info_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfo, key_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfo, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoMultipleResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoMultipleResponse, message_info_multiple_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoMultiple, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoMultiple, is_continued_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoMultiple, key_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageInfoMultiple, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageParameterRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageParameterResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageParameterResponse, message_parameter_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageParameter, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageParameter, key_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageParameter, value_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageAddLoggedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageAddLoggedResponse, message_add_logged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageAddLogged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageAddLogged, multi_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageAddLogged, msg_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageAddLogged, message_name_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageRemoveLoggedResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageRemoveLoggedResponse, message_remove_logged_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageRemoveLogged, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageRemoveLogged, msg_id_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageDataRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageDataResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageDataResponse, message_data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageData, msg_id_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageData, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageLoggingRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageLoggingResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageLoggingResponse, message_logging_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageLogging, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageLogging, log_level_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageLogging, timestamp_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageLogging, data_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::SubscribeMessageDropoutRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageDropoutResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageDropoutResponse, message_dropout_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageDropout, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::MessageDropout, duration_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingResult, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingResult, result_),
  PROTOBUF_FIELD_OFFSET(::mavsdk::rpc::logging::LoggingResult, result_str_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::mavsdk::rpc::logging::StartLoggingRequest)},
  { 5, -1, sizeof(::mavsdk::rpc::logging::StartLoggingResponse)},
  { 11, -1, sizeof(::mavsdk::rpc::logging::StopLoggingRequest)},
  { 16, -1, sizeof(::mavsdk::rpc::logging::StopLoggingResponse)},
  { 22, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest)},
  { 27, -1, sizeof(::mavsdk::rpc::logging::MessageFlagBitsResponse)},
  { 33, -1, sizeof(::mavsdk::rpc::logging::MessageFlagBits)},
  { 41, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageFormatRequest)},
  { 46, -1, sizeof(::mavsdk::rpc::logging::MessageFormatResponse)},
  { 52, -1, sizeof(::mavsdk::rpc::logging::MessageFormat)},
  { 58, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageInfoRequest)},
  { 63, -1, sizeof(::mavsdk::rpc::logging::MessageInfoResponse)},
  { 69, -1, sizeof(::mavsdk::rpc::logging::MessageInfo)},
  { 76, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest)},
  { 81, -1, sizeof(::mavsdk::rpc::logging::MessageInfoMultipleResponse)},
  { 87, -1, sizeof(::mavsdk::rpc::logging::MessageInfoMultiple)},
  { 95, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageParameterRequest)},
  { 100, -1, sizeof(::mavsdk::rpc::logging::MessageParameterResponse)},
  { 106, -1, sizeof(::mavsdk::rpc::logging::MessageParameter)},
  { 113, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest)},
  { 118, -1, sizeof(::mavsdk::rpc::logging::MessageAddLoggedResponse)},
  { 124, -1, sizeof(::mavsdk::rpc::logging::MessageAddLogged)},
  { 132, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest)},
  { 137, -1, sizeof(::mavsdk::rpc::logging::MessageRemoveLoggedResponse)},
  { 143, -1, sizeof(::mavsdk::rpc::logging::MessageRemoveLogged)},
  { 149, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageDataRequest)},
  { 154, -1, sizeof(::mavsdk::rpc::logging::MessageDataResponse)},
  { 160, -1, sizeof(::mavsdk::rpc::logging::MessageData)},
  { 167, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageLoggingRequest)},
  { 172, -1, sizeof(::mavsdk::rpc::logging::MessageLoggingResponse)},
  { 178, -1, sizeof(::mavsdk::rpc::logging::MessageLogging)},
  { 186, -1, sizeof(::mavsdk::rpc::logging::SubscribeMessageDropoutRequest)},
  { 191, -1, sizeof(::mavsdk::rpc::logging::MessageDropoutResponse)},
  { 197, -1, sizeof(::mavsdk::rpc::logging::MessageDropout)},
  { 203, -1, sizeof(::mavsdk::rpc::logging::LoggingResult)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StartLoggingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StartLoggingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StopLoggingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_StopLoggingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageFlagBitsRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageFlagBitsResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageFlagBits_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageFormatRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageFormatResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageFormat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageInfoRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageInfoResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageInfo_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageInfoMultipleRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageInfoMultipleResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageInfoMultiple_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageParameterRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageParameterResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageParameter_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageAddLoggedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageAddLoggedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageAddLogged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageRemoveLoggedRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageRemoveLoggedResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageRemoveLogged_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageDataRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageDataResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageLoggingRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageLoggingResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageLogging_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_SubscribeMessageDropoutRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageDropoutResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_MessageDropout_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::mavsdk::rpc::logging::_LoggingResult_default_instance_),
};

const char descriptor_table_protodef_logging_2flogging_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025logging/logging.proto\022\022mavsdk.rpc.logg"
  "ing\"\025\n\023StartLoggingRequest\"Q\n\024StartLoggi"
  "ngResponse\0229\n\016logging_result\030\001 \001(\0132!.mav"
  "sdk.rpc.logging.LoggingResult\"\024\n\022StopLog"
  "gingRequest\"P\n\023StopLoggingResponse\0229\n\016lo"
  "gging_result\030\001 \001(\0132!.mavsdk.rpc.logging."
  "LoggingResult\"!\n\037SubscribeMessageFlagBit"
  "sRequest\"Y\n\027MessageFlagBitsResponse\022>\n\021m"
  "essage_flag_bits\030\001 \001(\0132#.mavsdk.rpc.logg"
  "ing.MessageFlagBits\"Y\n\017MessageFlagBits\022\024"
  "\n\014compat_flags\030\001 \003(\r\022\026\n\016incompat_flags\030\002"
  " \003(\r\022\030\n\020appended_offsets\030\003 \003(\004\"\037\n\035Subscr"
  "ibeMessageFormatRequest\"R\n\025MessageFormat"
  "Response\0229\n\016message_format\030\001 \001(\0132!.mavsd"
  "k.rpc.logging.MessageFormat\"\037\n\rMessageFo"
  "rmat\022\016\n\006format\030\001 \001(\t\"\035\n\033SubscribeMessage"
  "InfoRequest\"L\n\023MessageInfoResponse\0225\n\014me"
  "ssage_info\030\001 \001(\0132\037.mavsdk.rpc.logging.Me"
  "ssageInfo\")\n\013MessageInfo\022\013\n\003key\030\001 \001(\t\022\r\n"
  "\005value\030\002 \001(\t\"%\n#SubscribeMessageInfoMult"
  "ipleRequest\"e\n\033MessageInfoMultipleRespon"
  "se\022F\n\025message_info_multiple\030\001 \001(\0132\'.mavs"
  "dk.rpc.logging.MessageInfoMultiple\"G\n\023Me"
  "ssageInfoMultiple\022\024\n\014is_continued\030\001 \001(\010\022"
  "\013\n\003key\030\002 \001(\t\022\r\n\005value\030\003 \001(\t\"\"\n Subscribe"
  "MessageParameterRequest\"[\n\030MessageParame"
  "terResponse\022\?\n\021message_parameter\030\001 \001(\0132$"
  ".mavsdk.rpc.logging.MessageParameter\".\n\020"
  "MessageParameter\022\013\n\003key\030\001 \001(\t\022\r\n\005value\030\002"
  " \001(\t\"\"\n SubscribeMessageAddLoggedRequest"
  "\"\\\n\030MessageAddLoggedResponse\022@\n\022message_"
  "add_logged\030\001 \001(\0132$.mavsdk.rpc.logging.Me"
  "ssageAddLogged\"J\n\020MessageAddLogged\022\020\n\010mu"
  "lti_id\030\001 \001(\r\022\016\n\006msg_id\030\002 \001(\r\022\024\n\014message_"
  "name\030\003 \001(\t\"%\n#SubscribeMessageRemoveLogg"
  "edRequest\"e\n\033MessageRemoveLoggedResponse"
  "\022F\n\025message_remove_logged\030\001 \001(\0132\'.mavsdk"
  ".rpc.logging.MessageRemoveLogged\"%\n\023Mess"
  "ageRemoveLogged\022\016\n\006msg_id\030\001 \001(\r\"\035\n\033Subsc"
  "ribeMessageDataRequest\"L\n\023MessageDataRes"
  "ponse\0225\n\014message_data\030\001 \001(\0132\037.mavsdk.rpc"
  ".logging.MessageData\"+\n\013MessageData\022\016\n\006m"
  "sg_id\030\001 \001(\r\022\014\n\004data\030\002 \001(\014\" \n\036SubscribeMe"
  "ssageLoggingRequest\"U\n\026MessageLoggingRes"
  "ponse\022;\n\017message_logging\030\001 \001(\0132\".mavsdk."
  "rpc.logging.MessageLogging\"\337\001\n\016MessageLo"
  "gging\022>\n\tlog_level\030\001 \001(\0162+.mavsdk.rpc.lo"
  "gging.MessageLogging.LogLevel\022\021\n\ttimesta"
  "mp\030\002 \001(\004\022\014\n\004data\030\003 \001(\t\"l\n\010LogLevel\022\t\n\005UN"
  "DEF\020\000\022\t\n\005EMERG\0200\022\t\n\005ALERT\0201\022\010\n\004CRIT\0202\022\007\n"
  "\003ERR\0203\022\013\n\007WARNING\0204\022\n\n\006NOTICE\0205\022\010\n\004INFO\020"
  "6\022\t\n\005DEBUG\0207\" \n\036SubscribeMessageDropoutR"
  "equest\"U\n\026MessageDropoutResponse\022;\n\017mess"
  "age_dropout\030\001 \001(\0132\".mavsdk.rpc.logging.M"
  "essageDropout\"\"\n\016MessageDropout\022\020\n\010durat"
  "ion\030\001 \001(\r\"\321\001\n\rLoggingResult\0228\n\006result\030\001 "
  "\001(\0162(.mavsdk.rpc.logging.LoggingResult.R"
  "esult\022\022\n\nresult_str\030\002 \001(\t\"r\n\006Result\022\013\n\007U"
  "NKNOWN\020\000\022\013\n\007SUCCESS\020\001\022\r\n\tNO_SYSTEM\020\002\022\024\n\020"
  "CONNECTION_ERROR\020\003\022\010\n\004BUSY\020\004\022\022\n\016COMMAND_"
  "DENIED\020\005\022\013\n\007TIMEOUT\020\0102\352\013\n\016LoggingService"
  "\022c\n\014StartLogging\022\'.mavsdk.rpc.logging.St"
  "artLoggingRequest\032(.mavsdk.rpc.logging.S"
  "tartLoggingResponse\"\000\022`\n\013StopLogging\022&.m"
  "avsdk.rpc.logging.StopLoggingRequest\032\'.m"
  "avsdk.rpc.logging.StopLoggingResponse\"\000\022"
  "\200\001\n\030SubscribeMessageFlagBits\0223.mavsdk.rp"
  "c.logging.SubscribeMessageFlagBitsReques"
  "t\032+.mavsdk.rpc.logging.MessageFlagBitsRe"
  "sponse\"\0000\001\022z\n\026SubscribeMessageFormat\0221.m"
  "avsdk.rpc.logging.SubscribeMessageFormat"
  "Request\032).mavsdk.rpc.logging.MessageForm"
  "atResponse\"\0000\001\022t\n\024SubscribeMessageInfo\022/"
  ".mavsdk.rpc.logging.SubscribeMessageInfo"
  "Request\032\'.mavsdk.rpc.logging.MessageInfo"
  "Response\"\0000\001\022\214\001\n\034SubscribeMessageInfoMul"
  "tiple\0227.mavsdk.rpc.logging.SubscribeMess"
  "ageInfoMultipleRequest\032/.mavsdk.rpc.logg"
  "ing.MessageInfoMultipleResponse\"\0000\001\022\203\001\n\031"
  "SubscribeMessageParameter\0224.mavsdk.rpc.l"
  "ogging.SubscribeMessageParameterRequest\032"
  ",.mavsdk.rpc.logging.MessageParameterRes"
  "ponse\"\0000\001\022\203\001\n\031SubscribeMessageAddLogged\022"
  "4.mavsdk.rpc.logging.SubscribeMessageAdd"
  "LoggedRequest\032,.mavsdk.rpc.logging.Messa"
  "geAddLoggedResponse\"\0000\001\022\214\001\n\034SubscribeMes"
  "sageRemoveLogged\0227.mavsdk.rpc.logging.Su"
  "bscribeMessageRemoveLoggedRequest\032/.mavs"
  "dk.rpc.logging.MessageRemoveLoggedRespon"
  "se\"\0000\001\022t\n\024SubscribeMessageData\022/.mavsdk."
  "rpc.logging.SubscribeMessageDataRequest\032"
  "\'.mavsdk.rpc.logging.MessageDataResponse"
  "\"\0000\001\022}\n\027SubscribeMessageLogging\0222.mavsdk"
  ".rpc.logging.SubscribeMessageLoggingRequ"
  "est\032*.mavsdk.rpc.logging.MessageLoggingR"
  "esponse\"\0000\001\022}\n\027SubscribeMessageDropout\0222"
  ".mavsdk.rpc.logging.SubscribeMessageDrop"
  "outRequest\032*.mavsdk.rpc.logging.MessageD"
  "ropoutResponse\"\0000\001B!\n\021io.mavsdk.loggingB"
  "\014LoggingProtob\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_logging_2flogging_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_logging_2flogging_2eproto_sccs[35] = {
  &scc_info_LoggingResult_logging_2flogging_2eproto.base,
  &scc_info_MessageAddLogged_logging_2flogging_2eproto.base,
  &scc_info_MessageAddLoggedResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageData_logging_2flogging_2eproto.base,
  &scc_info_MessageDataResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageDropout_logging_2flogging_2eproto.base,
  &scc_info_MessageDropoutResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageFlagBits_logging_2flogging_2eproto.base,
  &scc_info_MessageFlagBitsResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageFormat_logging_2flogging_2eproto.base,
  &scc_info_MessageFormatResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageInfo_logging_2flogging_2eproto.base,
  &scc_info_MessageInfoMultiple_logging_2flogging_2eproto.base,
  &scc_info_MessageInfoMultipleResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageInfoResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageLogging_logging_2flogging_2eproto.base,
  &scc_info_MessageLoggingResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageParameter_logging_2flogging_2eproto.base,
  &scc_info_MessageParameterResponse_logging_2flogging_2eproto.base,
  &scc_info_MessageRemoveLogged_logging_2flogging_2eproto.base,
  &scc_info_MessageRemoveLoggedResponse_logging_2flogging_2eproto.base,
  &scc_info_StartLoggingRequest_logging_2flogging_2eproto.base,
  &scc_info_StartLoggingResponse_logging_2flogging_2eproto.base,
  &scc_info_StopLoggingRequest_logging_2flogging_2eproto.base,
  &scc_info_StopLoggingResponse_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageAddLoggedRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageDataRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageDropoutRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageFlagBitsRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageFormatRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageInfoMultipleRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageInfoRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageLoggingRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageParameterRequest_logging_2flogging_2eproto.base,
  &scc_info_SubscribeMessageRemoveLoggedRequest_logging_2flogging_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_logging_2flogging_2eproto_once;
static bool descriptor_table_logging_2flogging_2eproto_initialized = false;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logging_2flogging_2eproto = {
  &descriptor_table_logging_2flogging_2eproto_initialized, descriptor_table_protodef_logging_2flogging_2eproto, "logging/logging.proto", 3981,
  &descriptor_table_logging_2flogging_2eproto_once, descriptor_table_logging_2flogging_2eproto_sccs, descriptor_table_logging_2flogging_2eproto_deps, 35, 0,
  schemas, file_default_instances, TableStruct_logging_2flogging_2eproto::offsets,
  file_level_metadata_logging_2flogging_2eproto, 35, file_level_enum_descriptors_logging_2flogging_2eproto, file_level_service_descriptors_logging_2flogging_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_logging_2flogging_2eproto = (  ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_logging_2flogging_2eproto), true);
namespace mavsdk {
namespace rpc {
namespace logging {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageLogging_LogLevel_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_logging_2flogging_2eproto);
  return file_level_enum_descriptors_logging_2flogging_2eproto[0];
}
bool MessageLogging_LogLevel_IsValid(int value) {
  switch (value) {
    case 0:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr MessageLogging_LogLevel MessageLogging::UNDEF;
constexpr MessageLogging_LogLevel MessageLogging::EMERG;
constexpr MessageLogging_LogLevel MessageLogging::ALERT;
constexpr MessageLogging_LogLevel MessageLogging::CRIT;
constexpr MessageLogging_LogLevel MessageLogging::ERR;
constexpr MessageLogging_LogLevel MessageLogging::WARNING;
constexpr MessageLogging_LogLevel MessageLogging::NOTICE;
constexpr MessageLogging_LogLevel MessageLogging::INFO;
constexpr MessageLogging_LogLevel MessageLogging::DEBUG;
constexpr MessageLogging_LogLevel MessageLogging::LogLevel_MIN;
constexpr MessageLogging_LogLevel MessageLogging::LogLevel_MAX;
constexpr int MessageLogging::LogLevel_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoggingResult_Result_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_logging_2flogging_2eproto);
  return file_level_enum_descriptors_logging_2flogging_2eproto[1];
}
bool LoggingResult_Result_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 8:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)
constexpr LoggingResult_Result LoggingResult::UNKNOWN;
constexpr LoggingResult_Result LoggingResult::SUCCESS;
constexpr LoggingResult_Result LoggingResult::NO_SYSTEM;
constexpr LoggingResult_Result LoggingResult::CONNECTION_ERROR;
constexpr LoggingResult_Result LoggingResult::BUSY;
constexpr LoggingResult_Result LoggingResult::COMMAND_DENIED;
constexpr LoggingResult_Result LoggingResult::TIMEOUT;
constexpr LoggingResult_Result LoggingResult::Result_MIN;
constexpr LoggingResult_Result LoggingResult::Result_MAX;
constexpr int LoggingResult::Result_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || _MSC_VER >= 1900)

// ===================================================================

void StartLoggingRequest::InitAsDefaultInstance() {
}
class StartLoggingRequest::_Internal {
 public:
};

StartLoggingRequest::StartLoggingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StartLoggingRequest)
}
StartLoggingRequest::StartLoggingRequest(const StartLoggingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StartLoggingRequest)
}

void StartLoggingRequest::SharedCtor() {
}

StartLoggingRequest::~StartLoggingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StartLoggingRequest)
  SharedDtor();
}

void StartLoggingRequest::SharedDtor() {
}

void StartLoggingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartLoggingRequest& StartLoggingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartLoggingRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StartLoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StartLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartLoggingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartLoggingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StartLoggingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StartLoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StartLoggingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StartLoggingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StartLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StartLoggingRequest)
  return target;
}

size_t StartLoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StartLoggingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLoggingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StartLoggingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartLoggingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StartLoggingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StartLoggingRequest)
    MergeFrom(*source);
  }
}

void StartLoggingRequest::MergeFrom(const StartLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StartLoggingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartLoggingRequest::CopyFrom(const StartLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StartLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLoggingRequest::IsInitialized() const {
  return true;
}

void StartLoggingRequest::InternalSwap(StartLoggingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartLoggingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StartLoggingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_StartLoggingResponse_default_instance_._instance.get_mutable()->logging_result_ = const_cast< ::mavsdk::rpc::logging::LoggingResult*>(
      ::mavsdk::rpc::logging::LoggingResult::internal_default_instance());
}
class StartLoggingResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::LoggingResult& logging_result(const StartLoggingResponse* msg);
};

const ::mavsdk::rpc::logging::LoggingResult&
StartLoggingResponse::_Internal::logging_result(const StartLoggingResponse* msg) {
  return *msg->logging_result_;
}
StartLoggingResponse::StartLoggingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StartLoggingResponse)
}
StartLoggingResponse::StartLoggingResponse(const StartLoggingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logging_result()) {
    logging_result_ = new ::mavsdk::rpc::logging::LoggingResult(*from.logging_result_);
  } else {
    logging_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StartLoggingResponse)
}

void StartLoggingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StartLoggingResponse_logging_2flogging_2eproto.base);
  logging_result_ = nullptr;
}

StartLoggingResponse::~StartLoggingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StartLoggingResponse)
  SharedDtor();
}

void StartLoggingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete logging_result_;
}

void StartLoggingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StartLoggingResponse& StartLoggingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StartLoggingResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StartLoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StartLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logging_result_ != nullptr) {
    delete logging_result_;
  }
  logging_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StartLoggingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_logging_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StartLoggingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StartLoggingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logging_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StartLoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StartLoggingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StartLoggingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StartLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::logging_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StartLoggingResponse)
  return target;
}

size_t StartLoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StartLoggingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StartLoggingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StartLoggingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StartLoggingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StartLoggingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StartLoggingResponse)
    MergeFrom(*source);
  }
}

void StartLoggingResponse::MergeFrom(const StartLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logging_result()) {
    mutable_logging_result()->::mavsdk::rpc::logging::LoggingResult::MergeFrom(from.logging_result());
  }
}

void StartLoggingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartLoggingResponse::CopyFrom(const StartLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StartLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartLoggingResponse::IsInitialized() const {
  return true;
}

void StartLoggingResponse::InternalSwap(StartLoggingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logging_result_, other->logging_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StartLoggingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopLoggingRequest::InitAsDefaultInstance() {
}
class StopLoggingRequest::_Internal {
 public:
};

StopLoggingRequest::StopLoggingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StopLoggingRequest)
}
StopLoggingRequest::StopLoggingRequest(const StopLoggingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StopLoggingRequest)
}

void StopLoggingRequest::SharedCtor() {
}

StopLoggingRequest::~StopLoggingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StopLoggingRequest)
  SharedDtor();
}

void StopLoggingRequest::SharedDtor() {
}

void StopLoggingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLoggingRequest& StopLoggingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopLoggingRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StopLoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StopLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopLoggingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopLoggingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StopLoggingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StopLoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StopLoggingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StopLoggingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StopLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StopLoggingRequest)
  return target;
}

size_t StopLoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StopLoggingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLoggingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLoggingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopLoggingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StopLoggingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StopLoggingRequest)
    MergeFrom(*source);
  }
}

void StopLoggingRequest::MergeFrom(const StopLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void StopLoggingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLoggingRequest::CopyFrom(const StopLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StopLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLoggingRequest::IsInitialized() const {
  return true;
}

void StopLoggingRequest::InternalSwap(StopLoggingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopLoggingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void StopLoggingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_StopLoggingResponse_default_instance_._instance.get_mutable()->logging_result_ = const_cast< ::mavsdk::rpc::logging::LoggingResult*>(
      ::mavsdk::rpc::logging::LoggingResult::internal_default_instance());
}
class StopLoggingResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::LoggingResult& logging_result(const StopLoggingResponse* msg);
};

const ::mavsdk::rpc::logging::LoggingResult&
StopLoggingResponse::_Internal::logging_result(const StopLoggingResponse* msg) {
  return *msg->logging_result_;
}
StopLoggingResponse::StopLoggingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.StopLoggingResponse)
}
StopLoggingResponse::StopLoggingResponse(const StopLoggingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_logging_result()) {
    logging_result_ = new ::mavsdk::rpc::logging::LoggingResult(*from.logging_result_);
  } else {
    logging_result_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.StopLoggingResponse)
}

void StopLoggingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_StopLoggingResponse_logging_2flogging_2eproto.base);
  logging_result_ = nullptr;
}

StopLoggingResponse::~StopLoggingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.StopLoggingResponse)
  SharedDtor();
}

void StopLoggingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete logging_result_;
}

void StopLoggingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const StopLoggingResponse& StopLoggingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_StopLoggingResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void StopLoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.StopLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && logging_result_ != nullptr) {
    delete logging_result_;
  }
  logging_result_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* StopLoggingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_logging_result(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool StopLoggingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.StopLoggingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_logging_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.StopLoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.StopLoggingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* StopLoggingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.StopLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::logging_result(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.StopLoggingResponse)
  return target;
}

size_t StopLoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.StopLoggingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  if (this->has_logging_result()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *logging_result_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void StopLoggingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const StopLoggingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<StopLoggingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.StopLoggingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.StopLoggingResponse)
    MergeFrom(*source);
  }
}

void StopLoggingResponse::MergeFrom(const StopLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_logging_result()) {
    mutable_logging_result()->::mavsdk::rpc::logging::LoggingResult::MergeFrom(from.logging_result());
  }
}

void StopLoggingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopLoggingResponse::CopyFrom(const StopLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.StopLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopLoggingResponse::IsInitialized() const {
  return true;
}

void StopLoggingResponse::InternalSwap(StopLoggingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(logging_result_, other->logging_result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata StopLoggingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageFlagBitsRequest::InitAsDefaultInstance() {
}
class SubscribeMessageFlagBitsRequest::_Internal {
 public:
};

SubscribeMessageFlagBitsRequest::SubscribeMessageFlagBitsRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
}
SubscribeMessageFlagBitsRequest::SubscribeMessageFlagBitsRequest(const SubscribeMessageFlagBitsRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
}

void SubscribeMessageFlagBitsRequest::SharedCtor() {
}

SubscribeMessageFlagBitsRequest::~SubscribeMessageFlagBitsRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  SharedDtor();
}

void SubscribeMessageFlagBitsRequest::SharedDtor() {
}

void SubscribeMessageFlagBitsRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageFlagBitsRequest& SubscribeMessageFlagBitsRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageFlagBitsRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageFlagBitsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageFlagBitsRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageFlagBitsRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageFlagBitsRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  return target;
}

size_t SubscribeMessageFlagBitsRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageFlagBitsRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageFlagBitsRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageFlagBitsRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageFlagBitsRequest::MergeFrom(const SubscribeMessageFlagBitsRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageFlagBitsRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageFlagBitsRequest::CopyFrom(const SubscribeMessageFlagBitsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageFlagBitsRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageFlagBitsRequest::InternalSwap(SubscribeMessageFlagBitsRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageFlagBitsRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageFlagBitsResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageFlagBitsResponse_default_instance_._instance.get_mutable()->message_flag_bits_ = const_cast< ::mavsdk::rpc::logging::MessageFlagBits*>(
      ::mavsdk::rpc::logging::MessageFlagBits::internal_default_instance());
}
class MessageFlagBitsResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageFlagBits& message_flag_bits(const MessageFlagBitsResponse* msg);
};

const ::mavsdk::rpc::logging::MessageFlagBits&
MessageFlagBitsResponse::_Internal::message_flag_bits(const MessageFlagBitsResponse* msg) {
  return *msg->message_flag_bits_;
}
MessageFlagBitsResponse::MessageFlagBitsResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageFlagBitsResponse)
}
MessageFlagBitsResponse::MessageFlagBitsResponse(const MessageFlagBitsResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_flag_bits()) {
    message_flag_bits_ = new ::mavsdk::rpc::logging::MessageFlagBits(*from.message_flag_bits_);
  } else {
    message_flag_bits_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageFlagBitsResponse)
}

void MessageFlagBitsResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageFlagBitsResponse_logging_2flogging_2eproto.base);
  message_flag_bits_ = nullptr;
}

MessageFlagBitsResponse::~MessageFlagBitsResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageFlagBitsResponse)
  SharedDtor();
}

void MessageFlagBitsResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_flag_bits_;
}

void MessageFlagBitsResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageFlagBitsResponse& MessageFlagBitsResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageFlagBitsResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageFlagBitsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_flag_bits_ != nullptr) {
    delete message_flag_bits_;
  }
  message_flag_bits_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageFlagBitsResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageFlagBits message_flag_bits = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_flag_bits(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageFlagBitsResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageFlagBits message_flag_bits = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_flag_bits()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageFlagBitsResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageFlagBitsResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageFlagBitsResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageFlagBits message_flag_bits = 1;
  if (this->has_message_flag_bits()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_flag_bits(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageFlagBitsResponse)
  return target;
}

size_t MessageFlagBitsResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageFlagBits message_flag_bits = 1;
  if (this->has_message_flag_bits()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_flag_bits_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageFlagBitsResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageFlagBitsResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageFlagBitsResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageFlagBitsResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageFlagBitsResponse)
    MergeFrom(*source);
  }
}

void MessageFlagBitsResponse::MergeFrom(const MessageFlagBitsResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_flag_bits()) {
    mutable_message_flag_bits()->::mavsdk::rpc::logging::MessageFlagBits::MergeFrom(from.message_flag_bits());
  }
}

void MessageFlagBitsResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageFlagBitsResponse::CopyFrom(const MessageFlagBitsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageFlagBitsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFlagBitsResponse::IsInitialized() const {
  return true;
}

void MessageFlagBitsResponse::InternalSwap(MessageFlagBitsResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_flag_bits_, other->message_flag_bits_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageFlagBitsResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageFlagBits::InitAsDefaultInstance() {
}
class MessageFlagBits::_Internal {
 public:
};

MessageFlagBits::MessageFlagBits()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageFlagBits)
}
MessageFlagBits::MessageFlagBits(const MessageFlagBits& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr),
      compat_flags_(from.compat_flags_),
      incompat_flags_(from.incompat_flags_),
      appended_offsets_(from.appended_offsets_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageFlagBits)
}

void MessageFlagBits::SharedCtor() {
}

MessageFlagBits::~MessageFlagBits() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageFlagBits)
  SharedDtor();
}

void MessageFlagBits::SharedDtor() {
}

void MessageFlagBits::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageFlagBits& MessageFlagBits::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageFlagBits_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageFlagBits::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageFlagBits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  compat_flags_.Clear();
  incompat_flags_.Clear();
  appended_offsets_.Clear();
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageFlagBits::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated uint32 compat_flags = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_compat_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8) {
          add_compat_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint32 incompat_flags = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt32Parser(mutable_incompat_flags(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16) {
          add_incompat_flags(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated uint64 appended_offsets = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedUInt64Parser(mutable_appended_offsets(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          add_appended_offsets(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageFlagBits::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageFlagBits)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 compat_flags = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_compat_flags())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 10u, input, this->mutable_compat_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 incompat_flags = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_incompat_flags())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18u, input, this->mutable_incompat_flags())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint64 appended_offsets = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPackedPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, this->mutable_appended_offsets())));
        } else if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (24 & 0xFF)) {
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 1, 26u, input, this->mutable_appended_offsets())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageFlagBits)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageFlagBits)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageFlagBits::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageFlagBits)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated uint32 compat_flags = 1;
  {
    int byte_size = _compat_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          1, compat_flags_, byte_size, target);
    }
  }

  // repeated uint32 incompat_flags = 2;
  {
    int byte_size = _incompat_flags_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt32Packed(
          2, incompat_flags_, byte_size, target);
    }
  }

  // repeated uint64 appended_offsets = 3;
  {
    int byte_size = _appended_offsets_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteUInt64Packed(
          3, appended_offsets_, byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageFlagBits)
  return target;
}

size_t MessageFlagBits::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageFlagBits)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated uint32 compat_flags = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->compat_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _compat_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint32 incompat_flags = 2;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt32Size(this->incompat_flags_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _incompat_flags_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated uint64 appended_offsets = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      UInt64Size(this->appended_offsets_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _appended_offsets_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageFlagBits::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageFlagBits)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageFlagBits* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageFlagBits>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageFlagBits)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageFlagBits)
    MergeFrom(*source);
  }
}

void MessageFlagBits::MergeFrom(const MessageFlagBits& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageFlagBits)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  compat_flags_.MergeFrom(from.compat_flags_);
  incompat_flags_.MergeFrom(from.incompat_flags_);
  appended_offsets_.MergeFrom(from.appended_offsets_);
}

void MessageFlagBits::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageFlagBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageFlagBits::CopyFrom(const MessageFlagBits& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageFlagBits)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFlagBits::IsInitialized() const {
  return true;
}

void MessageFlagBits::InternalSwap(MessageFlagBits* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  compat_flags_.InternalSwap(&other->compat_flags_);
  incompat_flags_.InternalSwap(&other->incompat_flags_);
  appended_offsets_.InternalSwap(&other->appended_offsets_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageFlagBits::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageFormatRequest::InitAsDefaultInstance() {
}
class SubscribeMessageFormatRequest::_Internal {
 public:
};

SubscribeMessageFormatRequest::SubscribeMessageFormatRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
}
SubscribeMessageFormatRequest::SubscribeMessageFormatRequest(const SubscribeMessageFormatRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
}

void SubscribeMessageFormatRequest::SharedCtor() {
}

SubscribeMessageFormatRequest::~SubscribeMessageFormatRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  SharedDtor();
}

void SubscribeMessageFormatRequest::SharedDtor() {
}

void SubscribeMessageFormatRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageFormatRequest& SubscribeMessageFormatRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageFormatRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageFormatRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageFormatRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageFormatRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageFormatRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  return target;
}

size_t SubscribeMessageFormatRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageFormatRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageFormatRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageFormatRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageFormatRequest::MergeFrom(const SubscribeMessageFormatRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageFormatRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageFormatRequest::CopyFrom(const SubscribeMessageFormatRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageFormatRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageFormatRequest::InternalSwap(SubscribeMessageFormatRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageFormatRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageFormatResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageFormatResponse_default_instance_._instance.get_mutable()->message_format_ = const_cast< ::mavsdk::rpc::logging::MessageFormat*>(
      ::mavsdk::rpc::logging::MessageFormat::internal_default_instance());
}
class MessageFormatResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageFormat& message_format(const MessageFormatResponse* msg);
};

const ::mavsdk::rpc::logging::MessageFormat&
MessageFormatResponse::_Internal::message_format(const MessageFormatResponse* msg) {
  return *msg->message_format_;
}
MessageFormatResponse::MessageFormatResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageFormatResponse)
}
MessageFormatResponse::MessageFormatResponse(const MessageFormatResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_format()) {
    message_format_ = new ::mavsdk::rpc::logging::MessageFormat(*from.message_format_);
  } else {
    message_format_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageFormatResponse)
}

void MessageFormatResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageFormatResponse_logging_2flogging_2eproto.base);
  message_format_ = nullptr;
}

MessageFormatResponse::~MessageFormatResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageFormatResponse)
  SharedDtor();
}

void MessageFormatResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_format_;
}

void MessageFormatResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageFormatResponse& MessageFormatResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageFormatResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageFormatResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageFormatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_format_ != nullptr) {
    delete message_format_;
  }
  message_format_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageFormatResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageFormat message_format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_format(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageFormatResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageFormatResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageFormat message_format = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageFormatResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageFormatResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageFormatResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageFormatResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageFormat message_format = 1;
  if (this->has_message_format()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_format(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageFormatResponse)
  return target;
}

size_t MessageFormatResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageFormatResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageFormat message_format = 1;
  if (this->has_message_format()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_format_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageFormatResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageFormatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageFormatResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageFormatResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageFormatResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageFormatResponse)
    MergeFrom(*source);
  }
}

void MessageFormatResponse::MergeFrom(const MessageFormatResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageFormatResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_format()) {
    mutable_message_format()->::mavsdk::rpc::logging::MessageFormat::MergeFrom(from.message_format());
  }
}

void MessageFormatResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageFormatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageFormatResponse::CopyFrom(const MessageFormatResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageFormatResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFormatResponse::IsInitialized() const {
  return true;
}

void MessageFormatResponse::InternalSwap(MessageFormatResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_format_, other->message_format_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageFormatResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageFormat::InitAsDefaultInstance() {
}
class MessageFormat::_Internal {
 public:
};

MessageFormat::MessageFormat()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageFormat)
}
MessageFormat::MessageFormat(const MessageFormat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_format().empty()) {
    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageFormat)
}

void MessageFormat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageFormat_logging_2flogging_2eproto.base);
  format_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageFormat::~MessageFormat() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageFormat)
  SharedDtor();
}

void MessageFormat::SharedDtor() {
  format_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageFormat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageFormat& MessageFormat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageFormat_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageFormat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string format = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_format(), ptr, ctx, "mavsdk.rpc.logging.MessageFormat.format");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageFormat::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageFormat)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string format = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_format()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageFormat.format"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageFormat)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageFormat::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageFormat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string format = 1;
  if (this->format().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_format().data(), static_cast<int>(this->_internal_format().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageFormat.format");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_format(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageFormat)
  return target;
}

size_t MessageFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageFormat)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string format = 1;
  if (this->format().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_format());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageFormat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageFormat)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageFormat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageFormat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageFormat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageFormat)
    MergeFrom(*source);
  }
}

void MessageFormat::MergeFrom(const MessageFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.format().size() > 0) {

    format_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.format_);
  }
}

void MessageFormat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageFormat::CopyFrom(const MessageFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageFormat::IsInitialized() const {
  return true;
}

void MessageFormat::InternalSwap(MessageFormat* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  format_.Swap(&other->format_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageFormat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageInfoRequest::InitAsDefaultInstance() {
}
class SubscribeMessageInfoRequest::_Internal {
 public:
};

SubscribeMessageInfoRequest::SubscribeMessageInfoRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
}
SubscribeMessageInfoRequest::SubscribeMessageInfoRequest(const SubscribeMessageInfoRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
}

void SubscribeMessageInfoRequest::SharedCtor() {
}

SubscribeMessageInfoRequest::~SubscribeMessageInfoRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  SharedDtor();
}

void SubscribeMessageInfoRequest::SharedDtor() {
}

void SubscribeMessageInfoRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageInfoRequest& SubscribeMessageInfoRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageInfoRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageInfoRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageInfoRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageInfoRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageInfoRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  return target;
}

size_t SubscribeMessageInfoRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageInfoRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageInfoRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageInfoRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageInfoRequest::MergeFrom(const SubscribeMessageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageInfoRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageInfoRequest::CopyFrom(const SubscribeMessageInfoRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageInfoRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageInfoRequest::InternalSwap(SubscribeMessageInfoRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageInfoRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageInfoResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageInfoResponse_default_instance_._instance.get_mutable()->message_info_ = const_cast< ::mavsdk::rpc::logging::MessageInfo*>(
      ::mavsdk::rpc::logging::MessageInfo::internal_default_instance());
}
class MessageInfoResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageInfo& message_info(const MessageInfoResponse* msg);
};

const ::mavsdk::rpc::logging::MessageInfo&
MessageInfoResponse::_Internal::message_info(const MessageInfoResponse* msg) {
  return *msg->message_info_;
}
MessageInfoResponse::MessageInfoResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageInfoResponse)
}
MessageInfoResponse::MessageInfoResponse(const MessageInfoResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_info()) {
    message_info_ = new ::mavsdk::rpc::logging::MessageInfo(*from.message_info_);
  } else {
    message_info_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageInfoResponse)
}

void MessageInfoResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageInfoResponse_logging_2flogging_2eproto.base);
  message_info_ = nullptr;
}

MessageInfoResponse::~MessageInfoResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageInfoResponse)
  SharedDtor();
}

void MessageInfoResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_info_;
}

void MessageInfoResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageInfoResponse& MessageInfoResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageInfoResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageInfoResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_info_ != nullptr) {
    delete message_info_;
  }
  message_info_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageInfoResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageInfo message_info = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_info(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageInfoResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageInfoResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageInfo message_info = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageInfoResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageInfoResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageInfoResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageInfoResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageInfo message_info = 1;
  if (this->has_message_info()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_info(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageInfoResponse)
  return target;
}

size_t MessageInfoResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageInfoResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageInfo message_info = 1;
  if (this->has_message_info()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_info_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfoResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfoResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageInfoResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageInfoResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageInfoResponse)
    MergeFrom(*source);
  }
}

void MessageInfoResponse::MergeFrom(const MessageInfoResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageInfoResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_info()) {
    mutable_message_info()->::mavsdk::rpc::logging::MessageInfo::MergeFrom(from.message_info());
  }
}

void MessageInfoResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfoResponse::CopyFrom(const MessageInfoResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageInfoResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfoResponse::IsInitialized() const {
  return true;
}

void MessageInfoResponse::InternalSwap(MessageInfoResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_info_, other->message_info_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfoResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageInfo::InitAsDefaultInstance() {
}
class MessageInfo::_Internal {
 public:
};

MessageInfo::MessageInfo()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageInfo)
}
MessageInfo::MessageInfo(const MessageInfo& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageInfo)
}

void MessageInfo::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageInfo_logging_2flogging_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageInfo::~MessageInfo() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageInfo)
  SharedDtor();
}

void MessageInfo::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageInfo::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageInfo& MessageInfo::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageInfo_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageInfo::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_key(), ptr, ctx, "mavsdk.rpc.logging.MessageInfo.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "mavsdk.rpc.logging.MessageInfo.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageInfo::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageInfo)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageInfo.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageInfo.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageInfo)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageInfo::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageInfo)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageInfo.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageInfo.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageInfo)
  return target;
}

size_t MessageInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageInfo)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfo::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfo* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageInfo>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageInfo)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageInfo)
    MergeFrom(*source);
  }
}

void MessageInfo::MergeFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MessageInfo::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfo::CopyFrom(const MessageInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfo::IsInitialized() const {
  return true;
}

void MessageInfo::InternalSwap(MessageInfo* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfo::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageInfoMultipleRequest::InitAsDefaultInstance() {
}
class SubscribeMessageInfoMultipleRequest::_Internal {
 public:
};

SubscribeMessageInfoMultipleRequest::SubscribeMessageInfoMultipleRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
}
SubscribeMessageInfoMultipleRequest::SubscribeMessageInfoMultipleRequest(const SubscribeMessageInfoMultipleRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
}

void SubscribeMessageInfoMultipleRequest::SharedCtor() {
}

SubscribeMessageInfoMultipleRequest::~SubscribeMessageInfoMultipleRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  SharedDtor();
}

void SubscribeMessageInfoMultipleRequest::SharedDtor() {
}

void SubscribeMessageInfoMultipleRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageInfoMultipleRequest& SubscribeMessageInfoMultipleRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageInfoMultipleRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageInfoMultipleRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageInfoMultipleRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageInfoMultipleRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageInfoMultipleRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  return target;
}

size_t SubscribeMessageInfoMultipleRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageInfoMultipleRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageInfoMultipleRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageInfoMultipleRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageInfoMultipleRequest::MergeFrom(const SubscribeMessageInfoMultipleRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageInfoMultipleRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageInfoMultipleRequest::CopyFrom(const SubscribeMessageInfoMultipleRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageInfoMultipleRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageInfoMultipleRequest::InternalSwap(SubscribeMessageInfoMultipleRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageInfoMultipleRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageInfoMultipleResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageInfoMultipleResponse_default_instance_._instance.get_mutable()->message_info_multiple_ = const_cast< ::mavsdk::rpc::logging::MessageInfoMultiple*>(
      ::mavsdk::rpc::logging::MessageInfoMultiple::internal_default_instance());
}
class MessageInfoMultipleResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageInfoMultiple& message_info_multiple(const MessageInfoMultipleResponse* msg);
};

const ::mavsdk::rpc::logging::MessageInfoMultiple&
MessageInfoMultipleResponse::_Internal::message_info_multiple(const MessageInfoMultipleResponse* msg) {
  return *msg->message_info_multiple_;
}
MessageInfoMultipleResponse::MessageInfoMultipleResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageInfoMultipleResponse)
}
MessageInfoMultipleResponse::MessageInfoMultipleResponse(const MessageInfoMultipleResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_info_multiple()) {
    message_info_multiple_ = new ::mavsdk::rpc::logging::MessageInfoMultiple(*from.message_info_multiple_);
  } else {
    message_info_multiple_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageInfoMultipleResponse)
}

void MessageInfoMultipleResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageInfoMultipleResponse_logging_2flogging_2eproto.base);
  message_info_multiple_ = nullptr;
}

MessageInfoMultipleResponse::~MessageInfoMultipleResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  SharedDtor();
}

void MessageInfoMultipleResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_info_multiple_;
}

void MessageInfoMultipleResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageInfoMultipleResponse& MessageInfoMultipleResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageInfoMultipleResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageInfoMultipleResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_info_multiple_ != nullptr) {
    delete message_info_multiple_;
  }
  message_info_multiple_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageInfoMultipleResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageInfoMultiple message_info_multiple = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_info_multiple(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageInfoMultipleResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageInfoMultiple message_info_multiple = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_info_multiple()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageInfoMultipleResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageInfoMultiple message_info_multiple = 1;
  if (this->has_message_info_multiple()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_info_multiple(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  return target;
}

size_t MessageInfoMultipleResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageInfoMultiple message_info_multiple = 1;
  if (this->has_message_info_multiple()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_info_multiple_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfoMultipleResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfoMultipleResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageInfoMultipleResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageInfoMultipleResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageInfoMultipleResponse)
    MergeFrom(*source);
  }
}

void MessageInfoMultipleResponse::MergeFrom(const MessageInfoMultipleResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_info_multiple()) {
    mutable_message_info_multiple()->::mavsdk::rpc::logging::MessageInfoMultiple::MergeFrom(from.message_info_multiple());
  }
}

void MessageInfoMultipleResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfoMultipleResponse::CopyFrom(const MessageInfoMultipleResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageInfoMultipleResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfoMultipleResponse::IsInitialized() const {
  return true;
}

void MessageInfoMultipleResponse::InternalSwap(MessageInfoMultipleResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_info_multiple_, other->message_info_multiple_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfoMultipleResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageInfoMultiple::InitAsDefaultInstance() {
}
class MessageInfoMultiple::_Internal {
 public:
};

MessageInfoMultiple::MessageInfoMultiple()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageInfoMultiple)
}
MessageInfoMultiple::MessageInfoMultiple(const MessageInfoMultiple& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  is_continued_ = from.is_continued_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageInfoMultiple)
}

void MessageInfoMultiple::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageInfoMultiple_logging_2flogging_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_continued_ = false;
}

MessageInfoMultiple::~MessageInfoMultiple() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageInfoMultiple)
  SharedDtor();
}

void MessageInfoMultiple::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageInfoMultiple::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageInfoMultiple& MessageInfoMultiple::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageInfoMultiple_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageInfoMultiple::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageInfoMultiple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  is_continued_ = false;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageInfoMultiple::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // bool is_continued = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          is_continued_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string key = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_key(), ptr, ctx, "mavsdk.rpc.logging.MessageInfoMultiple.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "mavsdk.rpc.logging.MessageInfoMultiple.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageInfoMultiple::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageInfoMultiple)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool is_continued = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   bool, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_continued_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageInfoMultiple.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageInfoMultiple.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageInfoMultiple)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageInfoMultiple)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageInfoMultiple::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageInfoMultiple)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool is_continued = 1;
  if (this->is_continued() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->is_continued(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageInfoMultiple.key");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_key(), target);
  }

  // string value = 3;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageInfoMultiple.value");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageInfoMultiple)
  return target;
}

size_t MessageInfoMultiple::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageInfoMultiple)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 3;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  // bool is_continued = 1;
  if (this->is_continued() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageInfoMultiple::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageInfoMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageInfoMultiple* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageInfoMultiple>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageInfoMultiple)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageInfoMultiple)
    MergeFrom(*source);
  }
}

void MessageInfoMultiple::MergeFrom(const MessageInfoMultiple& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageInfoMultiple)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  if (from.is_continued() != 0) {
    set_is_continued(from.is_continued());
  }
}

void MessageInfoMultiple::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageInfoMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageInfoMultiple::CopyFrom(const MessageInfoMultiple& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageInfoMultiple)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageInfoMultiple::IsInitialized() const {
  return true;
}

void MessageInfoMultiple::InternalSwap(MessageInfoMultiple* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(is_continued_, other->is_continued_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageInfoMultiple::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageParameterRequest::InitAsDefaultInstance() {
}
class SubscribeMessageParameterRequest::_Internal {
 public:
};

SubscribeMessageParameterRequest::SubscribeMessageParameterRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
}
SubscribeMessageParameterRequest::SubscribeMessageParameterRequest(const SubscribeMessageParameterRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
}

void SubscribeMessageParameterRequest::SharedCtor() {
}

SubscribeMessageParameterRequest::~SubscribeMessageParameterRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  SharedDtor();
}

void SubscribeMessageParameterRequest::SharedDtor() {
}

void SubscribeMessageParameterRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageParameterRequest& SubscribeMessageParameterRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageParameterRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageParameterRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageParameterRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageParameterRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageParameterRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  return target;
}

size_t SubscribeMessageParameterRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageParameterRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageParameterRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageParameterRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageParameterRequest::MergeFrom(const SubscribeMessageParameterRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageParameterRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageParameterRequest::CopyFrom(const SubscribeMessageParameterRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageParameterRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageParameterRequest::InternalSwap(SubscribeMessageParameterRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageParameterRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageParameterResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageParameterResponse_default_instance_._instance.get_mutable()->message_parameter_ = const_cast< ::mavsdk::rpc::logging::MessageParameter*>(
      ::mavsdk::rpc::logging::MessageParameter::internal_default_instance());
}
class MessageParameterResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageParameter& message_parameter(const MessageParameterResponse* msg);
};

const ::mavsdk::rpc::logging::MessageParameter&
MessageParameterResponse::_Internal::message_parameter(const MessageParameterResponse* msg) {
  return *msg->message_parameter_;
}
MessageParameterResponse::MessageParameterResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageParameterResponse)
}
MessageParameterResponse::MessageParameterResponse(const MessageParameterResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_parameter()) {
    message_parameter_ = new ::mavsdk::rpc::logging::MessageParameter(*from.message_parameter_);
  } else {
    message_parameter_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageParameterResponse)
}

void MessageParameterResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageParameterResponse_logging_2flogging_2eproto.base);
  message_parameter_ = nullptr;
}

MessageParameterResponse::~MessageParameterResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageParameterResponse)
  SharedDtor();
}

void MessageParameterResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_parameter_;
}

void MessageParameterResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageParameterResponse& MessageParameterResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageParameterResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageParameterResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageParameterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_parameter_ != nullptr) {
    delete message_parameter_;
  }
  message_parameter_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageParameterResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageParameter message_parameter = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_parameter(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageParameterResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageParameterResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageParameter message_parameter = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_parameter()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageParameterResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageParameterResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageParameterResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageParameterResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageParameter message_parameter = 1;
  if (this->has_message_parameter()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_parameter(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageParameterResponse)
  return target;
}

size_t MessageParameterResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageParameterResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageParameter message_parameter = 1;
  if (this->has_message_parameter()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_parameter_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageParameterResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageParameterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageParameterResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageParameterResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageParameterResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageParameterResponse)
    MergeFrom(*source);
  }
}

void MessageParameterResponse::MergeFrom(const MessageParameterResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageParameterResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_parameter()) {
    mutable_message_parameter()->::mavsdk::rpc::logging::MessageParameter::MergeFrom(from.message_parameter());
  }
}

void MessageParameterResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageParameterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageParameterResponse::CopyFrom(const MessageParameterResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageParameterResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageParameterResponse::IsInitialized() const {
  return true;
}

void MessageParameterResponse::InternalSwap(MessageParameterResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_parameter_, other->message_parameter_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageParameterResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageParameter::InitAsDefaultInstance() {
}
class MessageParameter::_Internal {
 public:
};

MessageParameter::MessageParameter()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageParameter)
}
MessageParameter::MessageParameter(const MessageParameter& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_key().empty()) {
    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_value().empty()) {
    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageParameter)
}

void MessageParameter::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageParameter_logging_2flogging_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

MessageParameter::~MessageParameter() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageParameter)
  SharedDtor();
}

void MessageParameter::SharedDtor() {
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageParameter::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageParameter& MessageParameter::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageParameter_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageParameter::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageParameter::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_key(), ptr, ctx, "mavsdk.rpc.logging.MessageParameter.key");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_value(), ptr, ctx, "mavsdk.rpc.logging.MessageParameter.value");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageParameter::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageParameter)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string key = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_key()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageParameter.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string value = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_value()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageParameter.value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageParameter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageParameter)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageParameter::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageParameter)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageParameter.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // string value = 2;
  if (this->value().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageParameter.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageParameter)
  return target;
}

size_t MessageParameter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageParameter)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string key = 1;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  // string value = 2;
  if (this->value().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageParameter::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageParameter* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageParameter>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageParameter)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageParameter)
    MergeFrom(*source);
  }
}

void MessageParameter::MergeFrom(const MessageParameter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageParameter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.value().size() > 0) {

    value_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.value_);
  }
}

void MessageParameter::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageParameter::CopyFrom(const MessageParameter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageParameter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageParameter::IsInitialized() const {
  return true;
}

void MessageParameter::InternalSwap(MessageParameter* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageParameter::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageAddLoggedRequest::InitAsDefaultInstance() {
}
class SubscribeMessageAddLoggedRequest::_Internal {
 public:
};

SubscribeMessageAddLoggedRequest::SubscribeMessageAddLoggedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
}
SubscribeMessageAddLoggedRequest::SubscribeMessageAddLoggedRequest(const SubscribeMessageAddLoggedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
}

void SubscribeMessageAddLoggedRequest::SharedCtor() {
}

SubscribeMessageAddLoggedRequest::~SubscribeMessageAddLoggedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  SharedDtor();
}

void SubscribeMessageAddLoggedRequest::SharedDtor() {
}

void SubscribeMessageAddLoggedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageAddLoggedRequest& SubscribeMessageAddLoggedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageAddLoggedRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageAddLoggedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageAddLoggedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageAddLoggedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageAddLoggedRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  return target;
}

size_t SubscribeMessageAddLoggedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageAddLoggedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageAddLoggedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageAddLoggedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageAddLoggedRequest::MergeFrom(const SubscribeMessageAddLoggedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageAddLoggedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageAddLoggedRequest::CopyFrom(const SubscribeMessageAddLoggedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageAddLoggedRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageAddLoggedRequest::InternalSwap(SubscribeMessageAddLoggedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageAddLoggedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageAddLoggedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageAddLoggedResponse_default_instance_._instance.get_mutable()->message_add_logged_ = const_cast< ::mavsdk::rpc::logging::MessageAddLogged*>(
      ::mavsdk::rpc::logging::MessageAddLogged::internal_default_instance());
}
class MessageAddLoggedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageAddLogged& message_add_logged(const MessageAddLoggedResponse* msg);
};

const ::mavsdk::rpc::logging::MessageAddLogged&
MessageAddLoggedResponse::_Internal::message_add_logged(const MessageAddLoggedResponse* msg) {
  return *msg->message_add_logged_;
}
MessageAddLoggedResponse::MessageAddLoggedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageAddLoggedResponse)
}
MessageAddLoggedResponse::MessageAddLoggedResponse(const MessageAddLoggedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_add_logged()) {
    message_add_logged_ = new ::mavsdk::rpc::logging::MessageAddLogged(*from.message_add_logged_);
  } else {
    message_add_logged_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageAddLoggedResponse)
}

void MessageAddLoggedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAddLoggedResponse_logging_2flogging_2eproto.base);
  message_add_logged_ = nullptr;
}

MessageAddLoggedResponse::~MessageAddLoggedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageAddLoggedResponse)
  SharedDtor();
}

void MessageAddLoggedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_add_logged_;
}

void MessageAddLoggedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAddLoggedResponse& MessageAddLoggedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAddLoggedResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageAddLoggedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_add_logged_ != nullptr) {
    delete message_add_logged_;
  }
  message_add_logged_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageAddLoggedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageAddLogged message_add_logged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_add_logged(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageAddLoggedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageAddLogged message_add_logged = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_add_logged()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageAddLoggedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageAddLoggedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageAddLoggedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageAddLogged message_add_logged = 1;
  if (this->has_message_add_logged()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_add_logged(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageAddLoggedResponse)
  return target;
}

size_t MessageAddLoggedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageAddLogged message_add_logged = 1;
  if (this->has_message_add_logged()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_add_logged_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAddLoggedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAddLoggedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAddLoggedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageAddLoggedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageAddLoggedResponse)
    MergeFrom(*source);
  }
}

void MessageAddLoggedResponse::MergeFrom(const MessageAddLoggedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_add_logged()) {
    mutable_message_add_logged()->::mavsdk::rpc::logging::MessageAddLogged::MergeFrom(from.message_add_logged());
  }
}

void MessageAddLoggedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAddLoggedResponse::CopyFrom(const MessageAddLoggedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageAddLoggedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAddLoggedResponse::IsInitialized() const {
  return true;
}

void MessageAddLoggedResponse::InternalSwap(MessageAddLoggedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_add_logged_, other->message_add_logged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAddLoggedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageAddLogged::InitAsDefaultInstance() {
}
class MessageAddLogged::_Internal {
 public:
};

MessageAddLogged::MessageAddLogged()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageAddLogged)
}
MessageAddLogged::MessageAddLogged(const MessageAddLogged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  message_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_message_name().empty()) {
    message_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_name_);
  }
  ::memcpy(&multi_id_, &from.multi_id_,
    static_cast<size_t>(reinterpret_cast<char*>(&msg_id_) -
    reinterpret_cast<char*>(&multi_id_)) + sizeof(msg_id_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageAddLogged)
}

void MessageAddLogged::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageAddLogged_logging_2flogging_2eproto.base);
  message_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&multi_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&multi_id_)) + sizeof(msg_id_));
}

MessageAddLogged::~MessageAddLogged() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageAddLogged)
  SharedDtor();
}

void MessageAddLogged::SharedDtor() {
  message_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageAddLogged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageAddLogged& MessageAddLogged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageAddLogged_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageAddLogged::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageAddLogged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  message_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&multi_id_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msg_id_) -
      reinterpret_cast<char*>(&multi_id_)) + sizeof(msg_id_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageAddLogged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 multi_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          multi_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 msg_id = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string message_name = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_message_name(), ptr, ctx, "mavsdk.rpc.logging.MessageAddLogged.message_name");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageAddLogged::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageAddLogged)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 multi_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &multi_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 msg_id = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string message_name = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_message_name()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_message_name().data(), static_cast<int>(this->_internal_message_name().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageAddLogged.message_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageAddLogged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageAddLogged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageAddLogged::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageAddLogged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 multi_id = 1;
  if (this->multi_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->multi_id(), target);
  }

  // uint32 msg_id = 2;
  if (this->msg_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->msg_id(), target);
  }

  // string message_name = 3;
  if (this->message_name().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_message_name().data(), static_cast<int>(this->_internal_message_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageAddLogged.message_name");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_message_name(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageAddLogged)
  return target;
}

size_t MessageAddLogged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageAddLogged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string message_name = 3;
  if (this->message_name().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message_name());
  }

  // uint32 multi_id = 1;
  if (this->multi_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->multi_id());
  }

  // uint32 msg_id = 2;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageAddLogged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageAddLogged)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageAddLogged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageAddLogged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageAddLogged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageAddLogged)
    MergeFrom(*source);
  }
}

void MessageAddLogged::MergeFrom(const MessageAddLogged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageAddLogged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.message_name().size() > 0) {

    message_name_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.message_name_);
  }
  if (from.multi_id() != 0) {
    set_multi_id(from.multi_id());
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void MessageAddLogged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageAddLogged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageAddLogged::CopyFrom(const MessageAddLogged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageAddLogged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageAddLogged::IsInitialized() const {
  return true;
}

void MessageAddLogged::InternalSwap(MessageAddLogged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  message_name_.Swap(&other->message_name_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(multi_id_, other->multi_id_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageAddLogged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageRemoveLoggedRequest::InitAsDefaultInstance() {
}
class SubscribeMessageRemoveLoggedRequest::_Internal {
 public:
};

SubscribeMessageRemoveLoggedRequest::SubscribeMessageRemoveLoggedRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
}
SubscribeMessageRemoveLoggedRequest::SubscribeMessageRemoveLoggedRequest(const SubscribeMessageRemoveLoggedRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
}

void SubscribeMessageRemoveLoggedRequest::SharedCtor() {
}

SubscribeMessageRemoveLoggedRequest::~SubscribeMessageRemoveLoggedRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  SharedDtor();
}

void SubscribeMessageRemoveLoggedRequest::SharedDtor() {
}

void SubscribeMessageRemoveLoggedRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageRemoveLoggedRequest& SubscribeMessageRemoveLoggedRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageRemoveLoggedRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageRemoveLoggedRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageRemoveLoggedRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageRemoveLoggedRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageRemoveLoggedRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  return target;
}

size_t SubscribeMessageRemoveLoggedRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageRemoveLoggedRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageRemoveLoggedRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageRemoveLoggedRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageRemoveLoggedRequest::MergeFrom(const SubscribeMessageRemoveLoggedRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageRemoveLoggedRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageRemoveLoggedRequest::CopyFrom(const SubscribeMessageRemoveLoggedRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageRemoveLoggedRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageRemoveLoggedRequest::InternalSwap(SubscribeMessageRemoveLoggedRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageRemoveLoggedRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageRemoveLoggedResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageRemoveLoggedResponse_default_instance_._instance.get_mutable()->message_remove_logged_ = const_cast< ::mavsdk::rpc::logging::MessageRemoveLogged*>(
      ::mavsdk::rpc::logging::MessageRemoveLogged::internal_default_instance());
}
class MessageRemoveLoggedResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageRemoveLogged& message_remove_logged(const MessageRemoveLoggedResponse* msg);
};

const ::mavsdk::rpc::logging::MessageRemoveLogged&
MessageRemoveLoggedResponse::_Internal::message_remove_logged(const MessageRemoveLoggedResponse* msg) {
  return *msg->message_remove_logged_;
}
MessageRemoveLoggedResponse::MessageRemoveLoggedResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
}
MessageRemoveLoggedResponse::MessageRemoveLoggedResponse(const MessageRemoveLoggedResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_remove_logged()) {
    message_remove_logged_ = new ::mavsdk::rpc::logging::MessageRemoveLogged(*from.message_remove_logged_);
  } else {
    message_remove_logged_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
}

void MessageRemoveLoggedResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageRemoveLoggedResponse_logging_2flogging_2eproto.base);
  message_remove_logged_ = nullptr;
}

MessageRemoveLoggedResponse::~MessageRemoveLoggedResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  SharedDtor();
}

void MessageRemoveLoggedResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_remove_logged_;
}

void MessageRemoveLoggedResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageRemoveLoggedResponse& MessageRemoveLoggedResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageRemoveLoggedResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageRemoveLoggedResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_remove_logged_ != nullptr) {
    delete message_remove_logged_;
  }
  message_remove_logged_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageRemoveLoggedResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageRemoveLogged message_remove_logged = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_remove_logged(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageRemoveLoggedResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageRemoveLogged message_remove_logged = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_remove_logged()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageRemoveLoggedResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageRemoveLogged message_remove_logged = 1;
  if (this->has_message_remove_logged()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_remove_logged(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  return target;
}

size_t MessageRemoveLoggedResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageRemoveLogged message_remove_logged = 1;
  if (this->has_message_remove_logged()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_remove_logged_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageRemoveLoggedResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageRemoveLoggedResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageRemoveLoggedResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
    MergeFrom(*source);
  }
}

void MessageRemoveLoggedResponse::MergeFrom(const MessageRemoveLoggedResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_remove_logged()) {
    mutable_message_remove_logged()->::mavsdk::rpc::logging::MessageRemoveLogged::MergeFrom(from.message_remove_logged());
  }
}

void MessageRemoveLoggedResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRemoveLoggedResponse::CopyFrom(const MessageRemoveLoggedResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRemoveLoggedResponse::IsInitialized() const {
  return true;
}

void MessageRemoveLoggedResponse::InternalSwap(MessageRemoveLoggedResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_remove_logged_, other->message_remove_logged_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageRemoveLoggedResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageRemoveLogged::InitAsDefaultInstance() {
}
class MessageRemoveLogged::_Internal {
 public:
};

MessageRemoveLogged::MessageRemoveLogged()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageRemoveLogged)
}
MessageRemoveLogged::MessageRemoveLogged(const MessageRemoveLogged& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageRemoveLogged)
}

void MessageRemoveLogged::SharedCtor() {
  msg_id_ = 0u;
}

MessageRemoveLogged::~MessageRemoveLogged() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageRemoveLogged)
  SharedDtor();
}

void MessageRemoveLogged::SharedDtor() {
}

void MessageRemoveLogged::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageRemoveLogged& MessageRemoveLogged::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageRemoveLogged_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageRemoveLogged::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageRemoveLogged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageRemoveLogged::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageRemoveLogged::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageRemoveLogged)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageRemoveLogged)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageRemoveLogged)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageRemoveLogged::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageRemoveLogged)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageRemoveLogged)
  return target;
}

size_t MessageRemoveLogged::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageRemoveLogged)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageRemoveLogged::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageRemoveLogged)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageRemoveLogged* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageRemoveLogged>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageRemoveLogged)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageRemoveLogged)
    MergeFrom(*source);
  }
}

void MessageRemoveLogged::MergeFrom(const MessageRemoveLogged& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageRemoveLogged)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void MessageRemoveLogged::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageRemoveLogged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageRemoveLogged::CopyFrom(const MessageRemoveLogged& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageRemoveLogged)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageRemoveLogged::IsInitialized() const {
  return true;
}

void MessageRemoveLogged::InternalSwap(MessageRemoveLogged* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageRemoveLogged::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageDataRequest::InitAsDefaultInstance() {
}
class SubscribeMessageDataRequest::_Internal {
 public:
};

SubscribeMessageDataRequest::SubscribeMessageDataRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageDataRequest)
}
SubscribeMessageDataRequest::SubscribeMessageDataRequest(const SubscribeMessageDataRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageDataRequest)
}

void SubscribeMessageDataRequest::SharedCtor() {
}

SubscribeMessageDataRequest::~SubscribeMessageDataRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  SharedDtor();
}

void SubscribeMessageDataRequest::SharedDtor() {
}

void SubscribeMessageDataRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageDataRequest& SubscribeMessageDataRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageDataRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageDataRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageDataRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageDataRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageDataRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  return target;
}

size_t SubscribeMessageDataRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageDataRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageDataRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageDataRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageDataRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageDataRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageDataRequest::MergeFrom(const SubscribeMessageDataRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageDataRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageDataRequest::CopyFrom(const SubscribeMessageDataRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageDataRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageDataRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageDataRequest::InternalSwap(SubscribeMessageDataRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageDataRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageDataResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageDataResponse_default_instance_._instance.get_mutable()->message_data_ = const_cast< ::mavsdk::rpc::logging::MessageData*>(
      ::mavsdk::rpc::logging::MessageData::internal_default_instance());
}
class MessageDataResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageData& message_data(const MessageDataResponse* msg);
};

const ::mavsdk::rpc::logging::MessageData&
MessageDataResponse::_Internal::message_data(const MessageDataResponse* msg) {
  return *msg->message_data_;
}
MessageDataResponse::MessageDataResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageDataResponse)
}
MessageDataResponse::MessageDataResponse(const MessageDataResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_data()) {
    message_data_ = new ::mavsdk::rpc::logging::MessageData(*from.message_data_);
  } else {
    message_data_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageDataResponse)
}

void MessageDataResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageDataResponse_logging_2flogging_2eproto.base);
  message_data_ = nullptr;
}

MessageDataResponse::~MessageDataResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageDataResponse)
  SharedDtor();
}

void MessageDataResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_data_;
}

void MessageDataResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageDataResponse& MessageDataResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageDataResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageDataResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_data_ != nullptr) {
    delete message_data_;
  }
  message_data_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageDataResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageData message_data = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_data(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageDataResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageDataResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageData message_data = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageDataResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageDataResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageDataResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageDataResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageData message_data = 1;
  if (this->has_message_data()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_data(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageDataResponse)
  return target;
}

size_t MessageDataResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageDataResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageData message_data = 1;
  if (this->has_message_data()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_data_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageDataResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageDataResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageDataResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageDataResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageDataResponse)
    MergeFrom(*source);
  }
}

void MessageDataResponse::MergeFrom(const MessageDataResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageDataResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_data()) {
    mutable_message_data()->::mavsdk::rpc::logging::MessageData::MergeFrom(from.message_data());
  }
}

void MessageDataResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDataResponse::CopyFrom(const MessageDataResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageDataResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDataResponse::IsInitialized() const {
  return true;
}

void MessageDataResponse::InternalSwap(MessageDataResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_data_, other->message_data_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageDataResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageData::InitAsDefaultInstance() {
}
class MessageData::_Internal {
 public:
};

MessageData::MessageData()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageData)
}
MessageData::MessageData(const MessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  msg_id_ = from.msg_id_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageData)
}

void MessageData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageData_logging_2flogging_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
}

MessageData::~MessageData() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageData)
  SharedDtor();
}

void MessageData::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageData& MessageData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageData_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  msg_id_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 msg_id = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          msg_id_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // bytes data = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(_internal_mutable_data(), ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageData::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageData)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 msg_id = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &msg_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadBytes(
                input, this->_internal_mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageData)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageData::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->msg_id(), target);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        2, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageData)
  return target;
}

size_t MessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageData)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_data());
  }

  // uint32 msg_id = 1;
  if (this->msg_id() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->msg_id());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageData)
    MergeFrom(*source);
  }
}

void MessageData::MergeFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.msg_id() != 0) {
    set_msg_id(from.msg_id());
  }
}

void MessageData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageData::CopyFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  return true;
}

void MessageData::InternalSwap(MessageData* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(msg_id_, other->msg_id_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageLoggingRequest::InitAsDefaultInstance() {
}
class SubscribeMessageLoggingRequest::_Internal {
 public:
};

SubscribeMessageLoggingRequest::SubscribeMessageLoggingRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
}
SubscribeMessageLoggingRequest::SubscribeMessageLoggingRequest(const SubscribeMessageLoggingRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
}

void SubscribeMessageLoggingRequest::SharedCtor() {
}

SubscribeMessageLoggingRequest::~SubscribeMessageLoggingRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  SharedDtor();
}

void SubscribeMessageLoggingRequest::SharedDtor() {
}

void SubscribeMessageLoggingRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageLoggingRequest& SubscribeMessageLoggingRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageLoggingRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageLoggingRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageLoggingRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageLoggingRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageLoggingRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  return target;
}

size_t SubscribeMessageLoggingRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageLoggingRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageLoggingRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageLoggingRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageLoggingRequest::MergeFrom(const SubscribeMessageLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageLoggingRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageLoggingRequest::CopyFrom(const SubscribeMessageLoggingRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageLoggingRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageLoggingRequest::InternalSwap(SubscribeMessageLoggingRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageLoggingRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageLoggingResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageLoggingResponse_default_instance_._instance.get_mutable()->message_logging_ = const_cast< ::mavsdk::rpc::logging::MessageLogging*>(
      ::mavsdk::rpc::logging::MessageLogging::internal_default_instance());
}
class MessageLoggingResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageLogging& message_logging(const MessageLoggingResponse* msg);
};

const ::mavsdk::rpc::logging::MessageLogging&
MessageLoggingResponse::_Internal::message_logging(const MessageLoggingResponse* msg) {
  return *msg->message_logging_;
}
MessageLoggingResponse::MessageLoggingResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageLoggingResponse)
}
MessageLoggingResponse::MessageLoggingResponse(const MessageLoggingResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_logging()) {
    message_logging_ = new ::mavsdk::rpc::logging::MessageLogging(*from.message_logging_);
  } else {
    message_logging_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageLoggingResponse)
}

void MessageLoggingResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageLoggingResponse_logging_2flogging_2eproto.base);
  message_logging_ = nullptr;
}

MessageLoggingResponse::~MessageLoggingResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageLoggingResponse)
  SharedDtor();
}

void MessageLoggingResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_logging_;
}

void MessageLoggingResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageLoggingResponse& MessageLoggingResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageLoggingResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageLoggingResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_logging_ != nullptr) {
    delete message_logging_;
  }
  message_logging_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageLoggingResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageLogging message_logging = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_logging(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageLoggingResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageLoggingResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageLogging message_logging = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_logging()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageLoggingResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageLoggingResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageLoggingResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageLoggingResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageLogging message_logging = 1;
  if (this->has_message_logging()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_logging(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageLoggingResponse)
  return target;
}

size_t MessageLoggingResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageLoggingResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageLogging message_logging = 1;
  if (this->has_message_logging()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_logging_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageLoggingResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageLoggingResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageLoggingResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageLoggingResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageLoggingResponse)
    MergeFrom(*source);
  }
}

void MessageLoggingResponse::MergeFrom(const MessageLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageLoggingResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_logging()) {
    mutable_message_logging()->::mavsdk::rpc::logging::MessageLogging::MergeFrom(from.message_logging());
  }
}

void MessageLoggingResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageLoggingResponse::CopyFrom(const MessageLoggingResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageLoggingResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageLoggingResponse::IsInitialized() const {
  return true;
}

void MessageLoggingResponse::InternalSwap(MessageLoggingResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_logging_, other->message_logging_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageLoggingResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageLogging::InitAsDefaultInstance() {
}
class MessageLogging::_Internal {
 public:
};

MessageLogging::MessageLogging()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageLogging)
}
MessageLogging::MessageLogging(const MessageLogging& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_data().empty()) {
    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&timestamp_, &from.timestamp_,
    static_cast<size_t>(reinterpret_cast<char*>(&log_level_) -
    reinterpret_cast<char*>(&timestamp_)) + sizeof(log_level_));
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageLogging)
}

void MessageLogging::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageLogging_logging_2flogging_2eproto.base);
  data_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(log_level_));
}

MessageLogging::~MessageLogging() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageLogging)
  SharedDtor();
}

void MessageLogging::SharedDtor() {
  data_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void MessageLogging::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageLogging& MessageLogging::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageLogging_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageLogging::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageLogging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&timestamp_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&log_level_) -
      reinterpret_cast<char*>(&timestamp_)) + sizeof(log_level_));
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageLogging::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageLogging.LogLevel log_level = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_log_level(static_cast<::mavsdk::rpc::logging::MessageLogging_LogLevel>(val));
        } else goto handle_unusual;
        continue;
      // uint64 timestamp = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          timestamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // string data = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_data(), ptr, ctx, "mavsdk.rpc.logging.MessageLogging.data");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageLogging::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageLogging)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageLogging.LogLevel log_level = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_log_level(static_cast< ::mavsdk::rpc::logging::MessageLogging_LogLevel >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 timestamp = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (16 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint64, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 3;
      case 3: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (26 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_data()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.MessageLogging.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageLogging)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageLogging)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageLogging::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageLogging)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageLogging.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->log_level(), target);
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt64ToArray(2, this->timestamp(), target);
  }

  // string data = 3;
  if (this->data().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_data().data(), static_cast<int>(this->_internal_data().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.MessageLogging.data");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_data(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageLogging)
  return target;
}

size_t MessageLogging::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageLogging)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_data());
  }

  // uint64 timestamp = 2;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt64Size(
        this->timestamp());
  }

  // .mavsdk.rpc.logging.MessageLogging.LogLevel log_level = 1;
  if (this->log_level() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->log_level());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageLogging::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageLogging)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageLogging* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageLogging>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageLogging)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageLogging)
    MergeFrom(*source);
  }
}

void MessageLogging::MergeFrom(const MessageLogging& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageLogging)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.log_level() != 0) {
    set_log_level(from.log_level());
  }
}

void MessageLogging::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageLogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageLogging::CopyFrom(const MessageLogging& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageLogging)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageLogging::IsInitialized() const {
  return true;
}

void MessageLogging::InternalSwap(MessageLogging* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  data_.Swap(&other->data_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(timestamp_, other->timestamp_);
  swap(log_level_, other->log_level_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageLogging::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SubscribeMessageDropoutRequest::InitAsDefaultInstance() {
}
class SubscribeMessageDropoutRequest::_Internal {
 public:
};

SubscribeMessageDropoutRequest::SubscribeMessageDropoutRequest()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
}
SubscribeMessageDropoutRequest::SubscribeMessageDropoutRequest(const SubscribeMessageDropoutRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
}

void SubscribeMessageDropoutRequest::SharedCtor() {
}

SubscribeMessageDropoutRequest::~SubscribeMessageDropoutRequest() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  SharedDtor();
}

void SubscribeMessageDropoutRequest::SharedDtor() {
}

void SubscribeMessageDropoutRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SubscribeMessageDropoutRequest& SubscribeMessageDropoutRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SubscribeMessageDropoutRequest_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void SubscribeMessageDropoutRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* SubscribeMessageDropoutRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      default: {
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool SubscribeMessageDropoutRequest::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
          input, tag, _internal_metadata_.mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* SubscribeMessageDropoutRequest::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  return target;
}

size_t SubscribeMessageDropoutRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SubscribeMessageDropoutRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const SubscribeMessageDropoutRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SubscribeMessageDropoutRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
    MergeFrom(*source);
  }
}

void SubscribeMessageDropoutRequest::MergeFrom(const SubscribeMessageDropoutRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SubscribeMessageDropoutRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SubscribeMessageDropoutRequest::CopyFrom(const SubscribeMessageDropoutRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubscribeMessageDropoutRequest::IsInitialized() const {
  return true;
}

void SubscribeMessageDropoutRequest::InternalSwap(SubscribeMessageDropoutRequest* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubscribeMessageDropoutRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageDropoutResponse::InitAsDefaultInstance() {
  ::mavsdk::rpc::logging::_MessageDropoutResponse_default_instance_._instance.get_mutable()->message_dropout_ = const_cast< ::mavsdk::rpc::logging::MessageDropout*>(
      ::mavsdk::rpc::logging::MessageDropout::internal_default_instance());
}
class MessageDropoutResponse::_Internal {
 public:
  static const ::mavsdk::rpc::logging::MessageDropout& message_dropout(const MessageDropoutResponse* msg);
};

const ::mavsdk::rpc::logging::MessageDropout&
MessageDropoutResponse::_Internal::message_dropout(const MessageDropoutResponse* msg) {
  return *msg->message_dropout_;
}
MessageDropoutResponse::MessageDropoutResponse()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageDropoutResponse)
}
MessageDropoutResponse::MessageDropoutResponse(const MessageDropoutResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_message_dropout()) {
    message_dropout_ = new ::mavsdk::rpc::logging::MessageDropout(*from.message_dropout_);
  } else {
    message_dropout_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageDropoutResponse)
}

void MessageDropoutResponse::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MessageDropoutResponse_logging_2flogging_2eproto.base);
  message_dropout_ = nullptr;
}

MessageDropoutResponse::~MessageDropoutResponse() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageDropoutResponse)
  SharedDtor();
}

void MessageDropoutResponse::SharedDtor() {
  if (this != internal_default_instance()) delete message_dropout_;
}

void MessageDropoutResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageDropoutResponse& MessageDropoutResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageDropoutResponse_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageDropoutResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageDropoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArenaNoVirtual() == nullptr && message_dropout_ != nullptr) {
    delete message_dropout_;
  }
  message_dropout_ = nullptr;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageDropoutResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.MessageDropout message_dropout = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(mutable_message_dropout(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageDropoutResponse::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageDropoutResponse)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.MessageDropout message_dropout = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (10 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadMessage(
               input, mutable_message_dropout()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageDropoutResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageDropoutResponse)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageDropoutResponse::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageDropoutResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageDropout message_dropout = 1;
  if (this->has_message_dropout()) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessageToArray(
        1, _Internal::message_dropout(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageDropoutResponse)
  return target;
}

size_t MessageDropoutResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageDropoutResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.MessageDropout message_dropout = 1;
  if (this->has_message_dropout()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *message_dropout_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageDropoutResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageDropoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageDropoutResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageDropoutResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageDropoutResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageDropoutResponse)
    MergeFrom(*source);
  }
}

void MessageDropoutResponse::MergeFrom(const MessageDropoutResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageDropoutResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_message_dropout()) {
    mutable_message_dropout()->::mavsdk::rpc::logging::MessageDropout::MergeFrom(from.message_dropout());
  }
}

void MessageDropoutResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageDropoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDropoutResponse::CopyFrom(const MessageDropoutResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageDropoutResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDropoutResponse::IsInitialized() const {
  return true;
}

void MessageDropoutResponse::InternalSwap(MessageDropoutResponse* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(message_dropout_, other->message_dropout_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageDropoutResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MessageDropout::InitAsDefaultInstance() {
}
class MessageDropout::_Internal {
 public:
};

MessageDropout::MessageDropout()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.MessageDropout)
}
MessageDropout::MessageDropout(const MessageDropout& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  duration_ = from.duration_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.MessageDropout)
}

void MessageDropout::SharedCtor() {
  duration_ = 0u;
}

MessageDropout::~MessageDropout() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.MessageDropout)
  SharedDtor();
}

void MessageDropout::SharedDtor() {
}

void MessageDropout::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MessageDropout& MessageDropout::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MessageDropout_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void MessageDropout::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.MessageDropout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  duration_ = 0u;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* MessageDropout::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 duration = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool MessageDropout::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.MessageDropout)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 duration = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {

          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   ::PROTOBUF_NAMESPACE_ID::uint32, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_UINT32>(
                 input, &duration_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.MessageDropout)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.MessageDropout)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* MessageDropout::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.MessageDropout)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->duration() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->duration(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.MessageDropout)
  return target;
}

size_t MessageDropout::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.MessageDropout)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 duration = 1;
  if (this->duration() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->duration());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MessageDropout::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.MessageDropout)
  GOOGLE_DCHECK_NE(&from, this);
  const MessageDropout* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MessageDropout>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.MessageDropout)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.MessageDropout)
    MergeFrom(*source);
  }
}

void MessageDropout::MergeFrom(const MessageDropout& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.MessageDropout)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.duration() != 0) {
    set_duration(from.duration());
  }
}

void MessageDropout::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.MessageDropout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MessageDropout::CopyFrom(const MessageDropout& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.MessageDropout)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageDropout::IsInitialized() const {
  return true;
}

void MessageDropout::InternalSwap(MessageDropout* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(duration_, other->duration_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageDropout::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void LoggingResult::InitAsDefaultInstance() {
}
class LoggingResult::_Internal {
 public:
};

LoggingResult::LoggingResult()
  : ::PROTOBUF_NAMESPACE_ID::Message(), _internal_metadata_(nullptr) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:mavsdk.rpc.logging.LoggingResult)
}
LoggingResult::LoggingResult(const LoggingResult& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _internal_metadata_(nullptr) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_result_str().empty()) {
    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:mavsdk.rpc.logging.LoggingResult)
}

void LoggingResult::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_LoggingResult_logging_2flogging_2eproto.base);
  result_str_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
}

LoggingResult::~LoggingResult() {
  // @@protoc_insertion_point(destructor:mavsdk.rpc.logging.LoggingResult)
  SharedDtor();
}

void LoggingResult::SharedDtor() {
  result_str_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void LoggingResult::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const LoggingResult& LoggingResult::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_LoggingResult_logging_2flogging_2eproto.base);
  return *internal_default_instance();
}


void LoggingResult::Clear() {
// @@protoc_insertion_point(message_clear_start:mavsdk.rpc.logging.LoggingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  _internal_metadata_.Clear();
}

#if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
const char* LoggingResult::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint(&ptr);
          CHK_(ptr);
          set_result(static_cast<::mavsdk::rpc::logging::LoggingResult_Result>(val));
        } else goto handle_unusual;
        continue;
      // string result_str = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParserUTF8(_internal_mutable_result_str(), ptr, ctx, "mavsdk.rpc.logging.LoggingResult.result_str");
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag, &_internal_metadata_, ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}
#else  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
bool LoggingResult::MergePartialFromCodedStream(
    ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!PROTOBUF_PREDICT_TRUE(EXPRESSION)) goto failure
  ::PROTOBUF_NAMESPACE_ID::uint32 tag;
  // @@protoc_insertion_point(parse_start:mavsdk.rpc.logging.LoggingResult)
  for (;;) {
    ::std::pair<::PROTOBUF_NAMESPACE_ID::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
      case 1: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (8 & 0xFF)) {
          int value = 0;
          DO_((::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadPrimitive<
                   int, ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_result(static_cast< ::mavsdk::rpc::logging::LoggingResult_Result >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string result_str = 2;
      case 2: {
        if (static_cast< ::PROTOBUF_NAMESPACE_ID::uint8>(tag) == (18 & 0xFF)) {
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::ReadString(
                input, this->_internal_mutable_result_str()));
          DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
            this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
            ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE,
            "mavsdk.rpc.logging.LoggingResult.result_str"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:mavsdk.rpc.logging.LoggingResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:mavsdk.rpc.logging.LoggingResult)
  return false;
#undef DO_
}
#endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER

::PROTOBUF_NAMESPACE_ID::uint8* LoggingResult::InternalSerializeWithCachedSizesToArray(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:mavsdk.rpc.logging.LoggingResult)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
  if (this->result() != 0) {
    stream->EnsureSpace(&target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->result(), target);
  }

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_result_str().data(), static_cast<int>(this->_internal_result_str().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "mavsdk.rpc.logging.LoggingResult.result_str");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_result_str(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields(), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:mavsdk.rpc.logging.LoggingResult)
  return target;
}

size_t LoggingResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:mavsdk.rpc.logging.LoggingResult)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string result_str = 2;
  if (this->result_str().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_result_str());
  }

  // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
  if (this->result() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->result());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void LoggingResult::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:mavsdk.rpc.logging.LoggingResult)
  GOOGLE_DCHECK_NE(&from, this);
  const LoggingResult* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<LoggingResult>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:mavsdk.rpc.logging.LoggingResult)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:mavsdk.rpc.logging.LoggingResult)
    MergeFrom(*source);
  }
}

void LoggingResult::MergeFrom(const LoggingResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:mavsdk.rpc.logging.LoggingResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.result_str().size() > 0) {

    result_str_.AssignWithDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from.result_str_);
  }
  if (from.result() != 0) {
    set_result(from.result());
  }
}

void LoggingResult::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:mavsdk.rpc.logging.LoggingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoggingResult::CopyFrom(const LoggingResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:mavsdk.rpc.logging.LoggingResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoggingResult::IsInitialized() const {
  return true;
}

void LoggingResult::InternalSwap(LoggingResult* other) {
  using std::swap;
  _internal_metadata_.Swap(&other->_internal_metadata_);
  result_str_.Swap(&other->result_str_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata LoggingResult::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StartLoggingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StartLoggingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StartLoggingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StartLoggingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StartLoggingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StartLoggingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StopLoggingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StopLoggingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StopLoggingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::StopLoggingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::StopLoggingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::StopLoggingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageFlagBitsResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageFlagBitsResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageFlagBitsResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageFlagBits* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageFlagBits >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageFlagBits >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageFormatRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageFormatRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageFormatResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageFormatResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageFormatResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageFormat* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageFormat >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageFormat >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageInfoRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageInfoRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageInfoResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageInfoResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageInfoResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageInfo* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageInfo >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageInfo >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageInfoMultipleResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageInfoMultipleResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageInfoMultipleResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageInfoMultiple* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageInfoMultiple >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageInfoMultiple >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageParameterRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageParameterRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageParameterResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageParameterResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageParameterResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageParameter* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageParameter >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageParameter >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageAddLoggedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageAddLoggedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageAddLoggedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageAddLogged* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageAddLogged >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageAddLogged >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageRemoveLoggedResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageRemoveLogged* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageRemoveLogged >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageRemoveLogged >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageDataRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageDataRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageDataRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageDataResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageDataResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageDataResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageData* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageData >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageLoggingResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageLoggingResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageLoggingResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageLogging* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageLogging >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageLogging >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageDropoutResponse* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageDropoutResponse >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageDropoutResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::MessageDropout* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::MessageDropout >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::MessageDropout >(arena);
}
template<> PROTOBUF_NOINLINE ::mavsdk::rpc::logging::LoggingResult* Arena::CreateMaybeMessage< ::mavsdk::rpc::logging::LoggingResult >(Arena* arena) {
  return Arena::CreateInternal< ::mavsdk::rpc::logging::LoggingResult >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
