// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: logging/logging.proto

#include "logging/logging.pb.h"
#include "logging/logging.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace logging {

static const char* LoggingService_method_names[] = {
  "/mavsdk.rpc.logging.LoggingService/StartLogging",
  "/mavsdk.rpc.logging.LoggingService/StopLogging",
  "/mavsdk.rpc.logging.LoggingService/SubscribeLoggingRaw",
};

std::unique_ptr< LoggingService::Stub> LoggingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoggingService::Stub> stub(new LoggingService::Stub(channel));
  return stub;
}

LoggingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartLogging_(LoggingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopLogging_(LoggingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeLoggingRaw_(LoggingService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status LoggingService::Stub::StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::mavsdk::rpc::logging::StartLoggingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartLogging_, context, request, response);
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, reactor);
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* LoggingService::Stub::AsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StartLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StartLogging_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* LoggingService::Stub::PrepareAsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StartLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StartLogging_, context, request, false);
}

::grpc::Status LoggingService::Stub::StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::mavsdk::rpc::logging::StopLoggingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopLogging_, context, request, response);
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, reactor);
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* LoggingService::Stub::AsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StopLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StopLogging_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* LoggingService::Stub::PrepareAsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StopLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StopLogging_, context, request, false);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::LoggingRawResponse>* LoggingService::Stub::SubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::LoggingRawResponse>::Create(channel_.get(), rpcmethod_SubscribeLoggingRaw_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeLoggingRaw(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::LoggingRawResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::LoggingRawResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeLoggingRaw_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>* LoggingService::Stub::AsyncSubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::LoggingRawResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeLoggingRaw_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>* LoggingService::Stub::PrepareAsyncSubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::LoggingRawResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeLoggingRaw_, context, request, false, nullptr);
}

LoggingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingService::Service, ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>(
          std::mem_fn(&LoggingService::Service::StartLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingService::Service, ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>(
          std::mem_fn(&LoggingService::Service::StopLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeLoggingRawRequest, ::mavsdk::rpc::logging::LoggingRawResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeLoggingRaw), this)));
}

LoggingService::Service::~Service() {
}

::grpc::Status LoggingService::Service::StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace logging

