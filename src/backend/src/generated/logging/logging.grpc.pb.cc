// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: logging/logging.proto

#include "logging/logging.pb.h"
#include "logging/logging.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace mavsdk {
namespace rpc {
namespace logging {

static const char* LoggingService_method_names[] = {
  "/mavsdk.rpc.logging.LoggingService/StartLogging",
  "/mavsdk.rpc.logging.LoggingService/StopLogging",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageFlagBits",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageFormat",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageInfo",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageInfoMultiple",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageParameter",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageAddLogged",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageRemoveLogged",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageData",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageLogging",
  "/mavsdk.rpc.logging.LoggingService/SubscribeMessageDropout",
};

std::unique_ptr< LoggingService::Stub> LoggingService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< LoggingService::Stub> stub(new LoggingService::Stub(channel));
  return stub;
}

LoggingService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_StartLogging_(LoggingService_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StopLogging_(LoggingService_method_names[1], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_SubscribeMessageFlagBits_(LoggingService_method_names[2], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageFormat_(LoggingService_method_names[3], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageInfo_(LoggingService_method_names[4], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageInfoMultiple_(LoggingService_method_names[5], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageParameter_(LoggingService_method_names[6], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageAddLogged_(LoggingService_method_names[7], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageRemoveLogged_(LoggingService_method_names[8], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageData_(LoggingService_method_names[9], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageLogging_(LoggingService_method_names[10], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_SubscribeMessageDropout_(LoggingService_method_names[11], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status LoggingService::Stub::StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::mavsdk::rpc::logging::StartLoggingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StartLogging_, context, request, response);
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, reactor);
}

void LoggingService::Stub::experimental_async::StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StartLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* LoggingService::Stub::AsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StartLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StartLogging_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* LoggingService::Stub::PrepareAsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StartLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StartLogging_, context, request, false);
}

::grpc::Status LoggingService::Stub::StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::mavsdk::rpc::logging::StopLoggingResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_StopLogging_, context, request, response);
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, std::move(f));
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, reactor);
}

void LoggingService::Stub::experimental_async::StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create(stub_->channel_.get(), stub_->rpcmethod_StopLogging_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* LoggingService::Stub::AsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StopLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StopLogging_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* LoggingService::Stub::PrepareAsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::mavsdk::rpc::logging::StopLoggingResponse>::Create(channel_.get(), cq, rpcmethod_StopLogging_, context, request, false);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* LoggingService::Stub::SubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageFlagBitsResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageFlagBits_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageFlagBits(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageFlagBitsResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageFlagBits_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* LoggingService::Stub::AsyncSubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageFlagBitsResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageFlagBits_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageFlagBitsResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageFlagBits_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFormatResponse>* LoggingService::Stub::SubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageFormatResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageFormat_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageFormat(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageFormatResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageFormatResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageFormat_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>* LoggingService::Stub::AsyncSubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageFormatResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageFormat_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageFormatResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageFormat_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoResponse>* LoggingService::Stub::SubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageInfoResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageInfo_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageInfo(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageInfoResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageInfoResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageInfo_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>* LoggingService::Stub::AsyncSubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageInfoResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageInfo_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageInfoResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageInfo_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* LoggingService::Stub::SubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageInfoMultiple_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageInfoMultiple(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageInfoMultiple_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* LoggingService::Stub::AsyncSubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageInfoMultiple_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageInfoMultiple_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageParameterResponse>* LoggingService::Stub::SubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageParameterResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageParameter_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageParameter(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageParameterResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageParameterResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageParameter_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>* LoggingService::Stub::AsyncSubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageParameterResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageParameter_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageParameterResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageParameter_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* LoggingService::Stub::SubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageAddLoggedResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageAddLogged_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageAddLogged(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageAddLoggedResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageAddLogged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* LoggingService::Stub::AsyncSubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageAddLoggedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageAddLogged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageAddLoggedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageAddLogged_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* LoggingService::Stub::SubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageRemoveLogged_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageRemoveLogged(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageRemoveLogged_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* LoggingService::Stub::AsyncSubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageRemoveLogged_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageRemoveLogged_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDataResponse>* LoggingService::Stub::SubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageDataResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageData_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageData(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageDataResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageDataResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageData_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>* LoggingService::Stub::AsyncSubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageDataResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageData_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageDataResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageData_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageLoggingResponse>* LoggingService::Stub::SubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageLoggingResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageLogging_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageLogging(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageLoggingResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageLoggingResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageLogging_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>* LoggingService::Stub::AsyncSubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageLoggingResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageLogging_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageLoggingResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageLogging_, context, request, false, nullptr);
}

::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDropoutResponse>* LoggingService::Stub::SubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::mavsdk::rpc::logging::MessageDropoutResponse>::Create(channel_.get(), rpcmethod_SubscribeMessageDropout_, context, request);
}

void LoggingService::Stub::experimental_async::SubscribeMessageDropout(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageDropoutResponse>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::mavsdk::rpc::logging::MessageDropoutResponse>::Create(stub_->channel_.get(), stub_->rpcmethod_SubscribeMessageDropout_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>* LoggingService::Stub::AsyncSubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageDropoutResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageDropout_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>* LoggingService::Stub::PrepareAsyncSubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::mavsdk::rpc::logging::MessageDropoutResponse>::Create(channel_.get(), cq, rpcmethod_SubscribeMessageDropout_, context, request, false, nullptr);
}

LoggingService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingService::Service, ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>(
          std::mem_fn(&LoggingService::Service::StartLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< LoggingService::Service, ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>(
          std::mem_fn(&LoggingService::Service::StopLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[2],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest, ::mavsdk::rpc::logging::MessageFlagBitsResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageFlagBits), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[3],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageFormatRequest, ::mavsdk::rpc::logging::MessageFormatResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageFormat), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[4],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageInfoRequest, ::mavsdk::rpc::logging::MessageInfoResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageInfo), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[5],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest, ::mavsdk::rpc::logging::MessageInfoMultipleResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageInfoMultiple), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[6],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageParameterRequest, ::mavsdk::rpc::logging::MessageParameterResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageParameter), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[7],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest, ::mavsdk::rpc::logging::MessageAddLoggedResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageAddLogged), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[8],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest, ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageRemoveLogged), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[9],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageDataRequest, ::mavsdk::rpc::logging::MessageDataResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageData), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[10],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest, ::mavsdk::rpc::logging::MessageLoggingResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageLogging), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      LoggingService_method_names[11],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< LoggingService::Service, ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest, ::mavsdk::rpc::logging::MessageDropoutResponse>(
          std::mem_fn(&LoggingService::Service::SubscribeMessageDropout), this)));
}

LoggingService::Service::~Service() {
}

::grpc::Status LoggingService::Service::StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status LoggingService::Service::SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace mavsdk
}  // namespace rpc
}  // namespace logging

