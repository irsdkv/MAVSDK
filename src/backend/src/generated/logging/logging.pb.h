// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: logging/logging.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_logging_2flogging_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_logging_2flogging_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3009000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3009001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_logging_2flogging_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_logging_2flogging_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[35]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_logging_2flogging_2eproto;
namespace mavsdk {
namespace rpc {
namespace logging {
class LoggingResult;
class LoggingResultDefaultTypeInternal;
extern LoggingResultDefaultTypeInternal _LoggingResult_default_instance_;
class MessageAddLogged;
class MessageAddLoggedDefaultTypeInternal;
extern MessageAddLoggedDefaultTypeInternal _MessageAddLogged_default_instance_;
class MessageAddLoggedResponse;
class MessageAddLoggedResponseDefaultTypeInternal;
extern MessageAddLoggedResponseDefaultTypeInternal _MessageAddLoggedResponse_default_instance_;
class MessageData;
class MessageDataDefaultTypeInternal;
extern MessageDataDefaultTypeInternal _MessageData_default_instance_;
class MessageDataResponse;
class MessageDataResponseDefaultTypeInternal;
extern MessageDataResponseDefaultTypeInternal _MessageDataResponse_default_instance_;
class MessageDropout;
class MessageDropoutDefaultTypeInternal;
extern MessageDropoutDefaultTypeInternal _MessageDropout_default_instance_;
class MessageDropoutResponse;
class MessageDropoutResponseDefaultTypeInternal;
extern MessageDropoutResponseDefaultTypeInternal _MessageDropoutResponse_default_instance_;
class MessageFlagBits;
class MessageFlagBitsDefaultTypeInternal;
extern MessageFlagBitsDefaultTypeInternal _MessageFlagBits_default_instance_;
class MessageFlagBitsResponse;
class MessageFlagBitsResponseDefaultTypeInternal;
extern MessageFlagBitsResponseDefaultTypeInternal _MessageFlagBitsResponse_default_instance_;
class MessageFormat;
class MessageFormatDefaultTypeInternal;
extern MessageFormatDefaultTypeInternal _MessageFormat_default_instance_;
class MessageFormatResponse;
class MessageFormatResponseDefaultTypeInternal;
extern MessageFormatResponseDefaultTypeInternal _MessageFormatResponse_default_instance_;
class MessageInfo;
class MessageInfoDefaultTypeInternal;
extern MessageInfoDefaultTypeInternal _MessageInfo_default_instance_;
class MessageInfoMultiple;
class MessageInfoMultipleDefaultTypeInternal;
extern MessageInfoMultipleDefaultTypeInternal _MessageInfoMultiple_default_instance_;
class MessageInfoMultipleResponse;
class MessageInfoMultipleResponseDefaultTypeInternal;
extern MessageInfoMultipleResponseDefaultTypeInternal _MessageInfoMultipleResponse_default_instance_;
class MessageInfoResponse;
class MessageInfoResponseDefaultTypeInternal;
extern MessageInfoResponseDefaultTypeInternal _MessageInfoResponse_default_instance_;
class MessageLogging;
class MessageLoggingDefaultTypeInternal;
extern MessageLoggingDefaultTypeInternal _MessageLogging_default_instance_;
class MessageLoggingResponse;
class MessageLoggingResponseDefaultTypeInternal;
extern MessageLoggingResponseDefaultTypeInternal _MessageLoggingResponse_default_instance_;
class MessageParameter;
class MessageParameterDefaultTypeInternal;
extern MessageParameterDefaultTypeInternal _MessageParameter_default_instance_;
class MessageParameterResponse;
class MessageParameterResponseDefaultTypeInternal;
extern MessageParameterResponseDefaultTypeInternal _MessageParameterResponse_default_instance_;
class MessageRemoveLogged;
class MessageRemoveLoggedDefaultTypeInternal;
extern MessageRemoveLoggedDefaultTypeInternal _MessageRemoveLogged_default_instance_;
class MessageRemoveLoggedResponse;
class MessageRemoveLoggedResponseDefaultTypeInternal;
extern MessageRemoveLoggedResponseDefaultTypeInternal _MessageRemoveLoggedResponse_default_instance_;
class StartLoggingRequest;
class StartLoggingRequestDefaultTypeInternal;
extern StartLoggingRequestDefaultTypeInternal _StartLoggingRequest_default_instance_;
class StartLoggingResponse;
class StartLoggingResponseDefaultTypeInternal;
extern StartLoggingResponseDefaultTypeInternal _StartLoggingResponse_default_instance_;
class StopLoggingRequest;
class StopLoggingRequestDefaultTypeInternal;
extern StopLoggingRequestDefaultTypeInternal _StopLoggingRequest_default_instance_;
class StopLoggingResponse;
class StopLoggingResponseDefaultTypeInternal;
extern StopLoggingResponseDefaultTypeInternal _StopLoggingResponse_default_instance_;
class SubscribeMessageAddLoggedRequest;
class SubscribeMessageAddLoggedRequestDefaultTypeInternal;
extern SubscribeMessageAddLoggedRequestDefaultTypeInternal _SubscribeMessageAddLoggedRequest_default_instance_;
class SubscribeMessageDataRequest;
class SubscribeMessageDataRequestDefaultTypeInternal;
extern SubscribeMessageDataRequestDefaultTypeInternal _SubscribeMessageDataRequest_default_instance_;
class SubscribeMessageDropoutRequest;
class SubscribeMessageDropoutRequestDefaultTypeInternal;
extern SubscribeMessageDropoutRequestDefaultTypeInternal _SubscribeMessageDropoutRequest_default_instance_;
class SubscribeMessageFlagBitsRequest;
class SubscribeMessageFlagBitsRequestDefaultTypeInternal;
extern SubscribeMessageFlagBitsRequestDefaultTypeInternal _SubscribeMessageFlagBitsRequest_default_instance_;
class SubscribeMessageFormatRequest;
class SubscribeMessageFormatRequestDefaultTypeInternal;
extern SubscribeMessageFormatRequestDefaultTypeInternal _SubscribeMessageFormatRequest_default_instance_;
class SubscribeMessageInfoMultipleRequest;
class SubscribeMessageInfoMultipleRequestDefaultTypeInternal;
extern SubscribeMessageInfoMultipleRequestDefaultTypeInternal _SubscribeMessageInfoMultipleRequest_default_instance_;
class SubscribeMessageInfoRequest;
class SubscribeMessageInfoRequestDefaultTypeInternal;
extern SubscribeMessageInfoRequestDefaultTypeInternal _SubscribeMessageInfoRequest_default_instance_;
class SubscribeMessageLoggingRequest;
class SubscribeMessageLoggingRequestDefaultTypeInternal;
extern SubscribeMessageLoggingRequestDefaultTypeInternal _SubscribeMessageLoggingRequest_default_instance_;
class SubscribeMessageParameterRequest;
class SubscribeMessageParameterRequestDefaultTypeInternal;
extern SubscribeMessageParameterRequestDefaultTypeInternal _SubscribeMessageParameterRequest_default_instance_;
class SubscribeMessageRemoveLoggedRequest;
class SubscribeMessageRemoveLoggedRequestDefaultTypeInternal;
extern SubscribeMessageRemoveLoggedRequestDefaultTypeInternal _SubscribeMessageRemoveLoggedRequest_default_instance_;
}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk
PROTOBUF_NAMESPACE_OPEN
template<> ::mavsdk::rpc::logging::LoggingResult* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::LoggingResult>(Arena*);
template<> ::mavsdk::rpc::logging::MessageAddLogged* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageAddLogged>(Arena*);
template<> ::mavsdk::rpc::logging::MessageAddLoggedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageAddLoggedResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageData* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageData>(Arena*);
template<> ::mavsdk::rpc::logging::MessageDataResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageDataResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageDropout* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageDropout>(Arena*);
template<> ::mavsdk::rpc::logging::MessageDropoutResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageDropoutResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageFlagBits* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageFlagBits>(Arena*);
template<> ::mavsdk::rpc::logging::MessageFlagBitsResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageFlagBitsResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageFormat* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageFormat>(Arena*);
template<> ::mavsdk::rpc::logging::MessageFormatResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageFormatResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageInfo* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageInfo>(Arena*);
template<> ::mavsdk::rpc::logging::MessageInfoMultiple* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageInfoMultiple>(Arena*);
template<> ::mavsdk::rpc::logging::MessageInfoMultipleResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageInfoMultipleResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageInfoResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageInfoResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageLogging* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageLogging>(Arena*);
template<> ::mavsdk::rpc::logging::MessageLoggingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageLoggingResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageParameter* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageParameter>(Arena*);
template<> ::mavsdk::rpc::logging::MessageParameterResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageParameterResponse>(Arena*);
template<> ::mavsdk::rpc::logging::MessageRemoveLogged* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageRemoveLogged>(Arena*);
template<> ::mavsdk::rpc::logging::MessageRemoveLoggedResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::MessageRemoveLoggedResponse>(Arena*);
template<> ::mavsdk::rpc::logging::StartLoggingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::StartLoggingRequest>(Arena*);
template<> ::mavsdk::rpc::logging::StartLoggingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::StartLoggingResponse>(Arena*);
template<> ::mavsdk::rpc::logging::StopLoggingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::StopLoggingRequest>(Arena*);
template<> ::mavsdk::rpc::logging::StopLoggingResponse* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::StopLoggingResponse>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageDataRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageDataRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageDropoutRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageFormatRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageInfoRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageLoggingRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageParameterRequest>(Arena*);
template<> ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* Arena::CreateMaybeMessage<::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace mavsdk {
namespace rpc {
namespace logging {

enum MessageLogging_LogLevel : int {
  MessageLogging_LogLevel_UNDEF = 0,
  MessageLogging_LogLevel_EMERG = 48,
  MessageLogging_LogLevel_ALERT = 49,
  MessageLogging_LogLevel_CRIT = 50,
  MessageLogging_LogLevel_ERR = 51,
  MessageLogging_LogLevel_WARNING = 52,
  MessageLogging_LogLevel_NOTICE = 53,
  MessageLogging_LogLevel_INFO = 54,
  MessageLogging_LogLevel_DEBUG = 55,
  MessageLogging_LogLevel_MessageLogging_LogLevel_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  MessageLogging_LogLevel_MessageLogging_LogLevel_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool MessageLogging_LogLevel_IsValid(int value);
constexpr MessageLogging_LogLevel MessageLogging_LogLevel_LogLevel_MIN = MessageLogging_LogLevel_UNDEF;
constexpr MessageLogging_LogLevel MessageLogging_LogLevel_LogLevel_MAX = MessageLogging_LogLevel_DEBUG;
constexpr int MessageLogging_LogLevel_LogLevel_ARRAYSIZE = MessageLogging_LogLevel_LogLevel_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageLogging_LogLevel_descriptor();
template<typename T>
inline const std::string& MessageLogging_LogLevel_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MessageLogging_LogLevel>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MessageLogging_LogLevel_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MessageLogging_LogLevel_descriptor(), enum_t_value);
}
inline bool MessageLogging_LogLevel_Parse(
    const std::string& name, MessageLogging_LogLevel* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MessageLogging_LogLevel>(
    MessageLogging_LogLevel_descriptor(), name, value);
}
enum LoggingResult_Result : int {
  LoggingResult_Result_UNKNOWN = 0,
  LoggingResult_Result_SUCCESS = 1,
  LoggingResult_Result_NO_SYSTEM = 2,
  LoggingResult_Result_CONNECTION_ERROR = 3,
  LoggingResult_Result_BUSY = 4,
  LoggingResult_Result_COMMAND_DENIED = 5,
  LoggingResult_Result_TIMEOUT = 8,
  LoggingResult_Result_LoggingResult_Result_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::min(),
  LoggingResult_Result_LoggingResult_Result_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<::PROTOBUF_NAMESPACE_ID::int32>::max()
};
bool LoggingResult_Result_IsValid(int value);
constexpr LoggingResult_Result LoggingResult_Result_Result_MIN = LoggingResult_Result_UNKNOWN;
constexpr LoggingResult_Result LoggingResult_Result_Result_MAX = LoggingResult_Result_TIMEOUT;
constexpr int LoggingResult_Result_Result_ARRAYSIZE = LoggingResult_Result_Result_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* LoggingResult_Result_descriptor();
template<typename T>
inline const std::string& LoggingResult_Result_Name(T enum_t_value) {
  static_assert(::std::is_same<T, LoggingResult_Result>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function LoggingResult_Result_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    LoggingResult_Result_descriptor(), enum_t_value);
}
inline bool LoggingResult_Result_Parse(
    const std::string& name, LoggingResult_Result* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<LoggingResult_Result>(
    LoggingResult_Result_descriptor(), name, value);
}
// ===================================================================

class StartLoggingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.StartLoggingRequest) */ {
 public:
  StartLoggingRequest();
  virtual ~StartLoggingRequest();

  StartLoggingRequest(const StartLoggingRequest& from);
  StartLoggingRequest(StartLoggingRequest&& from) noexcept
    : StartLoggingRequest() {
    *this = ::std::move(from);
  }

  inline StartLoggingRequest& operator=(const StartLoggingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLoggingRequest& operator=(StartLoggingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartLoggingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartLoggingRequest* internal_default_instance() {
    return reinterpret_cast<const StartLoggingRequest*>(
               &_StartLoggingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(StartLoggingRequest& a, StartLoggingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLoggingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartLoggingRequest* New() const final {
    return CreateMaybeMessage<StartLoggingRequest>(nullptr);
  }

  StartLoggingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartLoggingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartLoggingRequest& from);
  void MergeFrom(const StartLoggingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartLoggingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.StartLoggingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.StartLoggingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class StartLoggingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.StartLoggingResponse) */ {
 public:
  StartLoggingResponse();
  virtual ~StartLoggingResponse();

  StartLoggingResponse(const StartLoggingResponse& from);
  StartLoggingResponse(StartLoggingResponse&& from) noexcept
    : StartLoggingResponse() {
    *this = ::std::move(from);
  }

  inline StartLoggingResponse& operator=(const StartLoggingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StartLoggingResponse& operator=(StartLoggingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StartLoggingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StartLoggingResponse* internal_default_instance() {
    return reinterpret_cast<const StartLoggingResponse*>(
               &_StartLoggingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(StartLoggingResponse& a, StartLoggingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StartLoggingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StartLoggingResponse* New() const final {
    return CreateMaybeMessage<StartLoggingResponse>(nullptr);
  }

  StartLoggingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StartLoggingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StartLoggingResponse& from);
  void MergeFrom(const StartLoggingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StartLoggingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.StartLoggingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoggingResultFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  bool has_logging_result() const;
  private:
  bool _internal_has_logging_result() const;
  public:
  void clear_logging_result();
  const ::mavsdk::rpc::logging::LoggingResult& logging_result() const;
  ::mavsdk::rpc::logging::LoggingResult* release_logging_result();
  ::mavsdk::rpc::logging::LoggingResult* mutable_logging_result();
  void set_allocated_logging_result(::mavsdk::rpc::logging::LoggingResult* logging_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.StartLoggingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::LoggingResult* logging_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class StopLoggingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.StopLoggingRequest) */ {
 public:
  StopLoggingRequest();
  virtual ~StopLoggingRequest();

  StopLoggingRequest(const StopLoggingRequest& from);
  StopLoggingRequest(StopLoggingRequest&& from) noexcept
    : StopLoggingRequest() {
    *this = ::std::move(from);
  }

  inline StopLoggingRequest& operator=(const StopLoggingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopLoggingRequest& operator=(StopLoggingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopLoggingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopLoggingRequest* internal_default_instance() {
    return reinterpret_cast<const StopLoggingRequest*>(
               &_StopLoggingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StopLoggingRequest& a, StopLoggingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(StopLoggingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopLoggingRequest* New() const final {
    return CreateMaybeMessage<StopLoggingRequest>(nullptr);
  }

  StopLoggingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopLoggingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopLoggingRequest& from);
  void MergeFrom(const StopLoggingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopLoggingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.StopLoggingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.StopLoggingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class StopLoggingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.StopLoggingResponse) */ {
 public:
  StopLoggingResponse();
  virtual ~StopLoggingResponse();

  StopLoggingResponse(const StopLoggingResponse& from);
  StopLoggingResponse(StopLoggingResponse&& from) noexcept
    : StopLoggingResponse() {
    *this = ::std::move(from);
  }

  inline StopLoggingResponse& operator=(const StopLoggingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline StopLoggingResponse& operator=(StopLoggingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const StopLoggingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const StopLoggingResponse* internal_default_instance() {
    return reinterpret_cast<const StopLoggingResponse*>(
               &_StopLoggingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(StopLoggingResponse& a, StopLoggingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(StopLoggingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StopLoggingResponse* New() const final {
    return CreateMaybeMessage<StopLoggingResponse>(nullptr);
  }

  StopLoggingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StopLoggingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StopLoggingResponse& from);
  void MergeFrom(const StopLoggingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StopLoggingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.StopLoggingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLoggingResultFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.LoggingResult logging_result = 1;
  bool has_logging_result() const;
  private:
  bool _internal_has_logging_result() const;
  public:
  void clear_logging_result();
  const ::mavsdk::rpc::logging::LoggingResult& logging_result() const;
  ::mavsdk::rpc::logging::LoggingResult* release_logging_result();
  ::mavsdk::rpc::logging::LoggingResult* mutable_logging_result();
  void set_allocated_logging_result(::mavsdk::rpc::logging::LoggingResult* logging_result);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.StopLoggingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::LoggingResult* logging_result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageFlagBitsRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest) */ {
 public:
  SubscribeMessageFlagBitsRequest();
  virtual ~SubscribeMessageFlagBitsRequest();

  SubscribeMessageFlagBitsRequest(const SubscribeMessageFlagBitsRequest& from);
  SubscribeMessageFlagBitsRequest(SubscribeMessageFlagBitsRequest&& from) noexcept
    : SubscribeMessageFlagBitsRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageFlagBitsRequest& operator=(const SubscribeMessageFlagBitsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageFlagBitsRequest& operator=(SubscribeMessageFlagBitsRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageFlagBitsRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageFlagBitsRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageFlagBitsRequest*>(
               &_SubscribeMessageFlagBitsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SubscribeMessageFlagBitsRequest& a, SubscribeMessageFlagBitsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageFlagBitsRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageFlagBitsRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageFlagBitsRequest>(nullptr);
  }

  SubscribeMessageFlagBitsRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageFlagBitsRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageFlagBitsRequest& from);
  void MergeFrom(const SubscribeMessageFlagBitsRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageFlagBitsRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageFlagBitsRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageFlagBitsResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageFlagBitsResponse) */ {
 public:
  MessageFlagBitsResponse();
  virtual ~MessageFlagBitsResponse();

  MessageFlagBitsResponse(const MessageFlagBitsResponse& from);
  MessageFlagBitsResponse(MessageFlagBitsResponse&& from) noexcept
    : MessageFlagBitsResponse() {
    *this = ::std::move(from);
  }

  inline MessageFlagBitsResponse& operator=(const MessageFlagBitsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageFlagBitsResponse& operator=(MessageFlagBitsResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageFlagBitsResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageFlagBitsResponse* internal_default_instance() {
    return reinterpret_cast<const MessageFlagBitsResponse*>(
               &_MessageFlagBitsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(MessageFlagBitsResponse& a, MessageFlagBitsResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageFlagBitsResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageFlagBitsResponse* New() const final {
    return CreateMaybeMessage<MessageFlagBitsResponse>(nullptr);
  }

  MessageFlagBitsResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageFlagBitsResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageFlagBitsResponse& from);
  void MergeFrom(const MessageFlagBitsResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageFlagBitsResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageFlagBitsResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFlagBitsFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageFlagBits message_flag_bits = 1;
  bool has_message_flag_bits() const;
  private:
  bool _internal_has_message_flag_bits() const;
  public:
  void clear_message_flag_bits();
  const ::mavsdk::rpc::logging::MessageFlagBits& message_flag_bits() const;
  ::mavsdk::rpc::logging::MessageFlagBits* release_message_flag_bits();
  ::mavsdk::rpc::logging::MessageFlagBits* mutable_message_flag_bits();
  void set_allocated_message_flag_bits(::mavsdk::rpc::logging::MessageFlagBits* message_flag_bits);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageFlagBitsResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageFlagBits* message_flag_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageFlagBits :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageFlagBits) */ {
 public:
  MessageFlagBits();
  virtual ~MessageFlagBits();

  MessageFlagBits(const MessageFlagBits& from);
  MessageFlagBits(MessageFlagBits&& from) noexcept
    : MessageFlagBits() {
    *this = ::std::move(from);
  }

  inline MessageFlagBits& operator=(const MessageFlagBits& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageFlagBits& operator=(MessageFlagBits&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageFlagBits& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageFlagBits* internal_default_instance() {
    return reinterpret_cast<const MessageFlagBits*>(
               &_MessageFlagBits_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(MessageFlagBits& a, MessageFlagBits& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageFlagBits* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageFlagBits* New() const final {
    return CreateMaybeMessage<MessageFlagBits>(nullptr);
  }

  MessageFlagBits* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageFlagBits>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageFlagBits& from);
  void MergeFrom(const MessageFlagBits& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageFlagBits* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageFlagBits";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCompatFlagsFieldNumber = 1,
    kIncompatFlagsFieldNumber = 2,
    kAppendedOffsetsFieldNumber = 3,
  };
  // repeated uint32 compat_flags = 1;
  int compat_flags_size() const;
  void clear_compat_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 compat_flags(int index) const;
  void set_compat_flags(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_compat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      compat_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_compat_flags();

  // repeated uint32 incompat_flags = 2;
  int incompat_flags_size() const;
  void clear_incompat_flags();
  ::PROTOBUF_NAMESPACE_ID::uint32 incompat_flags(int index) const;
  void set_incompat_flags(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value);
  void add_incompat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
      incompat_flags() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
      mutable_incompat_flags();

  // repeated uint64 appended_offsets = 3;
  int appended_offsets_size() const;
  void clear_appended_offsets();
  ::PROTOBUF_NAMESPACE_ID::uint64 appended_offsets(int index) const;
  void set_appended_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value);
  void add_appended_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
      appended_offsets() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
      mutable_appended_offsets();

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageFlagBits)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > compat_flags_;
  mutable std::atomic<int> _compat_flags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 > incompat_flags_;
  mutable std::atomic<int> _incompat_flags_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 > appended_offsets_;
  mutable std::atomic<int> _appended_offsets_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageFormatRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageFormatRequest) */ {
 public:
  SubscribeMessageFormatRequest();
  virtual ~SubscribeMessageFormatRequest();

  SubscribeMessageFormatRequest(const SubscribeMessageFormatRequest& from);
  SubscribeMessageFormatRequest(SubscribeMessageFormatRequest&& from) noexcept
    : SubscribeMessageFormatRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageFormatRequest& operator=(const SubscribeMessageFormatRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageFormatRequest& operator=(SubscribeMessageFormatRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageFormatRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageFormatRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageFormatRequest*>(
               &_SubscribeMessageFormatRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(SubscribeMessageFormatRequest& a, SubscribeMessageFormatRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageFormatRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageFormatRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageFormatRequest>(nullptr);
  }

  SubscribeMessageFormatRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageFormatRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageFormatRequest& from);
  void MergeFrom(const SubscribeMessageFormatRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageFormatRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageFormatRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageFormatRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageFormatResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageFormatResponse) */ {
 public:
  MessageFormatResponse();
  virtual ~MessageFormatResponse();

  MessageFormatResponse(const MessageFormatResponse& from);
  MessageFormatResponse(MessageFormatResponse&& from) noexcept
    : MessageFormatResponse() {
    *this = ::std::move(from);
  }

  inline MessageFormatResponse& operator=(const MessageFormatResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageFormatResponse& operator=(MessageFormatResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageFormatResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageFormatResponse* internal_default_instance() {
    return reinterpret_cast<const MessageFormatResponse*>(
               &_MessageFormatResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(MessageFormatResponse& a, MessageFormatResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageFormatResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageFormatResponse* New() const final {
    return CreateMaybeMessage<MessageFormatResponse>(nullptr);
  }

  MessageFormatResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageFormatResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageFormatResponse& from);
  void MergeFrom(const MessageFormatResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageFormatResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageFormatResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFormatFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageFormat message_format = 1;
  bool has_message_format() const;
  private:
  bool _internal_has_message_format() const;
  public:
  void clear_message_format();
  const ::mavsdk::rpc::logging::MessageFormat& message_format() const;
  ::mavsdk::rpc::logging::MessageFormat* release_message_format();
  ::mavsdk::rpc::logging::MessageFormat* mutable_message_format();
  void set_allocated_message_format(::mavsdk::rpc::logging::MessageFormat* message_format);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageFormatResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageFormat* message_format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageFormat :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageFormat) */ {
 public:
  MessageFormat();
  virtual ~MessageFormat();

  MessageFormat(const MessageFormat& from);
  MessageFormat(MessageFormat&& from) noexcept
    : MessageFormat() {
    *this = ::std::move(from);
  }

  inline MessageFormat& operator=(const MessageFormat& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageFormat& operator=(MessageFormat&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageFormat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageFormat* internal_default_instance() {
    return reinterpret_cast<const MessageFormat*>(
               &_MessageFormat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(MessageFormat& a, MessageFormat& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageFormat* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageFormat* New() const final {
    return CreateMaybeMessage<MessageFormat>(nullptr);
  }

  MessageFormat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageFormat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageFormat& from);
  void MergeFrom(const MessageFormat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageFormat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageFormat";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFormatFieldNumber = 1,
  };
  // string format = 1;
  void clear_format();
  const std::string& format() const;
  void set_format(const std::string& value);
  void set_format(std::string&& value);
  void set_format(const char* value);
  void set_format(const char* value, size_t size);
  std::string* mutable_format();
  std::string* release_format();
  void set_allocated_format(std::string* format);
  private:
  const std::string& _internal_format() const;
  void _internal_set_format(const std::string& value);
  std::string* _internal_mutable_format();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageFormat)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr format_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageInfoRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageInfoRequest) */ {
 public:
  SubscribeMessageInfoRequest();
  virtual ~SubscribeMessageInfoRequest();

  SubscribeMessageInfoRequest(const SubscribeMessageInfoRequest& from);
  SubscribeMessageInfoRequest(SubscribeMessageInfoRequest&& from) noexcept
    : SubscribeMessageInfoRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageInfoRequest& operator=(const SubscribeMessageInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageInfoRequest& operator=(SubscribeMessageInfoRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageInfoRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageInfoRequest*>(
               &_SubscribeMessageInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(SubscribeMessageInfoRequest& a, SubscribeMessageInfoRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageInfoRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageInfoRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageInfoRequest>(nullptr);
  }

  SubscribeMessageInfoRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageInfoRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageInfoRequest& from);
  void MergeFrom(const SubscribeMessageInfoRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageInfoRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageInfoRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageInfoRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageInfoResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageInfoResponse) */ {
 public:
  MessageInfoResponse();
  virtual ~MessageInfoResponse();

  MessageInfoResponse(const MessageInfoResponse& from);
  MessageInfoResponse(MessageInfoResponse&& from) noexcept
    : MessageInfoResponse() {
    *this = ::std::move(from);
  }

  inline MessageInfoResponse& operator=(const MessageInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfoResponse& operator=(MessageInfoResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInfoResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfoResponse* internal_default_instance() {
    return reinterpret_cast<const MessageInfoResponse*>(
               &_MessageInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(MessageInfoResponse& a, MessageInfoResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfoResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInfoResponse* New() const final {
    return CreateMaybeMessage<MessageInfoResponse>(nullptr);
  }

  MessageInfoResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfoResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInfoResponse& from);
  void MergeFrom(const MessageInfoResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfoResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageInfoResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageInfo message_info = 1;
  bool has_message_info() const;
  private:
  bool _internal_has_message_info() const;
  public:
  void clear_message_info();
  const ::mavsdk::rpc::logging::MessageInfo& message_info() const;
  ::mavsdk::rpc::logging::MessageInfo* release_message_info();
  ::mavsdk::rpc::logging::MessageInfo* mutable_message_info();
  void set_allocated_message_info(::mavsdk::rpc::logging::MessageInfo* message_info);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageInfoResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageInfo* message_info_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageInfo :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageInfo) */ {
 public:
  MessageInfo();
  virtual ~MessageInfo();

  MessageInfo(const MessageInfo& from);
  MessageInfo(MessageInfo&& from) noexcept
    : MessageInfo() {
    *this = ::std::move(from);
  }

  inline MessageInfo& operator=(const MessageInfo& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfo& operator=(MessageInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInfo& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfo* internal_default_instance() {
    return reinterpret_cast<const MessageInfo*>(
               &_MessageInfo_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(MessageInfo& a, MessageInfo& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfo* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInfo* New() const final {
    return CreateMaybeMessage<MessageInfo>(nullptr);
  }

  MessageInfo* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfo>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInfo& from);
  void MergeFrom(const MessageInfo& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfo* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageInfo";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageInfo)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageInfoMultipleRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest) */ {
 public:
  SubscribeMessageInfoMultipleRequest();
  virtual ~SubscribeMessageInfoMultipleRequest();

  SubscribeMessageInfoMultipleRequest(const SubscribeMessageInfoMultipleRequest& from);
  SubscribeMessageInfoMultipleRequest(SubscribeMessageInfoMultipleRequest&& from) noexcept
    : SubscribeMessageInfoMultipleRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageInfoMultipleRequest& operator=(const SubscribeMessageInfoMultipleRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageInfoMultipleRequest& operator=(SubscribeMessageInfoMultipleRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageInfoMultipleRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageInfoMultipleRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageInfoMultipleRequest*>(
               &_SubscribeMessageInfoMultipleRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(SubscribeMessageInfoMultipleRequest& a, SubscribeMessageInfoMultipleRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageInfoMultipleRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageInfoMultipleRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageInfoMultipleRequest>(nullptr);
  }

  SubscribeMessageInfoMultipleRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageInfoMultipleRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageInfoMultipleRequest& from);
  void MergeFrom(const SubscribeMessageInfoMultipleRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageInfoMultipleRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageInfoMultipleRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageInfoMultipleResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageInfoMultipleResponse) */ {
 public:
  MessageInfoMultipleResponse();
  virtual ~MessageInfoMultipleResponse();

  MessageInfoMultipleResponse(const MessageInfoMultipleResponse& from);
  MessageInfoMultipleResponse(MessageInfoMultipleResponse&& from) noexcept
    : MessageInfoMultipleResponse() {
    *this = ::std::move(from);
  }

  inline MessageInfoMultipleResponse& operator=(const MessageInfoMultipleResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfoMultipleResponse& operator=(MessageInfoMultipleResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInfoMultipleResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfoMultipleResponse* internal_default_instance() {
    return reinterpret_cast<const MessageInfoMultipleResponse*>(
               &_MessageInfoMultipleResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(MessageInfoMultipleResponse& a, MessageInfoMultipleResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfoMultipleResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInfoMultipleResponse* New() const final {
    return CreateMaybeMessage<MessageInfoMultipleResponse>(nullptr);
  }

  MessageInfoMultipleResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfoMultipleResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInfoMultipleResponse& from);
  void MergeFrom(const MessageInfoMultipleResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfoMultipleResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageInfoMultipleResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageInfoMultipleFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageInfoMultiple message_info_multiple = 1;
  bool has_message_info_multiple() const;
  private:
  bool _internal_has_message_info_multiple() const;
  public:
  void clear_message_info_multiple();
  const ::mavsdk::rpc::logging::MessageInfoMultiple& message_info_multiple() const;
  ::mavsdk::rpc::logging::MessageInfoMultiple* release_message_info_multiple();
  ::mavsdk::rpc::logging::MessageInfoMultiple* mutable_message_info_multiple();
  void set_allocated_message_info_multiple(::mavsdk::rpc::logging::MessageInfoMultiple* message_info_multiple);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageInfoMultipleResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageInfoMultiple* message_info_multiple_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageInfoMultiple :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageInfoMultiple) */ {
 public:
  MessageInfoMultiple();
  virtual ~MessageInfoMultiple();

  MessageInfoMultiple(const MessageInfoMultiple& from);
  MessageInfoMultiple(MessageInfoMultiple&& from) noexcept
    : MessageInfoMultiple() {
    *this = ::std::move(from);
  }

  inline MessageInfoMultiple& operator=(const MessageInfoMultiple& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageInfoMultiple& operator=(MessageInfoMultiple&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageInfoMultiple& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageInfoMultiple* internal_default_instance() {
    return reinterpret_cast<const MessageInfoMultiple*>(
               &_MessageInfoMultiple_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(MessageInfoMultiple& a, MessageInfoMultiple& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageInfoMultiple* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageInfoMultiple* New() const final {
    return CreateMaybeMessage<MessageInfoMultiple>(nullptr);
  }

  MessageInfoMultiple* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageInfoMultiple>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageInfoMultiple& from);
  void MergeFrom(const MessageInfoMultiple& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageInfoMultiple* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageInfoMultiple";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 2,
    kValueFieldNumber = 3,
    kIsContinuedFieldNumber = 1,
  };
  // string key = 2;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 3;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // bool is_continued = 1;
  void clear_is_continued();
  bool is_continued() const;
  void set_is_continued(bool value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageInfoMultiple)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  bool is_continued_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageParameterRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageParameterRequest) */ {
 public:
  SubscribeMessageParameterRequest();
  virtual ~SubscribeMessageParameterRequest();

  SubscribeMessageParameterRequest(const SubscribeMessageParameterRequest& from);
  SubscribeMessageParameterRequest(SubscribeMessageParameterRequest&& from) noexcept
    : SubscribeMessageParameterRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageParameterRequest& operator=(const SubscribeMessageParameterRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageParameterRequest& operator=(SubscribeMessageParameterRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageParameterRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageParameterRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageParameterRequest*>(
               &_SubscribeMessageParameterRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(SubscribeMessageParameterRequest& a, SubscribeMessageParameterRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageParameterRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageParameterRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageParameterRequest>(nullptr);
  }

  SubscribeMessageParameterRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageParameterRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageParameterRequest& from);
  void MergeFrom(const SubscribeMessageParameterRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageParameterRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageParameterRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageParameterRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageParameterResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageParameterResponse) */ {
 public:
  MessageParameterResponse();
  virtual ~MessageParameterResponse();

  MessageParameterResponse(const MessageParameterResponse& from);
  MessageParameterResponse(MessageParameterResponse&& from) noexcept
    : MessageParameterResponse() {
    *this = ::std::move(from);
  }

  inline MessageParameterResponse& operator=(const MessageParameterResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageParameterResponse& operator=(MessageParameterResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageParameterResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageParameterResponse* internal_default_instance() {
    return reinterpret_cast<const MessageParameterResponse*>(
               &_MessageParameterResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(MessageParameterResponse& a, MessageParameterResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageParameterResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageParameterResponse* New() const final {
    return CreateMaybeMessage<MessageParameterResponse>(nullptr);
  }

  MessageParameterResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageParameterResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageParameterResponse& from);
  void MergeFrom(const MessageParameterResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageParameterResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageParameterResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageParameterFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageParameter message_parameter = 1;
  bool has_message_parameter() const;
  private:
  bool _internal_has_message_parameter() const;
  public:
  void clear_message_parameter();
  const ::mavsdk::rpc::logging::MessageParameter& message_parameter() const;
  ::mavsdk::rpc::logging::MessageParameter* release_message_parameter();
  ::mavsdk::rpc::logging::MessageParameter* mutable_message_parameter();
  void set_allocated_message_parameter(::mavsdk::rpc::logging::MessageParameter* message_parameter);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageParameterResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageParameter* message_parameter_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageParameter :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageParameter) */ {
 public:
  MessageParameter();
  virtual ~MessageParameter();

  MessageParameter(const MessageParameter& from);
  MessageParameter(MessageParameter&& from) noexcept
    : MessageParameter() {
    *this = ::std::move(from);
  }

  inline MessageParameter& operator=(const MessageParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageParameter& operator=(MessageParameter&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageParameter& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageParameter* internal_default_instance() {
    return reinterpret_cast<const MessageParameter*>(
               &_MessageParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MessageParameter& a, MessageParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageParameter* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageParameter* New() const final {
    return CreateMaybeMessage<MessageParameter>(nullptr);
  }

  MessageParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageParameter>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageParameter& from);
  void MergeFrom(const MessageParameter& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageParameter* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageParameter";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // string key = 1;
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // string value = 2;
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageParameter)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageAddLoggedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest) */ {
 public:
  SubscribeMessageAddLoggedRequest();
  virtual ~SubscribeMessageAddLoggedRequest();

  SubscribeMessageAddLoggedRequest(const SubscribeMessageAddLoggedRequest& from);
  SubscribeMessageAddLoggedRequest(SubscribeMessageAddLoggedRequest&& from) noexcept
    : SubscribeMessageAddLoggedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageAddLoggedRequest& operator=(const SubscribeMessageAddLoggedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageAddLoggedRequest& operator=(SubscribeMessageAddLoggedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageAddLoggedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageAddLoggedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageAddLoggedRequest*>(
               &_SubscribeMessageAddLoggedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(SubscribeMessageAddLoggedRequest& a, SubscribeMessageAddLoggedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageAddLoggedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageAddLoggedRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageAddLoggedRequest>(nullptr);
  }

  SubscribeMessageAddLoggedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageAddLoggedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageAddLoggedRequest& from);
  void MergeFrom(const SubscribeMessageAddLoggedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageAddLoggedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageAddLoggedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageAddLoggedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageAddLoggedResponse) */ {
 public:
  MessageAddLoggedResponse();
  virtual ~MessageAddLoggedResponse();

  MessageAddLoggedResponse(const MessageAddLoggedResponse& from);
  MessageAddLoggedResponse(MessageAddLoggedResponse&& from) noexcept
    : MessageAddLoggedResponse() {
    *this = ::std::move(from);
  }

  inline MessageAddLoggedResponse& operator=(const MessageAddLoggedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAddLoggedResponse& operator=(MessageAddLoggedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAddLoggedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageAddLoggedResponse* internal_default_instance() {
    return reinterpret_cast<const MessageAddLoggedResponse*>(
               &_MessageAddLoggedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MessageAddLoggedResponse& a, MessageAddLoggedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAddLoggedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAddLoggedResponse* New() const final {
    return CreateMaybeMessage<MessageAddLoggedResponse>(nullptr);
  }

  MessageAddLoggedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAddLoggedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAddLoggedResponse& from);
  void MergeFrom(const MessageAddLoggedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAddLoggedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageAddLoggedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageAddLoggedFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageAddLogged message_add_logged = 1;
  bool has_message_add_logged() const;
  private:
  bool _internal_has_message_add_logged() const;
  public:
  void clear_message_add_logged();
  const ::mavsdk::rpc::logging::MessageAddLogged& message_add_logged() const;
  ::mavsdk::rpc::logging::MessageAddLogged* release_message_add_logged();
  ::mavsdk::rpc::logging::MessageAddLogged* mutable_message_add_logged();
  void set_allocated_message_add_logged(::mavsdk::rpc::logging::MessageAddLogged* message_add_logged);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageAddLoggedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageAddLogged* message_add_logged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageAddLogged :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageAddLogged) */ {
 public:
  MessageAddLogged();
  virtual ~MessageAddLogged();

  MessageAddLogged(const MessageAddLogged& from);
  MessageAddLogged(MessageAddLogged&& from) noexcept
    : MessageAddLogged() {
    *this = ::std::move(from);
  }

  inline MessageAddLogged& operator=(const MessageAddLogged& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageAddLogged& operator=(MessageAddLogged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageAddLogged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageAddLogged* internal_default_instance() {
    return reinterpret_cast<const MessageAddLogged*>(
               &_MessageAddLogged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MessageAddLogged& a, MessageAddLogged& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageAddLogged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageAddLogged* New() const final {
    return CreateMaybeMessage<MessageAddLogged>(nullptr);
  }

  MessageAddLogged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageAddLogged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageAddLogged& from);
  void MergeFrom(const MessageAddLogged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageAddLogged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageAddLogged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageNameFieldNumber = 3,
    kMultiIdFieldNumber = 1,
    kMsgIdFieldNumber = 2,
  };
  // string message_name = 3;
  void clear_message_name();
  const std::string& message_name() const;
  void set_message_name(const std::string& value);
  void set_message_name(std::string&& value);
  void set_message_name(const char* value);
  void set_message_name(const char* value, size_t size);
  std::string* mutable_message_name();
  std::string* release_message_name();
  void set_allocated_message_name(std::string* message_name);
  private:
  const std::string& _internal_message_name() const;
  void _internal_set_message_name(const std::string& value);
  std::string* _internal_mutable_message_name();
  public:

  // uint32 multi_id = 1;
  void clear_multi_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_id() const;
  void set_multi_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // uint32 msg_id = 2;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageAddLogged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_name_;
  ::PROTOBUF_NAMESPACE_ID::uint32 multi_id_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageRemoveLoggedRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest) */ {
 public:
  SubscribeMessageRemoveLoggedRequest();
  virtual ~SubscribeMessageRemoveLoggedRequest();

  SubscribeMessageRemoveLoggedRequest(const SubscribeMessageRemoveLoggedRequest& from);
  SubscribeMessageRemoveLoggedRequest(SubscribeMessageRemoveLoggedRequest&& from) noexcept
    : SubscribeMessageRemoveLoggedRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageRemoveLoggedRequest& operator=(const SubscribeMessageRemoveLoggedRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageRemoveLoggedRequest& operator=(SubscribeMessageRemoveLoggedRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageRemoveLoggedRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageRemoveLoggedRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageRemoveLoggedRequest*>(
               &_SubscribeMessageRemoveLoggedRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(SubscribeMessageRemoveLoggedRequest& a, SubscribeMessageRemoveLoggedRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageRemoveLoggedRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageRemoveLoggedRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageRemoveLoggedRequest>(nullptr);
  }

  SubscribeMessageRemoveLoggedRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageRemoveLoggedRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageRemoveLoggedRequest& from);
  void MergeFrom(const SubscribeMessageRemoveLoggedRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageRemoveLoggedRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageRemoveLoggedRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageRemoveLoggedResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageRemoveLoggedResponse) */ {
 public:
  MessageRemoveLoggedResponse();
  virtual ~MessageRemoveLoggedResponse();

  MessageRemoveLoggedResponse(const MessageRemoveLoggedResponse& from);
  MessageRemoveLoggedResponse(MessageRemoveLoggedResponse&& from) noexcept
    : MessageRemoveLoggedResponse() {
    *this = ::std::move(from);
  }

  inline MessageRemoveLoggedResponse& operator=(const MessageRemoveLoggedResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRemoveLoggedResponse& operator=(MessageRemoveLoggedResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageRemoveLoggedResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRemoveLoggedResponse* internal_default_instance() {
    return reinterpret_cast<const MessageRemoveLoggedResponse*>(
               &_MessageRemoveLoggedResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(MessageRemoveLoggedResponse& a, MessageRemoveLoggedResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRemoveLoggedResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRemoveLoggedResponse* New() const final {
    return CreateMaybeMessage<MessageRemoveLoggedResponse>(nullptr);
  }

  MessageRemoveLoggedResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRemoveLoggedResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageRemoveLoggedResponse& from);
  void MergeFrom(const MessageRemoveLoggedResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRemoveLoggedResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageRemoveLoggedResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageRemoveLoggedFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageRemoveLogged message_remove_logged = 1;
  bool has_message_remove_logged() const;
  private:
  bool _internal_has_message_remove_logged() const;
  public:
  void clear_message_remove_logged();
  const ::mavsdk::rpc::logging::MessageRemoveLogged& message_remove_logged() const;
  ::mavsdk::rpc::logging::MessageRemoveLogged* release_message_remove_logged();
  ::mavsdk::rpc::logging::MessageRemoveLogged* mutable_message_remove_logged();
  void set_allocated_message_remove_logged(::mavsdk::rpc::logging::MessageRemoveLogged* message_remove_logged);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageRemoveLoggedResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageRemoveLogged* message_remove_logged_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageRemoveLogged :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageRemoveLogged) */ {
 public:
  MessageRemoveLogged();
  virtual ~MessageRemoveLogged();

  MessageRemoveLogged(const MessageRemoveLogged& from);
  MessageRemoveLogged(MessageRemoveLogged&& from) noexcept
    : MessageRemoveLogged() {
    *this = ::std::move(from);
  }

  inline MessageRemoveLogged& operator=(const MessageRemoveLogged& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageRemoveLogged& operator=(MessageRemoveLogged&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageRemoveLogged& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageRemoveLogged* internal_default_instance() {
    return reinterpret_cast<const MessageRemoveLogged*>(
               &_MessageRemoveLogged_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(MessageRemoveLogged& a, MessageRemoveLogged& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageRemoveLogged* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageRemoveLogged* New() const final {
    return CreateMaybeMessage<MessageRemoveLogged>(nullptr);
  }

  MessageRemoveLogged* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageRemoveLogged>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageRemoveLogged& from);
  void MergeFrom(const MessageRemoveLogged& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageRemoveLogged* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageRemoveLogged";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
  };
  // uint32 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageRemoveLogged)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageDataRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageDataRequest) */ {
 public:
  SubscribeMessageDataRequest();
  virtual ~SubscribeMessageDataRequest();

  SubscribeMessageDataRequest(const SubscribeMessageDataRequest& from);
  SubscribeMessageDataRequest(SubscribeMessageDataRequest&& from) noexcept
    : SubscribeMessageDataRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageDataRequest& operator=(const SubscribeMessageDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageDataRequest& operator=(SubscribeMessageDataRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageDataRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageDataRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageDataRequest*>(
               &_SubscribeMessageDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(SubscribeMessageDataRequest& a, SubscribeMessageDataRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageDataRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageDataRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageDataRequest>(nullptr);
  }

  SubscribeMessageDataRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageDataRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageDataRequest& from);
  void MergeFrom(const SubscribeMessageDataRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageDataRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageDataRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageDataRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageDataResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageDataResponse) */ {
 public:
  MessageDataResponse();
  virtual ~MessageDataResponse();

  MessageDataResponse(const MessageDataResponse& from);
  MessageDataResponse(MessageDataResponse&& from) noexcept
    : MessageDataResponse() {
    *this = ::std::move(from);
  }

  inline MessageDataResponse& operator=(const MessageDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageDataResponse& operator=(MessageDataResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageDataResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageDataResponse* internal_default_instance() {
    return reinterpret_cast<const MessageDataResponse*>(
               &_MessageDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(MessageDataResponse& a, MessageDataResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageDataResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageDataResponse* New() const final {
    return CreateMaybeMessage<MessageDataResponse>(nullptr);
  }

  MessageDataResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageDataResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageDataResponse& from);
  void MergeFrom(const MessageDataResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageDataResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageDataResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageDataFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageData message_data = 1;
  bool has_message_data() const;
  private:
  bool _internal_has_message_data() const;
  public:
  void clear_message_data();
  const ::mavsdk::rpc::logging::MessageData& message_data() const;
  ::mavsdk::rpc::logging::MessageData* release_message_data();
  ::mavsdk::rpc::logging::MessageData* mutable_message_data();
  void set_allocated_message_data(::mavsdk::rpc::logging::MessageData* message_data);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageDataResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageData* message_data_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageData :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageData) */ {
 public:
  MessageData();
  virtual ~MessageData();

  MessageData(const MessageData& from);
  MessageData(MessageData&& from) noexcept
    : MessageData() {
    *this = ::std::move(from);
  }

  inline MessageData& operator=(const MessageData& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageData& operator=(MessageData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageData* internal_default_instance() {
    return reinterpret_cast<const MessageData*>(
               &_MessageData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(MessageData& a, MessageData& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageData* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageData* New() const final {
    return CreateMaybeMessage<MessageData>(nullptr);
  }

  MessageData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageData& from);
  void MergeFrom(const MessageData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageData";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 2,
    kMsgIdFieldNumber = 1,
  };
  // bytes data = 2;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint32 msg_id = 1;
  void clear_msg_id();
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id() const;
  void set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageData)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msg_id_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageLoggingRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageLoggingRequest) */ {
 public:
  SubscribeMessageLoggingRequest();
  virtual ~SubscribeMessageLoggingRequest();

  SubscribeMessageLoggingRequest(const SubscribeMessageLoggingRequest& from);
  SubscribeMessageLoggingRequest(SubscribeMessageLoggingRequest&& from) noexcept
    : SubscribeMessageLoggingRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageLoggingRequest& operator=(const SubscribeMessageLoggingRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageLoggingRequest& operator=(SubscribeMessageLoggingRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageLoggingRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageLoggingRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageLoggingRequest*>(
               &_SubscribeMessageLoggingRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(SubscribeMessageLoggingRequest& a, SubscribeMessageLoggingRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageLoggingRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageLoggingRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageLoggingRequest>(nullptr);
  }

  SubscribeMessageLoggingRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageLoggingRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageLoggingRequest& from);
  void MergeFrom(const SubscribeMessageLoggingRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageLoggingRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageLoggingRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageLoggingRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageLoggingResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageLoggingResponse) */ {
 public:
  MessageLoggingResponse();
  virtual ~MessageLoggingResponse();

  MessageLoggingResponse(const MessageLoggingResponse& from);
  MessageLoggingResponse(MessageLoggingResponse&& from) noexcept
    : MessageLoggingResponse() {
    *this = ::std::move(from);
  }

  inline MessageLoggingResponse& operator=(const MessageLoggingResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageLoggingResponse& operator=(MessageLoggingResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageLoggingResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageLoggingResponse* internal_default_instance() {
    return reinterpret_cast<const MessageLoggingResponse*>(
               &_MessageLoggingResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(MessageLoggingResponse& a, MessageLoggingResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageLoggingResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageLoggingResponse* New() const final {
    return CreateMaybeMessage<MessageLoggingResponse>(nullptr);
  }

  MessageLoggingResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageLoggingResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageLoggingResponse& from);
  void MergeFrom(const MessageLoggingResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageLoggingResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageLoggingResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageLoggingFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageLogging message_logging = 1;
  bool has_message_logging() const;
  private:
  bool _internal_has_message_logging() const;
  public:
  void clear_message_logging();
  const ::mavsdk::rpc::logging::MessageLogging& message_logging() const;
  ::mavsdk::rpc::logging::MessageLogging* release_message_logging();
  ::mavsdk::rpc::logging::MessageLogging* mutable_message_logging();
  void set_allocated_message_logging(::mavsdk::rpc::logging::MessageLogging* message_logging);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageLoggingResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageLogging* message_logging_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageLogging :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageLogging) */ {
 public:
  MessageLogging();
  virtual ~MessageLogging();

  MessageLogging(const MessageLogging& from);
  MessageLogging(MessageLogging&& from) noexcept
    : MessageLogging() {
    *this = ::std::move(from);
  }

  inline MessageLogging& operator=(const MessageLogging& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageLogging& operator=(MessageLogging&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageLogging& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageLogging* internal_default_instance() {
    return reinterpret_cast<const MessageLogging*>(
               &_MessageLogging_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(MessageLogging& a, MessageLogging& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageLogging* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageLogging* New() const final {
    return CreateMaybeMessage<MessageLogging>(nullptr);
  }

  MessageLogging* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageLogging>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageLogging& from);
  void MergeFrom(const MessageLogging& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageLogging* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageLogging";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef MessageLogging_LogLevel LogLevel;
  static constexpr LogLevel UNDEF =
    MessageLogging_LogLevel_UNDEF;
  static constexpr LogLevel EMERG =
    MessageLogging_LogLevel_EMERG;
  static constexpr LogLevel ALERT =
    MessageLogging_LogLevel_ALERT;
  static constexpr LogLevel CRIT =
    MessageLogging_LogLevel_CRIT;
  static constexpr LogLevel ERR =
    MessageLogging_LogLevel_ERR;
  static constexpr LogLevel WARNING =
    MessageLogging_LogLevel_WARNING;
  static constexpr LogLevel NOTICE =
    MessageLogging_LogLevel_NOTICE;
  static constexpr LogLevel INFO =
    MessageLogging_LogLevel_INFO;
  static constexpr LogLevel DEBUG =
    MessageLogging_LogLevel_DEBUG;
  static inline bool LogLevel_IsValid(int value) {
    return MessageLogging_LogLevel_IsValid(value);
  }
  static constexpr LogLevel LogLevel_MIN =
    MessageLogging_LogLevel_LogLevel_MIN;
  static constexpr LogLevel LogLevel_MAX =
    MessageLogging_LogLevel_LogLevel_MAX;
  static constexpr int LogLevel_ARRAYSIZE =
    MessageLogging_LogLevel_LogLevel_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  LogLevel_descriptor() {
    return MessageLogging_LogLevel_descriptor();
  }
  template<typename T>
  static inline const std::string& LogLevel_Name(T enum_t_value) {
    static_assert(::std::is_same<T, LogLevel>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function LogLevel_Name.");
    return MessageLogging_LogLevel_Name(enum_t_value);
  }
  static inline bool LogLevel_Parse(const std::string& name,
      LogLevel* value) {
    return MessageLogging_LogLevel_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kDataFieldNumber = 3,
    kTimestampFieldNumber = 2,
    kLogLevelFieldNumber = 1,
  };
  // string data = 3;
  void clear_data();
  const std::string& data() const;
  void set_data(const std::string& value);
  void set_data(std::string&& value);
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  std::string* mutable_data();
  std::string* release_data();
  void set_allocated_data(std::string* data);
  private:
  const std::string& _internal_data() const;
  void _internal_set_data(const std::string& value);
  std::string* _internal_mutable_data();
  public:

  // uint64 timestamp = 2;
  void clear_timestamp();
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp() const;
  void set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value);

  // .mavsdk.rpc.logging.MessageLogging.LogLevel log_level = 1;
  void clear_log_level();
  ::mavsdk::rpc::logging::MessageLogging_LogLevel log_level() const;
  void set_log_level(::mavsdk::rpc::logging::MessageLogging_LogLevel value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageLogging)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr data_;
  ::PROTOBUF_NAMESPACE_ID::uint64 timestamp_;
  int log_level_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class SubscribeMessageDropoutRequest :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.SubscribeMessageDropoutRequest) */ {
 public:
  SubscribeMessageDropoutRequest();
  virtual ~SubscribeMessageDropoutRequest();

  SubscribeMessageDropoutRequest(const SubscribeMessageDropoutRequest& from);
  SubscribeMessageDropoutRequest(SubscribeMessageDropoutRequest&& from) noexcept
    : SubscribeMessageDropoutRequest() {
    *this = ::std::move(from);
  }

  inline SubscribeMessageDropoutRequest& operator=(const SubscribeMessageDropoutRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeMessageDropoutRequest& operator=(SubscribeMessageDropoutRequest&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SubscribeMessageDropoutRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SubscribeMessageDropoutRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeMessageDropoutRequest*>(
               &_SubscribeMessageDropoutRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(SubscribeMessageDropoutRequest& a, SubscribeMessageDropoutRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(SubscribeMessageDropoutRequest* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SubscribeMessageDropoutRequest* New() const final {
    return CreateMaybeMessage<SubscribeMessageDropoutRequest>(nullptr);
  }

  SubscribeMessageDropoutRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SubscribeMessageDropoutRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SubscribeMessageDropoutRequest& from);
  void MergeFrom(const SubscribeMessageDropoutRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SubscribeMessageDropoutRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.SubscribeMessageDropoutRequest";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.SubscribeMessageDropoutRequest)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageDropoutResponse :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageDropoutResponse) */ {
 public:
  MessageDropoutResponse();
  virtual ~MessageDropoutResponse();

  MessageDropoutResponse(const MessageDropoutResponse& from);
  MessageDropoutResponse(MessageDropoutResponse&& from) noexcept
    : MessageDropoutResponse() {
    *this = ::std::move(from);
  }

  inline MessageDropoutResponse& operator=(const MessageDropoutResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageDropoutResponse& operator=(MessageDropoutResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageDropoutResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageDropoutResponse* internal_default_instance() {
    return reinterpret_cast<const MessageDropoutResponse*>(
               &_MessageDropoutResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(MessageDropoutResponse& a, MessageDropoutResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageDropoutResponse* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageDropoutResponse* New() const final {
    return CreateMaybeMessage<MessageDropoutResponse>(nullptr);
  }

  MessageDropoutResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageDropoutResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageDropoutResponse& from);
  void MergeFrom(const MessageDropoutResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageDropoutResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageDropoutResponse";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageDropoutFieldNumber = 1,
  };
  // .mavsdk.rpc.logging.MessageDropout message_dropout = 1;
  bool has_message_dropout() const;
  private:
  bool _internal_has_message_dropout() const;
  public:
  void clear_message_dropout();
  const ::mavsdk::rpc::logging::MessageDropout& message_dropout() const;
  ::mavsdk::rpc::logging::MessageDropout* release_message_dropout();
  ::mavsdk::rpc::logging::MessageDropout* mutable_message_dropout();
  void set_allocated_message_dropout(::mavsdk::rpc::logging::MessageDropout* message_dropout);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageDropoutResponse)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::mavsdk::rpc::logging::MessageDropout* message_dropout_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class MessageDropout :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.MessageDropout) */ {
 public:
  MessageDropout();
  virtual ~MessageDropout();

  MessageDropout(const MessageDropout& from);
  MessageDropout(MessageDropout&& from) noexcept
    : MessageDropout() {
    *this = ::std::move(from);
  }

  inline MessageDropout& operator=(const MessageDropout& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageDropout& operator=(MessageDropout&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MessageDropout& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MessageDropout* internal_default_instance() {
    return reinterpret_cast<const MessageDropout*>(
               &_MessageDropout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(MessageDropout& a, MessageDropout& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageDropout* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MessageDropout* New() const final {
    return CreateMaybeMessage<MessageDropout>(nullptr);
  }

  MessageDropout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MessageDropout>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MessageDropout& from);
  void MergeFrom(const MessageDropout& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MessageDropout* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.MessageDropout";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDurationFieldNumber = 1,
  };
  // uint32 duration = 1;
  void clear_duration();
  ::PROTOBUF_NAMESPACE_ID::uint32 duration() const;
  void set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.MessageDropout)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::uint32 duration_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// -------------------------------------------------------------------

class LoggingResult :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:mavsdk.rpc.logging.LoggingResult) */ {
 public:
  LoggingResult();
  virtual ~LoggingResult();

  LoggingResult(const LoggingResult& from);
  LoggingResult(LoggingResult&& from) noexcept
    : LoggingResult() {
    *this = ::std::move(from);
  }

  inline LoggingResult& operator=(const LoggingResult& from) {
    CopyFrom(from);
    return *this;
  }
  inline LoggingResult& operator=(LoggingResult&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const LoggingResult& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const LoggingResult* internal_default_instance() {
    return reinterpret_cast<const LoggingResult*>(
               &_LoggingResult_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(LoggingResult& a, LoggingResult& b) {
    a.Swap(&b);
  }
  inline void Swap(LoggingResult* other) {
    if (other == this) return;
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline LoggingResult* New() const final {
    return CreateMaybeMessage<LoggingResult>(nullptr);
  }

  LoggingResult* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<LoggingResult>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const LoggingResult& from);
  void MergeFrom(const LoggingResult& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  #if GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  #else
  bool MergePartialFromCodedStream(
      ::PROTOBUF_NAMESPACE_ID::io::CodedInputStream* input) final;
  #endif  // GOOGLE_PROTOBUF_ENABLE_EXPERIMENTAL_PARSER
  ::PROTOBUF_NAMESPACE_ID::uint8* InternalSerializeWithCachedSizesToArray(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(LoggingResult* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "mavsdk.rpc.logging.LoggingResult";
  }
  private:
  inline ::PROTOBUF_NAMESPACE_ID::Arena* GetArenaNoVirtual() const {
    return nullptr;
  }
  inline void* MaybeArenaPtr() const {
    return nullptr;
  }
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_logging_2flogging_2eproto);
    return ::descriptor_table_logging_2flogging_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  typedef LoggingResult_Result Result;
  static constexpr Result UNKNOWN =
    LoggingResult_Result_UNKNOWN;
  static constexpr Result SUCCESS =
    LoggingResult_Result_SUCCESS;
  static constexpr Result NO_SYSTEM =
    LoggingResult_Result_NO_SYSTEM;
  static constexpr Result CONNECTION_ERROR =
    LoggingResult_Result_CONNECTION_ERROR;
  static constexpr Result BUSY =
    LoggingResult_Result_BUSY;
  static constexpr Result COMMAND_DENIED =
    LoggingResult_Result_COMMAND_DENIED;
  static constexpr Result TIMEOUT =
    LoggingResult_Result_TIMEOUT;
  static inline bool Result_IsValid(int value) {
    return LoggingResult_Result_IsValid(value);
  }
  static constexpr Result Result_MIN =
    LoggingResult_Result_Result_MIN;
  static constexpr Result Result_MAX =
    LoggingResult_Result_Result_MAX;
  static constexpr int Result_ARRAYSIZE =
    LoggingResult_Result_Result_ARRAYSIZE;
  static inline const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor*
  Result_descriptor() {
    return LoggingResult_Result_descriptor();
  }
  template<typename T>
  static inline const std::string& Result_Name(T enum_t_value) {
    static_assert(::std::is_same<T, Result>::value ||
      ::std::is_integral<T>::value,
      "Incorrect type passed to function Result_Name.");
    return LoggingResult_Result_Name(enum_t_value);
  }
  static inline bool Result_Parse(const std::string& name,
      Result* value) {
    return LoggingResult_Result_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kResultStrFieldNumber = 2,
    kResultFieldNumber = 1,
  };
  // string result_str = 2;
  void clear_result_str();
  const std::string& result_str() const;
  void set_result_str(const std::string& value);
  void set_result_str(std::string&& value);
  void set_result_str(const char* value);
  void set_result_str(const char* value, size_t size);
  std::string* mutable_result_str();
  std::string* release_result_str();
  void set_allocated_result_str(std::string* result_str);
  private:
  const std::string& _internal_result_str() const;
  void _internal_set_result_str(const std::string& value);
  std::string* _internal_mutable_result_str();
  public:

  // .mavsdk.rpc.logging.LoggingResult.Result result = 1;
  void clear_result();
  ::mavsdk::rpc::logging::LoggingResult_Result result() const;
  void set_result(::mavsdk::rpc::logging::LoggingResult_Result value);

  // @@protoc_insertion_point(class_scope:mavsdk.rpc.logging.LoggingResult)
 private:
  class _Internal;

  ::PROTOBUF_NAMESPACE_ID::internal::InternalMetadataWithArena _internal_metadata_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr result_str_;
  int result_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_logging_2flogging_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// StartLoggingRequest

// -------------------------------------------------------------------

// StartLoggingResponse

// .mavsdk.rpc.logging.LoggingResult logging_result = 1;
inline bool StartLoggingResponse::has_logging_result() const {
  return this != internal_default_instance() && logging_result_ != nullptr;
}
inline void StartLoggingResponse::clear_logging_result() {
  if (GetArenaNoVirtual() == nullptr && logging_result_ != nullptr) {
    delete logging_result_;
  }
  logging_result_ = nullptr;
}
inline const ::mavsdk::rpc::logging::LoggingResult& StartLoggingResponse::logging_result() const {
  const ::mavsdk::rpc::logging::LoggingResult* p = logging_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.StartLoggingResponse.logging_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::LoggingResult*>(
      &::mavsdk::rpc::logging::_LoggingResult_default_instance_);
}
inline ::mavsdk::rpc::logging::LoggingResult* StartLoggingResponse::release_logging_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.StartLoggingResponse.logging_result)
  
  ::mavsdk::rpc::logging::LoggingResult* temp = logging_result_;
  logging_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::LoggingResult* StartLoggingResponse::mutable_logging_result() {
  
  if (logging_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::LoggingResult>(GetArenaNoVirtual());
    logging_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.StartLoggingResponse.logging_result)
  return logging_result_;
}
inline void StartLoggingResponse::set_allocated_logging_result(::mavsdk::rpc::logging::LoggingResult* logging_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete logging_result_;
  }
  if (logging_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logging_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging_result, submessage_arena);
    }
    
  } else {
    
  }
  logging_result_ = logging_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.StartLoggingResponse.logging_result)
}

// -------------------------------------------------------------------

// StopLoggingRequest

// -------------------------------------------------------------------

// StopLoggingResponse

// .mavsdk.rpc.logging.LoggingResult logging_result = 1;
inline bool StopLoggingResponse::has_logging_result() const {
  return this != internal_default_instance() && logging_result_ != nullptr;
}
inline void StopLoggingResponse::clear_logging_result() {
  if (GetArenaNoVirtual() == nullptr && logging_result_ != nullptr) {
    delete logging_result_;
  }
  logging_result_ = nullptr;
}
inline const ::mavsdk::rpc::logging::LoggingResult& StopLoggingResponse::logging_result() const {
  const ::mavsdk::rpc::logging::LoggingResult* p = logging_result_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.StopLoggingResponse.logging_result)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::LoggingResult*>(
      &::mavsdk::rpc::logging::_LoggingResult_default_instance_);
}
inline ::mavsdk::rpc::logging::LoggingResult* StopLoggingResponse::release_logging_result() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.StopLoggingResponse.logging_result)
  
  ::mavsdk::rpc::logging::LoggingResult* temp = logging_result_;
  logging_result_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::LoggingResult* StopLoggingResponse::mutable_logging_result() {
  
  if (logging_result_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::LoggingResult>(GetArenaNoVirtual());
    logging_result_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.StopLoggingResponse.logging_result)
  return logging_result_;
}
inline void StopLoggingResponse::set_allocated_logging_result(::mavsdk::rpc::logging::LoggingResult* logging_result) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete logging_result_;
  }
  if (logging_result) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      logging_result = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, logging_result, submessage_arena);
    }
    
  } else {
    
  }
  logging_result_ = logging_result;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.StopLoggingResponse.logging_result)
}

// -------------------------------------------------------------------

// SubscribeMessageFlagBitsRequest

// -------------------------------------------------------------------

// MessageFlagBitsResponse

// .mavsdk.rpc.logging.MessageFlagBits message_flag_bits = 1;
inline bool MessageFlagBitsResponse::has_message_flag_bits() const {
  return this != internal_default_instance() && message_flag_bits_ != nullptr;
}
inline void MessageFlagBitsResponse::clear_message_flag_bits() {
  if (GetArenaNoVirtual() == nullptr && message_flag_bits_ != nullptr) {
    delete message_flag_bits_;
  }
  message_flag_bits_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageFlagBits& MessageFlagBitsResponse::message_flag_bits() const {
  const ::mavsdk::rpc::logging::MessageFlagBits* p = message_flag_bits_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageFlagBitsResponse.message_flag_bits)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageFlagBits*>(
      &::mavsdk::rpc::logging::_MessageFlagBits_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageFlagBits* MessageFlagBitsResponse::release_message_flag_bits() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageFlagBitsResponse.message_flag_bits)
  
  ::mavsdk::rpc::logging::MessageFlagBits* temp = message_flag_bits_;
  message_flag_bits_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageFlagBits* MessageFlagBitsResponse::mutable_message_flag_bits() {
  
  if (message_flag_bits_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageFlagBits>(GetArenaNoVirtual());
    message_flag_bits_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageFlagBitsResponse.message_flag_bits)
  return message_flag_bits_;
}
inline void MessageFlagBitsResponse::set_allocated_message_flag_bits(::mavsdk::rpc::logging::MessageFlagBits* message_flag_bits) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_flag_bits_;
  }
  if (message_flag_bits) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_flag_bits = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_flag_bits, submessage_arena);
    }
    
  } else {
    
  }
  message_flag_bits_ = message_flag_bits;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageFlagBitsResponse.message_flag_bits)
}

// -------------------------------------------------------------------

// MessageFlagBits

// repeated uint32 compat_flags = 1;
inline int MessageFlagBits::compat_flags_size() const {
  return compat_flags_.size();
}
inline void MessageFlagBits::clear_compat_flags() {
  compat_flags_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageFlagBits::compat_flags(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageFlagBits.compat_flags)
  return compat_flags_.Get(index);
}
inline void MessageFlagBits::set_compat_flags(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  compat_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageFlagBits.compat_flags)
}
inline void MessageFlagBits::add_compat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  compat_flags_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.logging.MessageFlagBits.compat_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MessageFlagBits::compat_flags() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.logging.MessageFlagBits.compat_flags)
  return compat_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MessageFlagBits::mutable_compat_flags() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.logging.MessageFlagBits.compat_flags)
  return &compat_flags_;
}

// repeated uint32 incompat_flags = 2;
inline int MessageFlagBits::incompat_flags_size() const {
  return incompat_flags_.size();
}
inline void MessageFlagBits::clear_incompat_flags() {
  incompat_flags_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageFlagBits::incompat_flags(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageFlagBits.incompat_flags)
  return incompat_flags_.Get(index);
}
inline void MessageFlagBits::set_incompat_flags(int index, ::PROTOBUF_NAMESPACE_ID::uint32 value) {
  incompat_flags_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageFlagBits.incompat_flags)
}
inline void MessageFlagBits::add_incompat_flags(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  incompat_flags_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.logging.MessageFlagBits.incompat_flags)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >&
MessageFlagBits::incompat_flags() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.logging.MessageFlagBits.incompat_flags)
  return incompat_flags_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint32 >*
MessageFlagBits::mutable_incompat_flags() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.logging.MessageFlagBits.incompat_flags)
  return &incompat_flags_;
}

// repeated uint64 appended_offsets = 3;
inline int MessageFlagBits::appended_offsets_size() const {
  return appended_offsets_.size();
}
inline void MessageFlagBits::clear_appended_offsets() {
  appended_offsets_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MessageFlagBits::appended_offsets(int index) const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageFlagBits.appended_offsets)
  return appended_offsets_.Get(index);
}
inline void MessageFlagBits::set_appended_offsets(int index, ::PROTOBUF_NAMESPACE_ID::uint64 value) {
  appended_offsets_.Set(index, value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageFlagBits.appended_offsets)
}
inline void MessageFlagBits::add_appended_offsets(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  appended_offsets_.Add(value);
  // @@protoc_insertion_point(field_add:mavsdk.rpc.logging.MessageFlagBits.appended_offsets)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >&
MessageFlagBits::appended_offsets() const {
  // @@protoc_insertion_point(field_list:mavsdk.rpc.logging.MessageFlagBits.appended_offsets)
  return appended_offsets_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::uint64 >*
MessageFlagBits::mutable_appended_offsets() {
  // @@protoc_insertion_point(field_mutable_list:mavsdk.rpc.logging.MessageFlagBits.appended_offsets)
  return &appended_offsets_;
}

// -------------------------------------------------------------------

// SubscribeMessageFormatRequest

// -------------------------------------------------------------------

// MessageFormatResponse

// .mavsdk.rpc.logging.MessageFormat message_format = 1;
inline bool MessageFormatResponse::has_message_format() const {
  return this != internal_default_instance() && message_format_ != nullptr;
}
inline void MessageFormatResponse::clear_message_format() {
  if (GetArenaNoVirtual() == nullptr && message_format_ != nullptr) {
    delete message_format_;
  }
  message_format_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageFormat& MessageFormatResponse::message_format() const {
  const ::mavsdk::rpc::logging::MessageFormat* p = message_format_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageFormatResponse.message_format)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageFormat*>(
      &::mavsdk::rpc::logging::_MessageFormat_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageFormat* MessageFormatResponse::release_message_format() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageFormatResponse.message_format)
  
  ::mavsdk::rpc::logging::MessageFormat* temp = message_format_;
  message_format_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageFormat* MessageFormatResponse::mutable_message_format() {
  
  if (message_format_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageFormat>(GetArenaNoVirtual());
    message_format_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageFormatResponse.message_format)
  return message_format_;
}
inline void MessageFormatResponse::set_allocated_message_format(::mavsdk::rpc::logging::MessageFormat* message_format) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_format_;
  }
  if (message_format) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_format = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_format, submessage_arena);
    }
    
  } else {
    
  }
  message_format_ = message_format;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageFormatResponse.message_format)
}

// -------------------------------------------------------------------

// MessageFormat

// string format = 1;
inline void MessageFormat::clear_format() {
  format_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageFormat::format() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageFormat.format)
  return _internal_format();
}
inline void MessageFormat::set_format(const std::string& value) {
  _internal_set_format(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageFormat.format)
}
inline std::string* MessageFormat::mutable_format() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageFormat.format)
  return _internal_mutable_format();
}
inline const std::string& MessageFormat::_internal_format() const {
  return format_.GetNoArena();
}
inline void MessageFormat::_internal_set_format(const std::string& value) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageFormat::set_format(std::string&& value) {
  
  format_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageFormat.format)
}
inline void MessageFormat::set_format(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageFormat.format)
}
inline void MessageFormat::set_format(const char* value, size_t size) {
  
  format_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageFormat.format)
}
inline std::string* MessageFormat::_internal_mutable_format() {
  
  return format_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageFormat::release_format() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageFormat.format)
  
  return format_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageFormat::set_allocated_format(std::string* format) {
  if (format != nullptr) {
    
  } else {
    
  }
  format_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), format);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageFormat.format)
}

// -------------------------------------------------------------------

// SubscribeMessageInfoRequest

// -------------------------------------------------------------------

// MessageInfoResponse

// .mavsdk.rpc.logging.MessageInfo message_info = 1;
inline bool MessageInfoResponse::has_message_info() const {
  return this != internal_default_instance() && message_info_ != nullptr;
}
inline void MessageInfoResponse::clear_message_info() {
  if (GetArenaNoVirtual() == nullptr && message_info_ != nullptr) {
    delete message_info_;
  }
  message_info_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageInfo& MessageInfoResponse::message_info() const {
  const ::mavsdk::rpc::logging::MessageInfo* p = message_info_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfoResponse.message_info)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageInfo*>(
      &::mavsdk::rpc::logging::_MessageInfo_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageInfo* MessageInfoResponse::release_message_info() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageInfoResponse.message_info)
  
  ::mavsdk::rpc::logging::MessageInfo* temp = message_info_;
  message_info_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageInfo* MessageInfoResponse::mutable_message_info() {
  
  if (message_info_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageInfo>(GetArenaNoVirtual());
    message_info_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageInfoResponse.message_info)
  return message_info_;
}
inline void MessageInfoResponse::set_allocated_message_info(::mavsdk::rpc::logging::MessageInfo* message_info) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_info_;
  }
  if (message_info) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_info = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_info, submessage_arena);
    }
    
  } else {
    
  }
  message_info_ = message_info;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageInfoResponse.message_info)
}

// -------------------------------------------------------------------

// MessageInfo

// string key = 1;
inline void MessageInfo::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageInfo::key() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfo.key)
  return _internal_key();
}
inline void MessageInfo::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageInfo.key)
}
inline std::string* MessageInfo::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageInfo.key)
  return _internal_mutable_key();
}
inline const std::string& MessageInfo::_internal_key() const {
  return key_.GetNoArena();
}
inline void MessageInfo::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageInfo::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageInfo.key)
}
inline void MessageInfo::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageInfo.key)
}
inline void MessageInfo::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageInfo.key)
}
inline std::string* MessageInfo::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageInfo::release_key() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageInfo.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageInfo.key)
}

// string value = 2;
inline void MessageInfo::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageInfo::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfo.value)
  return _internal_value();
}
inline void MessageInfo::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageInfo.value)
}
inline std::string* MessageInfo::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageInfo.value)
  return _internal_mutable_value();
}
inline const std::string& MessageInfo::_internal_value() const {
  return value_.GetNoArena();
}
inline void MessageInfo::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageInfo::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageInfo.value)
}
inline void MessageInfo::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageInfo.value)
}
inline void MessageInfo::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageInfo.value)
}
inline std::string* MessageInfo::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageInfo::release_value() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageInfo.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfo::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageInfo.value)
}

// -------------------------------------------------------------------

// SubscribeMessageInfoMultipleRequest

// -------------------------------------------------------------------

// MessageInfoMultipleResponse

// .mavsdk.rpc.logging.MessageInfoMultiple message_info_multiple = 1;
inline bool MessageInfoMultipleResponse::has_message_info_multiple() const {
  return this != internal_default_instance() && message_info_multiple_ != nullptr;
}
inline void MessageInfoMultipleResponse::clear_message_info_multiple() {
  if (GetArenaNoVirtual() == nullptr && message_info_multiple_ != nullptr) {
    delete message_info_multiple_;
  }
  message_info_multiple_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageInfoMultiple& MessageInfoMultipleResponse::message_info_multiple() const {
  const ::mavsdk::rpc::logging::MessageInfoMultiple* p = message_info_multiple_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfoMultipleResponse.message_info_multiple)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageInfoMultiple*>(
      &::mavsdk::rpc::logging::_MessageInfoMultiple_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageInfoMultiple* MessageInfoMultipleResponse::release_message_info_multiple() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageInfoMultipleResponse.message_info_multiple)
  
  ::mavsdk::rpc::logging::MessageInfoMultiple* temp = message_info_multiple_;
  message_info_multiple_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageInfoMultiple* MessageInfoMultipleResponse::mutable_message_info_multiple() {
  
  if (message_info_multiple_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageInfoMultiple>(GetArenaNoVirtual());
    message_info_multiple_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageInfoMultipleResponse.message_info_multiple)
  return message_info_multiple_;
}
inline void MessageInfoMultipleResponse::set_allocated_message_info_multiple(::mavsdk::rpc::logging::MessageInfoMultiple* message_info_multiple) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_info_multiple_;
  }
  if (message_info_multiple) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_info_multiple = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_info_multiple, submessage_arena);
    }
    
  } else {
    
  }
  message_info_multiple_ = message_info_multiple;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageInfoMultipleResponse.message_info_multiple)
}

// -------------------------------------------------------------------

// MessageInfoMultiple

// bool is_continued = 1;
inline void MessageInfoMultiple::clear_is_continued() {
  is_continued_ = false;
}
inline bool MessageInfoMultiple::is_continued() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfoMultiple.is_continued)
  return is_continued_;
}
inline void MessageInfoMultiple::set_is_continued(bool value) {
  
  is_continued_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageInfoMultiple.is_continued)
}

// string key = 2;
inline void MessageInfoMultiple::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageInfoMultiple::key() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfoMultiple.key)
  return _internal_key();
}
inline void MessageInfoMultiple::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageInfoMultiple.key)
}
inline std::string* MessageInfoMultiple::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageInfoMultiple.key)
  return _internal_mutable_key();
}
inline const std::string& MessageInfoMultiple::_internal_key() const {
  return key_.GetNoArena();
}
inline void MessageInfoMultiple::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageInfoMultiple::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageInfoMultiple.key)
}
inline void MessageInfoMultiple::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageInfoMultiple.key)
}
inline void MessageInfoMultiple::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageInfoMultiple.key)
}
inline std::string* MessageInfoMultiple::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageInfoMultiple::release_key() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageInfoMultiple.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfoMultiple::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageInfoMultiple.key)
}

// string value = 3;
inline void MessageInfoMultiple::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageInfoMultiple::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageInfoMultiple.value)
  return _internal_value();
}
inline void MessageInfoMultiple::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageInfoMultiple.value)
}
inline std::string* MessageInfoMultiple::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageInfoMultiple.value)
  return _internal_mutable_value();
}
inline const std::string& MessageInfoMultiple::_internal_value() const {
  return value_.GetNoArena();
}
inline void MessageInfoMultiple::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageInfoMultiple::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageInfoMultiple.value)
}
inline void MessageInfoMultiple::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageInfoMultiple.value)
}
inline void MessageInfoMultiple::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageInfoMultiple.value)
}
inline std::string* MessageInfoMultiple::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageInfoMultiple::release_value() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageInfoMultiple.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageInfoMultiple::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageInfoMultiple.value)
}

// -------------------------------------------------------------------

// SubscribeMessageParameterRequest

// -------------------------------------------------------------------

// MessageParameterResponse

// .mavsdk.rpc.logging.MessageParameter message_parameter = 1;
inline bool MessageParameterResponse::has_message_parameter() const {
  return this != internal_default_instance() && message_parameter_ != nullptr;
}
inline void MessageParameterResponse::clear_message_parameter() {
  if (GetArenaNoVirtual() == nullptr && message_parameter_ != nullptr) {
    delete message_parameter_;
  }
  message_parameter_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageParameter& MessageParameterResponse::message_parameter() const {
  const ::mavsdk::rpc::logging::MessageParameter* p = message_parameter_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageParameterResponse.message_parameter)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageParameter*>(
      &::mavsdk::rpc::logging::_MessageParameter_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageParameter* MessageParameterResponse::release_message_parameter() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageParameterResponse.message_parameter)
  
  ::mavsdk::rpc::logging::MessageParameter* temp = message_parameter_;
  message_parameter_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageParameter* MessageParameterResponse::mutable_message_parameter() {
  
  if (message_parameter_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageParameter>(GetArenaNoVirtual());
    message_parameter_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageParameterResponse.message_parameter)
  return message_parameter_;
}
inline void MessageParameterResponse::set_allocated_message_parameter(::mavsdk::rpc::logging::MessageParameter* message_parameter) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_parameter_;
  }
  if (message_parameter) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_parameter = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_parameter, submessage_arena);
    }
    
  } else {
    
  }
  message_parameter_ = message_parameter;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageParameterResponse.message_parameter)
}

// -------------------------------------------------------------------

// MessageParameter

// string key = 1;
inline void MessageParameter::clear_key() {
  key_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageParameter::key() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageParameter.key)
  return _internal_key();
}
inline void MessageParameter::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageParameter.key)
}
inline std::string* MessageParameter::mutable_key() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageParameter.key)
  return _internal_mutable_key();
}
inline const std::string& MessageParameter::_internal_key() const {
  return key_.GetNoArena();
}
inline void MessageParameter::_internal_set_key(const std::string& value) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageParameter::set_key(std::string&& value) {
  
  key_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageParameter.key)
}
inline void MessageParameter::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageParameter.key)
}
inline void MessageParameter::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageParameter.key)
}
inline std::string* MessageParameter::_internal_mutable_key() {
  
  return key_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageParameter::release_key() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageParameter.key)
  
  return key_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageParameter::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageParameter.key)
}

// string value = 2;
inline void MessageParameter::clear_value() {
  value_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageParameter::value() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageParameter.value)
  return _internal_value();
}
inline void MessageParameter::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageParameter.value)
}
inline std::string* MessageParameter::mutable_value() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageParameter.value)
  return _internal_mutable_value();
}
inline const std::string& MessageParameter::_internal_value() const {
  return value_.GetNoArena();
}
inline void MessageParameter::_internal_set_value(const std::string& value) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageParameter::set_value(std::string&& value) {
  
  value_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageParameter.value)
}
inline void MessageParameter::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageParameter.value)
}
inline void MessageParameter::set_value(const char* value, size_t size) {
  
  value_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageParameter.value)
}
inline std::string* MessageParameter::_internal_mutable_value() {
  
  return value_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageParameter::release_value() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageParameter.value)
  
  return value_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageParameter::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    
  } else {
    
  }
  value_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageParameter.value)
}

// -------------------------------------------------------------------

// SubscribeMessageAddLoggedRequest

// -------------------------------------------------------------------

// MessageAddLoggedResponse

// .mavsdk.rpc.logging.MessageAddLogged message_add_logged = 1;
inline bool MessageAddLoggedResponse::has_message_add_logged() const {
  return this != internal_default_instance() && message_add_logged_ != nullptr;
}
inline void MessageAddLoggedResponse::clear_message_add_logged() {
  if (GetArenaNoVirtual() == nullptr && message_add_logged_ != nullptr) {
    delete message_add_logged_;
  }
  message_add_logged_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageAddLogged& MessageAddLoggedResponse::message_add_logged() const {
  const ::mavsdk::rpc::logging::MessageAddLogged* p = message_add_logged_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageAddLoggedResponse.message_add_logged)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageAddLogged*>(
      &::mavsdk::rpc::logging::_MessageAddLogged_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageAddLogged* MessageAddLoggedResponse::release_message_add_logged() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageAddLoggedResponse.message_add_logged)
  
  ::mavsdk::rpc::logging::MessageAddLogged* temp = message_add_logged_;
  message_add_logged_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageAddLogged* MessageAddLoggedResponse::mutable_message_add_logged() {
  
  if (message_add_logged_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageAddLogged>(GetArenaNoVirtual());
    message_add_logged_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageAddLoggedResponse.message_add_logged)
  return message_add_logged_;
}
inline void MessageAddLoggedResponse::set_allocated_message_add_logged(::mavsdk::rpc::logging::MessageAddLogged* message_add_logged) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_add_logged_;
  }
  if (message_add_logged) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_add_logged = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_add_logged, submessage_arena);
    }
    
  } else {
    
  }
  message_add_logged_ = message_add_logged;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageAddLoggedResponse.message_add_logged)
}

// -------------------------------------------------------------------

// MessageAddLogged

// uint32 multi_id = 1;
inline void MessageAddLogged::clear_multi_id() {
  multi_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageAddLogged::multi_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageAddLogged.multi_id)
  return multi_id_;
}
inline void MessageAddLogged::set_multi_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  multi_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageAddLogged.multi_id)
}

// uint32 msg_id = 2;
inline void MessageAddLogged::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageAddLogged::msg_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageAddLogged.msg_id)
  return msg_id_;
}
inline void MessageAddLogged::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageAddLogged.msg_id)
}

// string message_name = 3;
inline void MessageAddLogged::clear_message_name() {
  message_name_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageAddLogged::message_name() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageAddLogged.message_name)
  return _internal_message_name();
}
inline void MessageAddLogged::set_message_name(const std::string& value) {
  _internal_set_message_name(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageAddLogged.message_name)
}
inline std::string* MessageAddLogged::mutable_message_name() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageAddLogged.message_name)
  return _internal_mutable_message_name();
}
inline const std::string& MessageAddLogged::_internal_message_name() const {
  return message_name_.GetNoArena();
}
inline void MessageAddLogged::_internal_set_message_name(const std::string& value) {
  
  message_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageAddLogged::set_message_name(std::string&& value) {
  
  message_name_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageAddLogged.message_name)
}
inline void MessageAddLogged::set_message_name(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  message_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageAddLogged.message_name)
}
inline void MessageAddLogged::set_message_name(const char* value, size_t size) {
  
  message_name_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageAddLogged.message_name)
}
inline std::string* MessageAddLogged::_internal_mutable_message_name() {
  
  return message_name_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageAddLogged::release_message_name() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageAddLogged.message_name)
  
  return message_name_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageAddLogged::set_allocated_message_name(std::string* message_name) {
  if (message_name != nullptr) {
    
  } else {
    
  }
  message_name_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message_name);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageAddLogged.message_name)
}

// -------------------------------------------------------------------

// SubscribeMessageRemoveLoggedRequest

// -------------------------------------------------------------------

// MessageRemoveLoggedResponse

// .mavsdk.rpc.logging.MessageRemoveLogged message_remove_logged = 1;
inline bool MessageRemoveLoggedResponse::has_message_remove_logged() const {
  return this != internal_default_instance() && message_remove_logged_ != nullptr;
}
inline void MessageRemoveLoggedResponse::clear_message_remove_logged() {
  if (GetArenaNoVirtual() == nullptr && message_remove_logged_ != nullptr) {
    delete message_remove_logged_;
  }
  message_remove_logged_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageRemoveLogged& MessageRemoveLoggedResponse::message_remove_logged() const {
  const ::mavsdk::rpc::logging::MessageRemoveLogged* p = message_remove_logged_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageRemoveLoggedResponse.message_remove_logged)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageRemoveLogged*>(
      &::mavsdk::rpc::logging::_MessageRemoveLogged_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageRemoveLogged* MessageRemoveLoggedResponse::release_message_remove_logged() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageRemoveLoggedResponse.message_remove_logged)
  
  ::mavsdk::rpc::logging::MessageRemoveLogged* temp = message_remove_logged_;
  message_remove_logged_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageRemoveLogged* MessageRemoveLoggedResponse::mutable_message_remove_logged() {
  
  if (message_remove_logged_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageRemoveLogged>(GetArenaNoVirtual());
    message_remove_logged_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageRemoveLoggedResponse.message_remove_logged)
  return message_remove_logged_;
}
inline void MessageRemoveLoggedResponse::set_allocated_message_remove_logged(::mavsdk::rpc::logging::MessageRemoveLogged* message_remove_logged) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_remove_logged_;
  }
  if (message_remove_logged) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_remove_logged = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_remove_logged, submessage_arena);
    }
    
  } else {
    
  }
  message_remove_logged_ = message_remove_logged;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageRemoveLoggedResponse.message_remove_logged)
}

// -------------------------------------------------------------------

// MessageRemoveLogged

// uint32 msg_id = 1;
inline void MessageRemoveLogged::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageRemoveLogged::msg_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageRemoveLogged.msg_id)
  return msg_id_;
}
inline void MessageRemoveLogged::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageRemoveLogged.msg_id)
}

// -------------------------------------------------------------------

// SubscribeMessageDataRequest

// -------------------------------------------------------------------

// MessageDataResponse

// .mavsdk.rpc.logging.MessageData message_data = 1;
inline bool MessageDataResponse::has_message_data() const {
  return this != internal_default_instance() && message_data_ != nullptr;
}
inline void MessageDataResponse::clear_message_data() {
  if (GetArenaNoVirtual() == nullptr && message_data_ != nullptr) {
    delete message_data_;
  }
  message_data_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageData& MessageDataResponse::message_data() const {
  const ::mavsdk::rpc::logging::MessageData* p = message_data_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageDataResponse.message_data)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageData*>(
      &::mavsdk::rpc::logging::_MessageData_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageData* MessageDataResponse::release_message_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageDataResponse.message_data)
  
  ::mavsdk::rpc::logging::MessageData* temp = message_data_;
  message_data_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageData* MessageDataResponse::mutable_message_data() {
  
  if (message_data_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageData>(GetArenaNoVirtual());
    message_data_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageDataResponse.message_data)
  return message_data_;
}
inline void MessageDataResponse::set_allocated_message_data(::mavsdk::rpc::logging::MessageData* message_data) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_data_;
  }
  if (message_data) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_data = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_data, submessage_arena);
    }
    
  } else {
    
  }
  message_data_ = message_data;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageDataResponse.message_data)
}

// -------------------------------------------------------------------

// MessageData

// uint32 msg_id = 1;
inline void MessageData::clear_msg_id() {
  msg_id_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageData::msg_id() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageData.msg_id)
  return msg_id_;
}
inline void MessageData::set_msg_id(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  msg_id_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageData.msg_id)
}

// bytes data = 2;
inline void MessageData::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageData::data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageData.data)
  return _internal_data();
}
inline void MessageData::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageData.data)
}
inline std::string* MessageData::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageData.data)
  return _internal_mutable_data();
}
inline const std::string& MessageData::_internal_data() const {
  return data_.GetNoArena();
}
inline void MessageData::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageData::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageData.data)
}
inline void MessageData::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageData.data)
}
inline void MessageData::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageData.data)
}
inline std::string* MessageData::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageData::release_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageData.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageData::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageData.data)
}

// -------------------------------------------------------------------

// SubscribeMessageLoggingRequest

// -------------------------------------------------------------------

// MessageLoggingResponse

// .mavsdk.rpc.logging.MessageLogging message_logging = 1;
inline bool MessageLoggingResponse::has_message_logging() const {
  return this != internal_default_instance() && message_logging_ != nullptr;
}
inline void MessageLoggingResponse::clear_message_logging() {
  if (GetArenaNoVirtual() == nullptr && message_logging_ != nullptr) {
    delete message_logging_;
  }
  message_logging_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageLogging& MessageLoggingResponse::message_logging() const {
  const ::mavsdk::rpc::logging::MessageLogging* p = message_logging_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageLoggingResponse.message_logging)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageLogging*>(
      &::mavsdk::rpc::logging::_MessageLogging_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageLogging* MessageLoggingResponse::release_message_logging() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageLoggingResponse.message_logging)
  
  ::mavsdk::rpc::logging::MessageLogging* temp = message_logging_;
  message_logging_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageLogging* MessageLoggingResponse::mutable_message_logging() {
  
  if (message_logging_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageLogging>(GetArenaNoVirtual());
    message_logging_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageLoggingResponse.message_logging)
  return message_logging_;
}
inline void MessageLoggingResponse::set_allocated_message_logging(::mavsdk::rpc::logging::MessageLogging* message_logging) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_logging_;
  }
  if (message_logging) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_logging = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_logging, submessage_arena);
    }
    
  } else {
    
  }
  message_logging_ = message_logging;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageLoggingResponse.message_logging)
}

// -------------------------------------------------------------------

// MessageLogging

// .mavsdk.rpc.logging.MessageLogging.LogLevel log_level = 1;
inline void MessageLogging::clear_log_level() {
  log_level_ = 0;
}
inline ::mavsdk::rpc::logging::MessageLogging_LogLevel MessageLogging::log_level() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageLogging.log_level)
  return static_cast< ::mavsdk::rpc::logging::MessageLogging_LogLevel >(log_level_);
}
inline void MessageLogging::set_log_level(::mavsdk::rpc::logging::MessageLogging_LogLevel value) {
  
  log_level_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageLogging.log_level)
}

// uint64 timestamp = 2;
inline void MessageLogging::clear_timestamp() {
  timestamp_ = PROTOBUF_ULONGLONG(0);
}
inline ::PROTOBUF_NAMESPACE_ID::uint64 MessageLogging::timestamp() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageLogging.timestamp)
  return timestamp_;
}
inline void MessageLogging::set_timestamp(::PROTOBUF_NAMESPACE_ID::uint64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageLogging.timestamp)
}

// string data = 3;
inline void MessageLogging::clear_data() {
  data_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& MessageLogging::data() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageLogging.data)
  return _internal_data();
}
inline void MessageLogging::set_data(const std::string& value) {
  _internal_set_data(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageLogging.data)
}
inline std::string* MessageLogging::mutable_data() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageLogging.data)
  return _internal_mutable_data();
}
inline const std::string& MessageLogging::_internal_data() const {
  return data_.GetNoArena();
}
inline void MessageLogging::_internal_set_data(const std::string& value) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void MessageLogging::set_data(std::string&& value) {
  
  data_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.MessageLogging.data)
}
inline void MessageLogging::set_data(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.MessageLogging.data)
}
inline void MessageLogging::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.MessageLogging.data)
}
inline std::string* MessageLogging::_internal_mutable_data() {
  
  return data_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* MessageLogging::release_data() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageLogging.data)
  
  return data_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void MessageLogging::set_allocated_data(std::string* data) {
  if (data != nullptr) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageLogging.data)
}

// -------------------------------------------------------------------

// SubscribeMessageDropoutRequest

// -------------------------------------------------------------------

// MessageDropoutResponse

// .mavsdk.rpc.logging.MessageDropout message_dropout = 1;
inline bool MessageDropoutResponse::has_message_dropout() const {
  return this != internal_default_instance() && message_dropout_ != nullptr;
}
inline void MessageDropoutResponse::clear_message_dropout() {
  if (GetArenaNoVirtual() == nullptr && message_dropout_ != nullptr) {
    delete message_dropout_;
  }
  message_dropout_ = nullptr;
}
inline const ::mavsdk::rpc::logging::MessageDropout& MessageDropoutResponse::message_dropout() const {
  const ::mavsdk::rpc::logging::MessageDropout* p = message_dropout_;
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageDropoutResponse.message_dropout)
  return p != nullptr ? *p : *reinterpret_cast<const ::mavsdk::rpc::logging::MessageDropout*>(
      &::mavsdk::rpc::logging::_MessageDropout_default_instance_);
}
inline ::mavsdk::rpc::logging::MessageDropout* MessageDropoutResponse::release_message_dropout() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.MessageDropoutResponse.message_dropout)
  
  ::mavsdk::rpc::logging::MessageDropout* temp = message_dropout_;
  message_dropout_ = nullptr;
  return temp;
}
inline ::mavsdk::rpc::logging::MessageDropout* MessageDropoutResponse::mutable_message_dropout() {
  
  if (message_dropout_ == nullptr) {
    auto* p = CreateMaybeMessage<::mavsdk::rpc::logging::MessageDropout>(GetArenaNoVirtual());
    message_dropout_ = p;
  }
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.MessageDropoutResponse.message_dropout)
  return message_dropout_;
}
inline void MessageDropoutResponse::set_allocated_message_dropout(::mavsdk::rpc::logging::MessageDropout* message_dropout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == nullptr) {
    delete message_dropout_;
  }
  if (message_dropout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena = nullptr;
    if (message_arena != submessage_arena) {
      message_dropout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, message_dropout, submessage_arena);
    }
    
  } else {
    
  }
  message_dropout_ = message_dropout;
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.MessageDropoutResponse.message_dropout)
}

// -------------------------------------------------------------------

// MessageDropout

// uint32 duration = 1;
inline void MessageDropout::clear_duration() {
  duration_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 MessageDropout::duration() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.MessageDropout.duration)
  return duration_;
}
inline void MessageDropout::set_duration(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.MessageDropout.duration)
}

// -------------------------------------------------------------------

// LoggingResult

// .mavsdk.rpc.logging.LoggingResult.Result result = 1;
inline void LoggingResult::clear_result() {
  result_ = 0;
}
inline ::mavsdk::rpc::logging::LoggingResult_Result LoggingResult::result() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.LoggingResult.result)
  return static_cast< ::mavsdk::rpc::logging::LoggingResult_Result >(result_);
}
inline void LoggingResult::set_result(::mavsdk::rpc::logging::LoggingResult_Result value) {
  
  result_ = value;
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.LoggingResult.result)
}

// string result_str = 2;
inline void LoggingResult::clear_result_str() {
  result_str_.ClearToEmptyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline const std::string& LoggingResult::result_str() const {
  // @@protoc_insertion_point(field_get:mavsdk.rpc.logging.LoggingResult.result_str)
  return _internal_result_str();
}
inline void LoggingResult::set_result_str(const std::string& value) {
  _internal_set_result_str(value);
  // @@protoc_insertion_point(field_set:mavsdk.rpc.logging.LoggingResult.result_str)
}
inline std::string* LoggingResult::mutable_result_str() {
  // @@protoc_insertion_point(field_mutable:mavsdk.rpc.logging.LoggingResult.result_str)
  return _internal_mutable_result_str();
}
inline const std::string& LoggingResult::_internal_result_str() const {
  return result_str_.GetNoArena();
}
inline void LoggingResult::_internal_set_result_str(const std::string& value) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value);
}
inline void LoggingResult::set_result_str(std::string&& value) {
  
  result_str_.SetNoArena(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:mavsdk.rpc.logging.LoggingResult.result_str)
}
inline void LoggingResult::set_result_str(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:mavsdk.rpc.logging.LoggingResult.result_str)
}
inline void LoggingResult::set_result_str(const char* value, size_t size) {
  
  result_str_.SetNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:mavsdk.rpc.logging.LoggingResult.result_str)
}
inline std::string* LoggingResult::_internal_mutable_result_str() {
  
  return result_str_.MutableNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline std::string* LoggingResult::release_result_str() {
  // @@protoc_insertion_point(field_release:mavsdk.rpc.logging.LoggingResult.result_str)
  
  return result_str_.ReleaseNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}
inline void LoggingResult::set_allocated_result_str(std::string* result_str) {
  if (result_str != nullptr) {
    
  } else {
    
  }
  result_str_.SetAllocatedNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), result_str);
  // @@protoc_insertion_point(field_set_allocated:mavsdk.rpc.logging.LoggingResult.result_str)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::mavsdk::rpc::logging::MessageLogging_LogLevel> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::logging::MessageLogging_LogLevel>() {
  return ::mavsdk::rpc::logging::MessageLogging_LogLevel_descriptor();
}
template <> struct is_proto_enum< ::mavsdk::rpc::logging::LoggingResult_Result> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::mavsdk::rpc::logging::LoggingResult_Result>() {
  return ::mavsdk::rpc::logging::LoggingResult_Result_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_logging_2flogging_2eproto
