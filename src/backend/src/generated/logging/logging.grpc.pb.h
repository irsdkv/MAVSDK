// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: logging/logging.proto
#ifndef GRPC_logging_2flogging_2eproto__INCLUDED
#define GRPC_logging_2flogging_2eproto__INCLUDED

#include "logging/logging.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mavsdk {
namespace rpc {
namespace logging {

class LoggingService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.logging.LoggingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // Send command to start streaming logging data over MAVLink
    virtual ::grpc::Status StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::mavsdk::rpc::logging::StartLoggingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>> AsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>>(AsyncStartLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>> PrepareAsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>>(PrepareAsyncStartLoggingRaw(context, request, cq));
    }
    // Send command to stop streaming logging data over MAVLink
    virtual ::grpc::Status StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::mavsdk::rpc::logging::StopLoggingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>> AsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>>(AsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>> PrepareAsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>>(PrepareAsyncStopLoggingRaw(context, request, cq));
    }
    // Subscribe to logging messages
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>> SubscribeLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>>(SubscribeLoggingRawRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>> AsyncSubscribeLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>>(AsyncSubscribeLoggingRawRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>> PrepareAsyncSubscribeLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>>(PrepareAsyncSubscribeLoggingRawRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      // Send command to start streaming logging data over MAVLink
      virtual void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Send command to stop streaming logging data over MAVLink
      virtual void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      // Subscribe to logging messages
      virtual void SubscribeLoggingRaw(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::LoggingRawResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>* AsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>* PrepareAsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>* AsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>* PrepareAsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>* SubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>* AsyncSubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::LoggingRawResponse>* PrepareAsyncSubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>> AsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>>(AsyncStartLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>> PrepareAsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>>(PrepareAsyncStartLoggingRaw(context, request, cq));
    }
    ::grpc::Status StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>> AsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>>(AsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>> PrepareAsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>>(PrepareAsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::LoggingRawResponse>> SubscribeLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::LoggingRawResponse>>(SubscribeLoggingRawRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>> AsyncSubscribeLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>>(AsyncSubscribeLoggingRawRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>> PrepareAsyncSubscribeLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>>(PrepareAsyncSubscribeLoggingRawRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubscribeLoggingRaw(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::LoggingRawResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* AsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* PrepareAsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* AsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* PrepareAsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::LoggingRawResponse>* SubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>* AsyncSubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::LoggingRawResponse>* PrepareAsyncSubscribeLoggingRawRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartLogging_;
    const ::grpc::internal::RpcMethod rpcmethod_StopLogging_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeLoggingRaw_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // Send command to start streaming logging data over MAVLink
    virtual ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response);
    // Send command to stop streaming logging data over MAVLink
    virtual ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response);
    // Subscribe to logging messages
    virtual ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartLogging() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartLogging(::grpc::ServerContext* context, ::mavsdk::rpc::logging::StartLoggingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::logging::StartLoggingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopLogging() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLogging(::grpc::ServerContext* context, ::mavsdk::rpc::logging::StopLoggingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::logging::StopLoggingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeLoggingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeLoggingRaw() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeLoggingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeLoggingRaw(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartLogging<WithAsyncMethod_StopLogging<WithAsyncMethod_SubscribeLoggingRaw<Service > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StartLogging() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::logging::StartLoggingRequest* request,
                 ::mavsdk::rpc::logging::StartLoggingResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StartLogging(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_StartLogging(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StopLogging() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::logging::StopLoggingRequest* request,
                 ::mavsdk::rpc::logging::StopLoggingResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StopLogging(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_StopLogging(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeLoggingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeLoggingRaw() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeLoggingRawRequest, ::mavsdk::rpc::logging::LoggingRawResponse>(
          [this] { return this->SubscribeLoggingRaw(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeLoggingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeLoggingRawRequest, ::mavsdk::rpc::logging::LoggingRawResponse>* SubscribeLoggingRaw() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeLoggingRawRequest, ::mavsdk::rpc::logging::LoggingRawResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_StartLogging<ExperimentalWithCallbackMethod_StopLogging<ExperimentalWithCallbackMethod_SubscribeLoggingRaw<Service > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartLogging() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopLogging() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeLoggingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeLoggingRaw() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeLoggingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StartLogging() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartLogging(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopLogging() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLogging(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeLoggingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeLoggingRaw() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeLoggingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeLoggingRaw(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StartLogging() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StartLogging(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StartLogging(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StopLogging() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StopLogging(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopLogging(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeLoggingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeLoggingRaw() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeLoggingRaw(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeLoggingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeLoggingRaw() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartLogging() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>(std::bind(&WithStreamedUnaryMethod_StartLogging<BaseClass>::StreamedStartLogging, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartLogging(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::logging::StartLoggingRequest,::mavsdk::rpc::logging::StartLoggingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopLogging() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>(std::bind(&WithStreamedUnaryMethod_StopLogging<BaseClass>::StreamedStopLogging, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopLogging(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::logging::StopLoggingRequest,::mavsdk::rpc::logging::StopLoggingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartLogging<WithStreamedUnaryMethod_StopLogging<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeLoggingRaw : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeLoggingRaw() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeLoggingRawRequest, ::mavsdk::rpc::logging::LoggingRawResponse>(std::bind(&WithSplitStreamingMethod_SubscribeLoggingRaw<BaseClass>::StreamedSubscribeLoggingRaw, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeLoggingRaw() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeLoggingRaw(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeLoggingRawRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::LoggingRawResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeLoggingRaw(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeLoggingRawRequest,::mavsdk::rpc::logging::LoggingRawResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeLoggingRaw<Service > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartLogging<WithStreamedUnaryMethod_StopLogging<WithSplitStreamingMethod_SubscribeLoggingRaw<Service > > > StreamedService;
};

}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_logging_2flogging_2eproto__INCLUDED
