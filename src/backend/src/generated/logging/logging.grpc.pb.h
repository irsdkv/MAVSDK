// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: logging/logging.proto
#ifndef GRPC_logging_2flogging_2eproto__INCLUDED
#define GRPC_logging_2flogging_2eproto__INCLUDED

#include "logging/logging.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_generic_service.h>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/proto_utils.h>
#include <grpcpp/impl/codegen/rpc_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/status.h>
#include <grpcpp/impl/codegen/stub_options.h>
#include <grpcpp/impl/codegen/sync_stream.h>

namespace grpc_impl {
class CompletionQueue;
class ServerCompletionQueue;
class ServerContext;
}  // namespace grpc_impl

namespace grpc {
namespace experimental {
template <typename RequestT, typename ResponseT>
class MessageAllocator;
}  // namespace experimental
}  // namespace grpc

namespace mavsdk {
namespace rpc {
namespace logging {

class LoggingService final {
 public:
  static constexpr char const* service_full_name() {
    return "mavsdk.rpc.logging.LoggingService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    virtual ::grpc::Status StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::mavsdk::rpc::logging::StartLoggingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>> AsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>>(AsyncStartLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>> PrepareAsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>>(PrepareAsyncStartLoggingRaw(context, request, cq));
    }
    virtual ::grpc::Status StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::mavsdk::rpc::logging::StopLoggingResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>> AsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>>(AsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>> PrepareAsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>>(PrepareAsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>> SubscribeMessageFlagBits(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>>(SubscribeMessageFlagBitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>> AsyncSubscribeMessageFlagBits(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>>(AsyncSubscribeMessageFlagBitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>> PrepareAsyncSubscribeMessageFlagBits(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>>(PrepareAsyncSubscribeMessageFlagBitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>> SubscribeMessageFormat(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>>(SubscribeMessageFormatRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>> AsyncSubscribeMessageFormat(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>>(AsyncSubscribeMessageFormatRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>> PrepareAsyncSubscribeMessageFormat(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>>(PrepareAsyncSubscribeMessageFormatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>> SubscribeMessageInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>>(SubscribeMessageInfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>> AsyncSubscribeMessageInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>>(AsyncSubscribeMessageInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>> PrepareAsyncSubscribeMessageInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>>(PrepareAsyncSubscribeMessageInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>> SubscribeMessageInfoMultiple(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>>(SubscribeMessageInfoMultipleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>> AsyncSubscribeMessageInfoMultiple(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>>(AsyncSubscribeMessageInfoMultipleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>> PrepareAsyncSubscribeMessageInfoMultiple(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>>(PrepareAsyncSubscribeMessageInfoMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>> SubscribeMessageParameter(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>>(SubscribeMessageParameterRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>> AsyncSubscribeMessageParameter(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>>(AsyncSubscribeMessageParameterRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>> PrepareAsyncSubscribeMessageParameter(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>>(PrepareAsyncSubscribeMessageParameterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>> SubscribeMessageAddLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>>(SubscribeMessageAddLoggedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>> AsyncSubscribeMessageAddLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>>(AsyncSubscribeMessageAddLoggedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>> PrepareAsyncSubscribeMessageAddLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>>(PrepareAsyncSubscribeMessageAddLoggedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>> SubscribeMessageRemoveLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>>(SubscribeMessageRemoveLoggedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>> AsyncSubscribeMessageRemoveLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>>(AsyncSubscribeMessageRemoveLoggedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>> PrepareAsyncSubscribeMessageRemoveLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>>(PrepareAsyncSubscribeMessageRemoveLoggedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>> SubscribeMessageData(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>>(SubscribeMessageDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>> AsyncSubscribeMessageData(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>>(AsyncSubscribeMessageDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>> PrepareAsyncSubscribeMessageData(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>>(PrepareAsyncSubscribeMessageDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>> SubscribeMessageLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>>(SubscribeMessageLoggingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>> AsyncSubscribeMessageLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>>(AsyncSubscribeMessageLoggingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>> PrepareAsyncSubscribeMessageLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>>(PrepareAsyncSubscribeMessageLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>> SubscribeMessageDropout(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request) {
      return std::unique_ptr< ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>>(SubscribeMessageDropoutRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>> AsyncSubscribeMessageDropout(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>>(AsyncSubscribeMessageDropoutRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>> PrepareAsyncSubscribeMessageDropout(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>>(PrepareAsyncSubscribeMessageDropoutRaw(context, request, cq));
    }
    class experimental_async_interface {
     public:
      virtual ~experimental_async_interface() {}
      virtual void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) = 0;
      virtual void SubscribeMessageFlagBits(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* reactor) = 0;
      virtual void SubscribeMessageFormat(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageFormatResponse>* reactor) = 0;
      virtual void SubscribeMessageInfo(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageInfoResponse>* reactor) = 0;
      virtual void SubscribeMessageInfoMultiple(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* reactor) = 0;
      virtual void SubscribeMessageParameter(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageParameterResponse>* reactor) = 0;
      virtual void SubscribeMessageAddLogged(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* reactor) = 0;
      virtual void SubscribeMessageRemoveLogged(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* reactor) = 0;
      virtual void SubscribeMessageData(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageDataResponse>* reactor) = 0;
      virtual void SubscribeMessageLogging(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageLoggingResponse>* reactor) = 0;
      virtual void SubscribeMessageDropout(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageDropoutResponse>* reactor) = 0;
    };
    virtual class experimental_async_interface* experimental_async() { return nullptr; }
  private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>* AsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StartLoggingResponse>* PrepareAsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>* AsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::mavsdk::rpc::logging::StopLoggingResponse>* PrepareAsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* SubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* AsyncSubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* PrepareAsyncSubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>* SubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>* AsyncSubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageFormatResponse>* PrepareAsyncSubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>* SubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>* AsyncSubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoResponse>* PrepareAsyncSubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* SubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* AsyncSubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* PrepareAsyncSubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>* SubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>* AsyncSubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageParameterResponse>* PrepareAsyncSubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* SubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* AsyncSubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* PrepareAsyncSubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* SubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* AsyncSubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* PrepareAsyncSubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>* SubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>* AsyncSubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDataResponse>* PrepareAsyncSubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>* SubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>* AsyncSubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageLoggingResponse>* PrepareAsyncSubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>* SubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>* AsyncSubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq, void* tag) = 0;
    virtual ::grpc::ClientAsyncReaderInterface< ::mavsdk::rpc::logging::MessageDropoutResponse>* PrepareAsyncSubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel);
    ::grpc::Status StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>> AsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>>(AsyncStartLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>> PrepareAsyncStartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>>(PrepareAsyncStartLoggingRaw(context, request, cq));
    }
    ::grpc::Status StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>> AsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>>(AsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>> PrepareAsyncStopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>>(PrepareAsyncStopLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>> SubscribeMessageFlagBits(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>>(SubscribeMessageFlagBitsRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>> AsyncSubscribeMessageFlagBits(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>>(AsyncSubscribeMessageFlagBitsRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>> PrepareAsyncSubscribeMessageFlagBits(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>>(PrepareAsyncSubscribeMessageFlagBitsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFormatResponse>> SubscribeMessageFormat(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFormatResponse>>(SubscribeMessageFormatRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>> AsyncSubscribeMessageFormat(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>>(AsyncSubscribeMessageFormatRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>> PrepareAsyncSubscribeMessageFormat(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>>(PrepareAsyncSubscribeMessageFormatRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoResponse>> SubscribeMessageInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoResponse>>(SubscribeMessageInfoRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>> AsyncSubscribeMessageInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>>(AsyncSubscribeMessageInfoRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>> PrepareAsyncSubscribeMessageInfo(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>>(PrepareAsyncSubscribeMessageInfoRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>> SubscribeMessageInfoMultiple(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>>(SubscribeMessageInfoMultipleRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>> AsyncSubscribeMessageInfoMultiple(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>>(AsyncSubscribeMessageInfoMultipleRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>> PrepareAsyncSubscribeMessageInfoMultiple(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>>(PrepareAsyncSubscribeMessageInfoMultipleRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageParameterResponse>> SubscribeMessageParameter(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageParameterResponse>>(SubscribeMessageParameterRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>> AsyncSubscribeMessageParameter(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>>(AsyncSubscribeMessageParameterRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>> PrepareAsyncSubscribeMessageParameter(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>>(PrepareAsyncSubscribeMessageParameterRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>> SubscribeMessageAddLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>>(SubscribeMessageAddLoggedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>> AsyncSubscribeMessageAddLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>>(AsyncSubscribeMessageAddLoggedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>> PrepareAsyncSubscribeMessageAddLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>>(PrepareAsyncSubscribeMessageAddLoggedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>> SubscribeMessageRemoveLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>>(SubscribeMessageRemoveLoggedRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>> AsyncSubscribeMessageRemoveLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>>(AsyncSubscribeMessageRemoveLoggedRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>> PrepareAsyncSubscribeMessageRemoveLogged(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>>(PrepareAsyncSubscribeMessageRemoveLoggedRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDataResponse>> SubscribeMessageData(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDataResponse>>(SubscribeMessageDataRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>> AsyncSubscribeMessageData(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>>(AsyncSubscribeMessageDataRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>> PrepareAsyncSubscribeMessageData(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>>(PrepareAsyncSubscribeMessageDataRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageLoggingResponse>> SubscribeMessageLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageLoggingResponse>>(SubscribeMessageLoggingRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>> AsyncSubscribeMessageLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>>(AsyncSubscribeMessageLoggingRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>> PrepareAsyncSubscribeMessageLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>>(PrepareAsyncSubscribeMessageLoggingRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDropoutResponse>> SubscribeMessageDropout(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request) {
      return std::unique_ptr< ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDropoutResponse>>(SubscribeMessageDropoutRaw(context, request));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>> AsyncSubscribeMessageDropout(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>>(AsyncSubscribeMessageDropoutRaw(context, request, cq, tag));
    }
    std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>> PrepareAsyncSubscribeMessageDropout(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>>(PrepareAsyncSubscribeMessageDropoutRaw(context, request, cq));
    }
    class experimental_async final :
      public StubInterface::experimental_async_interface {
     public:
      void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StartLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StartLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, std::function<void(::grpc::Status)>) override;
      void StopLogging(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void StopLogging(::grpc::ClientContext* context, const ::grpc::ByteBuffer* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ClientUnaryReactor* reactor) override;
      void SubscribeMessageFlagBits(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* reactor) override;
      void SubscribeMessageFormat(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageFormatResponse>* reactor) override;
      void SubscribeMessageInfo(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageInfoResponse>* reactor) override;
      void SubscribeMessageInfoMultiple(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* reactor) override;
      void SubscribeMessageParameter(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageParameterResponse>* reactor) override;
      void SubscribeMessageAddLogged(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* reactor) override;
      void SubscribeMessageRemoveLogged(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* reactor) override;
      void SubscribeMessageData(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageDataResponse>* reactor) override;
      void SubscribeMessageLogging(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageLoggingResponse>* reactor) override;
      void SubscribeMessageDropout(::grpc::ClientContext* context, ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::experimental::ClientReadReactor< ::mavsdk::rpc::logging::MessageDropoutResponse>* reactor) override;
     private:
      friend class Stub;
      explicit experimental_async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class experimental_async_interface* experimental_async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class experimental_async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* AsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StartLoggingResponse>* PrepareAsyncStartLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* AsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::mavsdk::rpc::logging::StopLoggingResponse>* PrepareAsyncStopLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* SubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* AsyncSubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* PrepareAsyncSubscribeMessageFlagBitsRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageFormatResponse>* SubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>* AsyncSubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageFormatResponse>* PrepareAsyncSubscribeMessageFormatRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoResponse>* SubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>* AsyncSubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoResponse>* PrepareAsyncSubscribeMessageInfoRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* SubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* AsyncSubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* PrepareAsyncSubscribeMessageInfoMultipleRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageParameterResponse>* SubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>* AsyncSubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageParameterResponse>* PrepareAsyncSubscribeMessageParameterRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* SubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* AsyncSubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* PrepareAsyncSubscribeMessageAddLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* SubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* AsyncSubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* PrepareAsyncSubscribeMessageRemoveLoggedRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDataResponse>* SubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>* AsyncSubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDataResponse>* PrepareAsyncSubscribeMessageDataRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageLoggingResponse>* SubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>* AsyncSubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageLoggingResponse>* PrepareAsyncSubscribeMessageLoggingRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientReader< ::mavsdk::rpc::logging::MessageDropoutResponse>* SubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>* AsyncSubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq, void* tag) override;
    ::grpc::ClientAsyncReader< ::mavsdk::rpc::logging::MessageDropoutResponse>* PrepareAsyncSubscribeMessageDropoutRaw(::grpc::ClientContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_StartLogging_;
    const ::grpc::internal::RpcMethod rpcmethod_StopLogging_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageFlagBits_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageFormat_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageInfo_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageInfoMultiple_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageParameter_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageAddLogged_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageRemoveLogged_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageData_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageLogging_;
    const ::grpc::internal::RpcMethod rpcmethod_SubscribeMessageDropout_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    virtual ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response);
    virtual ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response);
    virtual ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer);
    virtual ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer);
    virtual ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer);
    virtual ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer);
    virtual ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer);
    virtual ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer);
    virtual ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer);
    virtual ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer);
    virtual ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer);
    virtual ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer);
  };
  template <class BaseClass>
  class WithAsyncMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StartLogging() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartLogging(::grpc::ServerContext* context, ::mavsdk::rpc::logging::StartLoggingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::logging::StartLoggingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_StopLogging() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLogging(::grpc::ServerContext* context, ::mavsdk::rpc::logging::StopLoggingRequest* request, ::grpc::ServerAsyncResponseWriter< ::mavsdk::rpc::logging::StopLoggingResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageFlagBits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageFlagBits() {
      ::grpc::Service::MarkMethodAsync(2);
    }
    ~WithAsyncMethod_SubscribeMessageFlagBits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageFlagBits(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageFormat() {
      ::grpc::Service::MarkMethodAsync(3);
    }
    ~WithAsyncMethod_SubscribeMessageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageFormat(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageInfo() {
      ::grpc::Service::MarkMethodAsync(4);
    }
    ~WithAsyncMethod_SubscribeMessageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageInfo(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageInfoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageInfoMultiple() {
      ::grpc::Service::MarkMethodAsync(5);
    }
    ~WithAsyncMethod_SubscribeMessageInfoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageInfoMultiple(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageParameter() {
      ::grpc::Service::MarkMethodAsync(6);
    }
    ~WithAsyncMethod_SubscribeMessageParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageParameter(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageAddLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageAddLogged() {
      ::grpc::Service::MarkMethodAsync(7);
    }
    ~WithAsyncMethod_SubscribeMessageAddLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageAddLogged(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageRemoveLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageRemoveLogged() {
      ::grpc::Service::MarkMethodAsync(8);
    }
    ~WithAsyncMethod_SubscribeMessageRemoveLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageRemoveLogged(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageData() {
      ::grpc::Service::MarkMethodAsync(9);
    }
    ~WithAsyncMethod_SubscribeMessageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageData(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageLogging() {
      ::grpc::Service::MarkMethodAsync(10);
    }
    ~WithAsyncMethod_SubscribeMessageLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageLogging(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_SubscribeMessageDropout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithAsyncMethod_SubscribeMessageDropout() {
      ::grpc::Service::MarkMethodAsync(11);
    }
    ~WithAsyncMethod_SubscribeMessageDropout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageDropout(::grpc::ServerContext* context, ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerAsyncWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_StartLogging<WithAsyncMethod_StopLogging<WithAsyncMethod_SubscribeMessageFlagBits<WithAsyncMethod_SubscribeMessageFormat<WithAsyncMethod_SubscribeMessageInfo<WithAsyncMethod_SubscribeMessageInfoMultiple<WithAsyncMethod_SubscribeMessageParameter<WithAsyncMethod_SubscribeMessageAddLogged<WithAsyncMethod_SubscribeMessageRemoveLogged<WithAsyncMethod_SubscribeMessageData<WithAsyncMethod_SubscribeMessageLogging<WithAsyncMethod_SubscribeMessageDropout<Service > > > > > > > > > > > > AsyncService;
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StartLogging() {
      ::grpc::Service::experimental().MarkMethodCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::logging::StartLoggingRequest* request,
                 ::mavsdk::rpc::logging::StartLoggingResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StartLogging(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_StartLogging(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>*>(
          ::grpc::Service::experimental().GetHandler(0))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_StopLogging() {
      ::grpc::Service::experimental().MarkMethodCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>(
          [this](::grpc::ServerContext* context,
                 const ::mavsdk::rpc::logging::StopLoggingRequest* request,
                 ::mavsdk::rpc::logging::StopLoggingResponse* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   return this->StopLogging(context, request, response, controller);
                 }));
    }
    void SetMessageAllocatorFor_StopLogging(
        ::grpc::experimental::MessageAllocator< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>* allocator) {
      static_cast<::grpc::internal::CallbackUnaryHandler< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>*>(
          ::grpc::Service::experimental().GetHandler(1))
              ->SetMessageAllocator(allocator);
    }
    ~ExperimentalWithCallbackMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageFlagBits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageFlagBits() {
      ::grpc::Service::experimental().MarkMethodCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest, ::mavsdk::rpc::logging::MessageFlagBitsResponse>(
          [this] { return this->SubscribeMessageFlagBits(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageFlagBits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest, ::mavsdk::rpc::logging::MessageFlagBitsResponse>* SubscribeMessageFlagBits() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest, ::mavsdk::rpc::logging::MessageFlagBitsResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageFormat() {
      ::grpc::Service::experimental().MarkMethodCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageFormatRequest, ::mavsdk::rpc::logging::MessageFormatResponse>(
          [this] { return this->SubscribeMessageFormat(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageFormatRequest, ::mavsdk::rpc::logging::MessageFormatResponse>* SubscribeMessageFormat() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageFormatRequest, ::mavsdk::rpc::logging::MessageFormatResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageInfo() {
      ::grpc::Service::experimental().MarkMethodCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageInfoRequest, ::mavsdk::rpc::logging::MessageInfoResponse>(
          [this] { return this->SubscribeMessageInfo(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageInfoRequest, ::mavsdk::rpc::logging::MessageInfoResponse>* SubscribeMessageInfo() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageInfoRequest, ::mavsdk::rpc::logging::MessageInfoResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageInfoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageInfoMultiple() {
      ::grpc::Service::experimental().MarkMethodCallback(5,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest, ::mavsdk::rpc::logging::MessageInfoMultipleResponse>(
          [this] { return this->SubscribeMessageInfoMultiple(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageInfoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest, ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* SubscribeMessageInfoMultiple() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest, ::mavsdk::rpc::logging::MessageInfoMultipleResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageParameter() {
      ::grpc::Service::experimental().MarkMethodCallback(6,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageParameterRequest, ::mavsdk::rpc::logging::MessageParameterResponse>(
          [this] { return this->SubscribeMessageParameter(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageParameterRequest, ::mavsdk::rpc::logging::MessageParameterResponse>* SubscribeMessageParameter() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageParameterRequest, ::mavsdk::rpc::logging::MessageParameterResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageAddLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageAddLogged() {
      ::grpc::Service::experimental().MarkMethodCallback(7,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest, ::mavsdk::rpc::logging::MessageAddLoggedResponse>(
          [this] { return this->SubscribeMessageAddLogged(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageAddLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest, ::mavsdk::rpc::logging::MessageAddLoggedResponse>* SubscribeMessageAddLogged() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest, ::mavsdk::rpc::logging::MessageAddLoggedResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageRemoveLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageRemoveLogged() {
      ::grpc::Service::experimental().MarkMethodCallback(8,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest, ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>(
          [this] { return this->SubscribeMessageRemoveLogged(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageRemoveLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest, ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* SubscribeMessageRemoveLogged() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest, ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageData() {
      ::grpc::Service::experimental().MarkMethodCallback(9,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageDataRequest, ::mavsdk::rpc::logging::MessageDataResponse>(
          [this] { return this->SubscribeMessageData(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageDataRequest, ::mavsdk::rpc::logging::MessageDataResponse>* SubscribeMessageData() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageDataRequest, ::mavsdk::rpc::logging::MessageDataResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageLogging() {
      ::grpc::Service::experimental().MarkMethodCallback(10,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest, ::mavsdk::rpc::logging::MessageLoggingResponse>(
          [this] { return this->SubscribeMessageLogging(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest, ::mavsdk::rpc::logging::MessageLoggingResponse>* SubscribeMessageLogging() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest, ::mavsdk::rpc::logging::MessageLoggingResponse>;}
  };
  template <class BaseClass>
  class ExperimentalWithCallbackMethod_SubscribeMessageDropout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithCallbackMethod_SubscribeMessageDropout() {
      ::grpc::Service::experimental().MarkMethodCallback(11,
        new ::grpc::internal::CallbackServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest, ::mavsdk::rpc::logging::MessageDropoutResponse>(
          [this] { return this->SubscribeMessageDropout(); }));
    }
    ~ExperimentalWithCallbackMethod_SubscribeMessageDropout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest, ::mavsdk::rpc::logging::MessageDropoutResponse>* SubscribeMessageDropout() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest, ::mavsdk::rpc::logging::MessageDropoutResponse>;}
  };
  typedef ExperimentalWithCallbackMethod_StartLogging<ExperimentalWithCallbackMethod_StopLogging<ExperimentalWithCallbackMethod_SubscribeMessageFlagBits<ExperimentalWithCallbackMethod_SubscribeMessageFormat<ExperimentalWithCallbackMethod_SubscribeMessageInfo<ExperimentalWithCallbackMethod_SubscribeMessageInfoMultiple<ExperimentalWithCallbackMethod_SubscribeMessageParameter<ExperimentalWithCallbackMethod_SubscribeMessageAddLogged<ExperimentalWithCallbackMethod_SubscribeMessageRemoveLogged<ExperimentalWithCallbackMethod_SubscribeMessageData<ExperimentalWithCallbackMethod_SubscribeMessageLogging<ExperimentalWithCallbackMethod_SubscribeMessageDropout<Service > > > > > > > > > > > > ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StartLogging() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_StopLogging() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageFlagBits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageFlagBits() {
      ::grpc::Service::MarkMethodGeneric(2);
    }
    ~WithGenericMethod_SubscribeMessageFlagBits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageFormat() {
      ::grpc::Service::MarkMethodGeneric(3);
    }
    ~WithGenericMethod_SubscribeMessageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageInfo() {
      ::grpc::Service::MarkMethodGeneric(4);
    }
    ~WithGenericMethod_SubscribeMessageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageInfoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageInfoMultiple() {
      ::grpc::Service::MarkMethodGeneric(5);
    }
    ~WithGenericMethod_SubscribeMessageInfoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageParameter() {
      ::grpc::Service::MarkMethodGeneric(6);
    }
    ~WithGenericMethod_SubscribeMessageParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageAddLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageAddLogged() {
      ::grpc::Service::MarkMethodGeneric(7);
    }
    ~WithGenericMethod_SubscribeMessageAddLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageRemoveLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageRemoveLogged() {
      ::grpc::Service::MarkMethodGeneric(8);
    }
    ~WithGenericMethod_SubscribeMessageRemoveLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageData() {
      ::grpc::Service::MarkMethodGeneric(9);
    }
    ~WithGenericMethod_SubscribeMessageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageLogging() {
      ::grpc::Service::MarkMethodGeneric(10);
    }
    ~WithGenericMethod_SubscribeMessageLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_SubscribeMessageDropout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithGenericMethod_SubscribeMessageDropout() {
      ::grpc::Service::MarkMethodGeneric(11);
    }
    ~WithGenericMethod_SubscribeMessageDropout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StartLogging() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStartLogging(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_StopLogging() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestStopLogging(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageFlagBits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageFlagBits() {
      ::grpc::Service::MarkMethodRaw(2);
    }
    ~WithRawMethod_SubscribeMessageFlagBits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageFlagBits(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(2, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageFormat() {
      ::grpc::Service::MarkMethodRaw(3);
    }
    ~WithRawMethod_SubscribeMessageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageFormat(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(3, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageInfo() {
      ::grpc::Service::MarkMethodRaw(4);
    }
    ~WithRawMethod_SubscribeMessageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageInfo(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(4, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageInfoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageInfoMultiple() {
      ::grpc::Service::MarkMethodRaw(5);
    }
    ~WithRawMethod_SubscribeMessageInfoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageInfoMultiple(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(5, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageParameter() {
      ::grpc::Service::MarkMethodRaw(6);
    }
    ~WithRawMethod_SubscribeMessageParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageParameter(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(6, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageAddLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageAddLogged() {
      ::grpc::Service::MarkMethodRaw(7);
    }
    ~WithRawMethod_SubscribeMessageAddLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageAddLogged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(7, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageRemoveLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageRemoveLogged() {
      ::grpc::Service::MarkMethodRaw(8);
    }
    ~WithRawMethod_SubscribeMessageRemoveLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageRemoveLogged(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(8, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageData() {
      ::grpc::Service::MarkMethodRaw(9);
    }
    ~WithRawMethod_SubscribeMessageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageData(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(9, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageLogging() {
      ::grpc::Service::MarkMethodRaw(10);
    }
    ~WithRawMethod_SubscribeMessageLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageLogging(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(10, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_SubscribeMessageDropout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithRawMethod_SubscribeMessageDropout() {
      ::grpc::Service::MarkMethodRaw(11);
    }
    ~WithRawMethod_SubscribeMessageDropout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestSubscribeMessageDropout(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncWriter< ::grpc::ByteBuffer>* writer, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncServerStreaming(11, context, request, writer, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StartLogging() {
      ::grpc::Service::experimental().MarkMethodRawCallback(0,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StartLogging(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StartLogging(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_StopLogging() {
      ::grpc::Service::experimental().MarkMethodRawCallback(1,
        new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this](::grpc::ServerContext* context,
                 const ::grpc::ByteBuffer* request,
                 ::grpc::ByteBuffer* response,
                 ::grpc::experimental::ServerCallbackRpcController* controller) {
                   this->StopLogging(context, request, response, controller);
                 }));
    }
    ~ExperimentalWithRawCallbackMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual void StopLogging(::grpc::ServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response, ::grpc::experimental::ServerCallbackRpcController* controller) { controller->Finish(::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "")); }
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageFlagBits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageFlagBits() {
      ::grpc::Service::experimental().MarkMethodRawCallback(2,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageFlagBits(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageFlagBits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageFlagBits() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageFormat() {
      ::grpc::Service::experimental().MarkMethodRawCallback(3,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageFormat(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageFormat() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageInfo() {
      ::grpc::Service::experimental().MarkMethodRawCallback(4,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageInfo(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageInfo() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageInfoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageInfoMultiple() {
      ::grpc::Service::experimental().MarkMethodRawCallback(5,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageInfoMultiple(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageInfoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageInfoMultiple() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageParameter() {
      ::grpc::Service::experimental().MarkMethodRawCallback(6,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageParameter(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageParameter() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageAddLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageAddLogged() {
      ::grpc::Service::experimental().MarkMethodRawCallback(7,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageAddLogged(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageAddLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageAddLogged() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageRemoveLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageRemoveLogged() {
      ::grpc::Service::experimental().MarkMethodRawCallback(8,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageRemoveLogged(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageRemoveLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageRemoveLogged() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageData() {
      ::grpc::Service::experimental().MarkMethodRawCallback(9,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageData(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageData() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageLogging() {
      ::grpc::Service::experimental().MarkMethodRawCallback(10,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageLogging(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageLogging() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class ExperimentalWithRawCallbackMethod_SubscribeMessageDropout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    ExperimentalWithRawCallbackMethod_SubscribeMessageDropout() {
      ::grpc::Service::experimental().MarkMethodRawCallback(11,
        new ::grpc::internal::CallbackServerStreamingHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
          [this] { return this->SubscribeMessageDropout(); }));
    }
    ~ExperimentalWithRawCallbackMethod_SubscribeMessageDropout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::experimental::ServerWriteReactor< ::grpc::ByteBuffer, ::grpc::ByteBuffer>* SubscribeMessageDropout() {
      return new ::grpc::internal::UnimplementedWriteReactor<
        ::grpc::ByteBuffer, ::grpc::ByteBuffer>;}
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StartLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StartLogging() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::logging::StartLoggingRequest, ::mavsdk::rpc::logging::StartLoggingResponse>(std::bind(&WithStreamedUnaryMethod_StartLogging<BaseClass>::StreamedStartLogging, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StartLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StartLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StartLoggingRequest* request, ::mavsdk::rpc::logging::StartLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStartLogging(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::logging::StartLoggingRequest,::mavsdk::rpc::logging::StartLoggingResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_StopLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithStreamedUnaryMethod_StopLogging() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler< ::mavsdk::rpc::logging::StopLoggingRequest, ::mavsdk::rpc::logging::StopLoggingResponse>(std::bind(&WithStreamedUnaryMethod_StopLogging<BaseClass>::StreamedStopLogging, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithStreamedUnaryMethod_StopLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status StopLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::StopLoggingRequest* request, ::mavsdk::rpc::logging::StopLoggingResponse* response) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedStopLogging(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::mavsdk::rpc::logging::StopLoggingRequest,::mavsdk::rpc::logging::StopLoggingResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_StartLogging<WithStreamedUnaryMethod_StopLogging<Service > > StreamedUnaryService;
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageFlagBits : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageFlagBits() {
      ::grpc::Service::MarkMethodStreamed(2,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest, ::mavsdk::rpc::logging::MessageFlagBitsResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageFlagBits<BaseClass>::StreamedSubscribeMessageFlagBits, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageFlagBits() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageFlagBits(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFlagBitsResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageFlagBits(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageFlagBitsRequest,::mavsdk::rpc::logging::MessageFlagBitsResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageFormat : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageFormat() {
      ::grpc::Service::MarkMethodStreamed(3,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageFormatRequest, ::mavsdk::rpc::logging::MessageFormatResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageFormat<BaseClass>::StreamedSubscribeMessageFormat, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageFormat() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageFormat(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageFormatRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageFormatResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageFormat(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageFormatRequest,::mavsdk::rpc::logging::MessageFormatResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageInfo : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageInfo() {
      ::grpc::Service::MarkMethodStreamed(4,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageInfoRequest, ::mavsdk::rpc::logging::MessageInfoResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageInfo<BaseClass>::StreamedSubscribeMessageInfo, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageInfo() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageInfo(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageInfo(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageInfoRequest,::mavsdk::rpc::logging::MessageInfoResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageInfoMultiple : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageInfoMultiple() {
      ::grpc::Service::MarkMethodStreamed(5,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest, ::mavsdk::rpc::logging::MessageInfoMultipleResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageInfoMultiple<BaseClass>::StreamedSubscribeMessageInfoMultiple, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageInfoMultiple() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageInfoMultiple(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageInfoMultipleResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageInfoMultiple(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageInfoMultipleRequest,::mavsdk::rpc::logging::MessageInfoMultipleResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageParameter : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageParameter() {
      ::grpc::Service::MarkMethodStreamed(6,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageParameterRequest, ::mavsdk::rpc::logging::MessageParameterResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageParameter<BaseClass>::StreamedSubscribeMessageParameter, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageParameter() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageParameter(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageParameterRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageParameterResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageParameter(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageParameterRequest,::mavsdk::rpc::logging::MessageParameterResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageAddLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageAddLogged() {
      ::grpc::Service::MarkMethodStreamed(7,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest, ::mavsdk::rpc::logging::MessageAddLoggedResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageAddLogged<BaseClass>::StreamedSubscribeMessageAddLogged, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageAddLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageAddLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageAddLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageAddLogged(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageAddLoggedRequest,::mavsdk::rpc::logging::MessageAddLoggedResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageRemoveLogged : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageRemoveLogged() {
      ::grpc::Service::MarkMethodStreamed(8,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest, ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageRemoveLogged<BaseClass>::StreamedSubscribeMessageRemoveLogged, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageRemoveLogged() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageRemoveLogged(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageRemoveLogged(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageRemoveLoggedRequest,::mavsdk::rpc::logging::MessageRemoveLoggedResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageData : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageData() {
      ::grpc::Service::MarkMethodStreamed(9,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageDataRequest, ::mavsdk::rpc::logging::MessageDataResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageData<BaseClass>::StreamedSubscribeMessageData, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageData() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageData(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDataRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDataResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageData(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageDataRequest,::mavsdk::rpc::logging::MessageDataResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageLogging : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageLogging() {
      ::grpc::Service::MarkMethodStreamed(10,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest, ::mavsdk::rpc::logging::MessageLoggingResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageLogging<BaseClass>::StreamedSubscribeMessageLogging, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageLogging() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageLogging(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageLoggingResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageLogging(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageLoggingRequest,::mavsdk::rpc::logging::MessageLoggingResponse>* server_split_streamer) = 0;
  };
  template <class BaseClass>
  class WithSplitStreamingMethod_SubscribeMessageDropout : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service *service) {}
   public:
    WithSplitStreamingMethod_SubscribeMessageDropout() {
      ::grpc::Service::MarkMethodStreamed(11,
        new ::grpc::internal::SplitServerStreamingHandler< ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest, ::mavsdk::rpc::logging::MessageDropoutResponse>(std::bind(&WithSplitStreamingMethod_SubscribeMessageDropout<BaseClass>::StreamedSubscribeMessageDropout, this, std::placeholders::_1, std::placeholders::_2)));
    }
    ~WithSplitStreamingMethod_SubscribeMessageDropout() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status SubscribeMessageDropout(::grpc::ServerContext* context, const ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest* request, ::grpc::ServerWriter< ::mavsdk::rpc::logging::MessageDropoutResponse>* writer) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with split streamed
    virtual ::grpc::Status StreamedSubscribeMessageDropout(::grpc::ServerContext* context, ::grpc::ServerSplitStreamer< ::mavsdk::rpc::logging::SubscribeMessageDropoutRequest,::mavsdk::rpc::logging::MessageDropoutResponse>* server_split_streamer) = 0;
  };
  typedef WithSplitStreamingMethod_SubscribeMessageFlagBits<WithSplitStreamingMethod_SubscribeMessageFormat<WithSplitStreamingMethod_SubscribeMessageInfo<WithSplitStreamingMethod_SubscribeMessageInfoMultiple<WithSplitStreamingMethod_SubscribeMessageParameter<WithSplitStreamingMethod_SubscribeMessageAddLogged<WithSplitStreamingMethod_SubscribeMessageRemoveLogged<WithSplitStreamingMethod_SubscribeMessageData<WithSplitStreamingMethod_SubscribeMessageLogging<WithSplitStreamingMethod_SubscribeMessageDropout<Service > > > > > > > > > > SplitStreamedService;
  typedef WithStreamedUnaryMethod_StartLogging<WithStreamedUnaryMethod_StopLogging<WithSplitStreamingMethod_SubscribeMessageFlagBits<WithSplitStreamingMethod_SubscribeMessageFormat<WithSplitStreamingMethod_SubscribeMessageInfo<WithSplitStreamingMethod_SubscribeMessageInfoMultiple<WithSplitStreamingMethod_SubscribeMessageParameter<WithSplitStreamingMethod_SubscribeMessageAddLogged<WithSplitStreamingMethod_SubscribeMessageRemoveLogged<WithSplitStreamingMethod_SubscribeMessageData<WithSplitStreamingMethod_SubscribeMessageLogging<WithSplitStreamingMethod_SubscribeMessageDropout<Service > > > > > > > > > > > > StreamedService;
};

}  // namespace logging
}  // namespace rpc
}  // namespace mavsdk


#endif  // GRPC_logging_2flogging_2eproto__INCLUDED
